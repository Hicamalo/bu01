
test_dw1000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b0c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d8  08008c20  08008c20  00009c20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092f8  080092f8  0000b1e4  2**0
                  CONTENTS
  4 .ARM          00000008  080092f8  080092f8  0000a2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009300  08009300  0000b1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009300  08009300  0000a300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009304  08009304  0000a304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08009308  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  200001e8  080094ec  0000b1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  080094ec  0000b5bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5a4  00000000  00000000  0000b20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033ca  00000000  00000000  0001a7b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  0001db80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c58  00000000  00000000  0001ebd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000054b7  00000000  00000000  0001f828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018703  00000000  00000000  00024cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f519  00000000  00000000  0003d3e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc8fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005098  00000000  00000000  000cc940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d19d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000116  00000000  00000000  000d1a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008c04 	.word	0x08008c04

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08008c04 	.word	0x08008c04

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2lz>:
 8000ac8:	b538      	push	{r3, r4, r5, lr}
 8000aca:	2200      	movs	r2, #0
 8000acc:	2300      	movs	r3, #0
 8000ace:	4604      	mov	r4, r0
 8000ad0:	460d      	mov	r5, r1
 8000ad2:	f7ff ff73 	bl	80009bc <__aeabi_dcmplt>
 8000ad6:	b928      	cbnz	r0, 8000ae4 <__aeabi_d2lz+0x1c>
 8000ad8:	4620      	mov	r0, r4
 8000ada:	4629      	mov	r1, r5
 8000adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ae0:	f000 b80a 	b.w	8000af8 <__aeabi_d2ulz>
 8000ae4:	4620      	mov	r0, r4
 8000ae6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000aea:	f000 f805 	bl	8000af8 <__aeabi_d2ulz>
 8000aee:	4240      	negs	r0, r0
 8000af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af4:	bd38      	pop	{r3, r4, r5, pc}
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2ulz>:
 8000af8:	b5d0      	push	{r4, r6, r7, lr}
 8000afa:	2200      	movs	r2, #0
 8000afc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <__aeabi_d2ulz+0x34>)
 8000afe:	4606      	mov	r6, r0
 8000b00:	460f      	mov	r7, r1
 8000b02:	f7ff fce9 	bl	80004d8 <__aeabi_dmul>
 8000b06:	f7ff ffbf 	bl	8000a88 <__aeabi_d2uiz>
 8000b0a:	4604      	mov	r4, r0
 8000b0c:	f7ff fc6a 	bl	80003e4 <__aeabi_ui2d>
 8000b10:	2200      	movs	r2, #0
 8000b12:	4b07      	ldr	r3, [pc, #28]	@ (8000b30 <__aeabi_d2ulz+0x38>)
 8000b14:	f7ff fce0 	bl	80004d8 <__aeabi_dmul>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	4630      	mov	r0, r6
 8000b1e:	4639      	mov	r1, r7
 8000b20:	f7ff fb22 	bl	8000168 <__aeabi_dsub>
 8000b24:	f7ff ffb0 	bl	8000a88 <__aeabi_d2uiz>
 8000b28:	4621      	mov	r1, r4
 8000b2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000b2c:	3df00000 	.word	0x3df00000
 8000b30:	41f00000 	.word	0x41f00000

08000b34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b48:	4b3e      	ldr	r3, [pc, #248]	@ (8000c44 <MX_GPIO_Init+0x110>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a3d      	ldr	r2, [pc, #244]	@ (8000c44 <MX_GPIO_Init+0x110>)
 8000b4e:	f043 0320 	orr.w	r3, r3, #32
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b3b      	ldr	r3, [pc, #236]	@ (8000c44 <MX_GPIO_Init+0x110>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0320 	and.w	r3, r3, #32
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	4b38      	ldr	r3, [pc, #224]	@ (8000c44 <MX_GPIO_Init+0x110>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a37      	ldr	r2, [pc, #220]	@ (8000c44 <MX_GPIO_Init+0x110>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b35      	ldr	r3, [pc, #212]	@ (8000c44 <MX_GPIO_Init+0x110>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b78:	4b32      	ldr	r3, [pc, #200]	@ (8000c44 <MX_GPIO_Init+0x110>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a31      	ldr	r2, [pc, #196]	@ (8000c44 <MX_GPIO_Init+0x110>)
 8000b7e:	f043 0308 	orr.w	r3, r3, #8
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b2f      	ldr	r3, [pc, #188]	@ (8000c44 <MX_GPIO_Init+0x110>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0308 	and.w	r3, r3, #8
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_2_Pin|LED_1_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2106      	movs	r1, #6
 8000b94:	482c      	ldr	r0, [pc, #176]	@ (8000c48 <MX_GPIO_Init+0x114>)
 8000b96:	f001 f89b 	bl	8001cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	2110      	movs	r1, #16
 8000b9e:	482a      	ldr	r0, [pc, #168]	@ (8000c48 <MX_GPIO_Init+0x114>)
 8000ba0:	f001 f896 	bl	8001cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_WUP_GPIO_Port, DW_WUP_Pin, GPIO_PIN_SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000baa:	4828      	ldr	r0, [pc, #160]	@ (8000c4c <MX_GPIO_Init+0x118>)
 8000bac:	f001 f890 	bl	8001cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_2_Pin LED_1_Pin DW_NSS_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_1_Pin|DW_NSS_Pin;
 8000bb0:	2316      	movs	r3, #22
 8000bb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 0310 	add.w	r3, r7, #16
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4820      	ldr	r0, [pc, #128]	@ (8000c48 <MX_GPIO_Init+0x114>)
 8000bc8:	f000 fdf4 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <MX_GPIO_Init+0x11c>)
 8000bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	4619      	mov	r1, r3
 8000bde:	481b      	ldr	r0, [pc, #108]	@ (8000c4c <MX_GPIO_Init+0x118>)
 8000be0:	f000 fde8 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_RST_Pin */
  GPIO_InitStruct.Pin = DW_RST_Pin;
 8000be4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000be8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bea:	4b19      	ldr	r3, [pc, #100]	@ (8000c50 <MX_GPIO_Init+0x11c>)
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 0310 	add.w	r3, r7, #16
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4814      	ldr	r0, [pc, #80]	@ (8000c4c <MX_GPIO_Init+0x118>)
 8000bfa:	f000 fddb 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_WUP_Pin */
  GPIO_InitStruct.Pin = DW_WUP_Pin;
 8000bfe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c04:	2311      	movs	r3, #17
 8000c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_WUP_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	4619      	mov	r1, r3
 8000c16:	480d      	ldr	r0, [pc, #52]	@ (8000c4c <MX_GPIO_Init+0x118>)
 8000c18:	f000 fdcc 	bl	80017b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2103      	movs	r1, #3
 8000c20:	2006      	movs	r0, #6
 8000c22:	f000 fcab 	bl	800157c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c26:	2006      	movs	r0, #6
 8000c28:	f000 fcd4 	bl	80015d4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2104      	movs	r1, #4
 8000c30:	2028      	movs	r0, #40	@ 0x28
 8000c32:	f000 fca3 	bl	800157c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c36:	2028      	movs	r0, #40	@ 0x28
 8000c38:	f000 fccc 	bl	80015d4 <HAL_NVIC_EnableIRQ>

}
 8000c3c:	bf00      	nop
 8000c3e:	3720      	adds	r7, #32
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40010800 	.word	0x40010800
 8000c4c:	40010c00 	.word	0x40010c00
 8000c50:	10110000 	.word	0x10110000

08000c54 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000c58:	f000 fafa 	bl	8001250 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000c5c:	f000 f81a 	bl	8000c94 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000c60:	f7ff ff68 	bl	8000b34 <MX_GPIO_Init>
    MX_SPI1_Init();
 8000c64:	f000 f890 	bl	8000d88 <MX_SPI1_Init>
    MX_USART1_UART_Init();
 8000c68:	f000 fa4e 	bl	8001108 <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */

    //uint8_t test_spi_result = test_spi_dw1000();
    //uint8_t test_dev_id = test_check_id_dw1000();

    setup_DW1000RSTnIRQ(0);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f004 f97d 	bl	8004f6c <setup_DW1000RSTnIRQ>

    terminal_init();
 8000c72:	f005 f831 	bl	8005cd8 <terminal_init>

    initialise_dw1000();
 8000c76:	f004 fa8f 	bl	8005198 <initialise_dw1000>
    configure_dw1000();
 8000c7a:	f004 faa7 	bl	80051cc <configure_dw1000>

    dwt_setrxantennadelay(RX_ANT_DLY_DTU);
 8000c7e:	f248 00c6 	movw	r0, #32966	@ 0x80c6
 8000c82:	f003 fb37 	bl	80042f4 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY_DTU);
 8000c86:	f248 00c6 	movw	r0, #32966	@ 0x80c6
 8000c8a:	f003 fb43 	bl	8004314 <dwt_settxantennadelay>

        /* USER CODE BEGIN 3 */
#if MODE == TAG
        tag_loop();
#else
        anchor_loop();
 8000c8e:	f004 fd23 	bl	80056d8 <anchor_loop>
 8000c92:	e7fc      	b.n	8000c8e <main+0x3a>

08000c94 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b090      	sub	sp, #64	@ 0x40
 8000c98:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9a:	f107 0318 	add.w	r3, r7, #24
 8000c9e:	2228      	movs	r2, #40	@ 0x28
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f005 fedd 	bl	8006a62 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	611a      	str	r2, [r3, #16]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cbe:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000cc0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000cc4:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cd4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000cda:	f107 0318 	add.w	r3, r7, #24
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f001 f83a 	bl	8001d58 <HAL_RCC_OscConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0x5a>
        Error_Handler();
 8000cea:	f000 f819 	bl	8000d20 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000cee:	230f      	movs	r3, #15
 8000cf0:	607b      	str	r3, [r7, #4]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cfe:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	2102      	movs	r1, #2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f001 fb93 	bl	8002434 <HAL_RCC_ClockConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <SystemClock_Config+0x84>
        Error_Handler();
 8000d14:	f000 f804 	bl	8000d20 <Error_Handler>
    }
}
 8000d18:	bf00      	nop
 8000d1a:	3740      	adds	r7, #64	@ 0x40
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <Error_Handler+0x8>

08000d2c <assert_failed>:
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b0c2      	sub	sp, #264	@ 0x108
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000d36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000d3a:	6018      	str	r0, [r3, #0]
 8000d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000d44:	6019      	str	r1, [r3, #0]
    /* USER CODE BEGIN 6 */
    /* User can add his own implementation to report the file name and line number,
       ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    char buf[256];

    sprintf(buf, "Wrong parameters value: file %s on line %d\r\n", file, line);
 8000d46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000d4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000d4e:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000d52:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000d56:	f107 0008 	add.w	r0, r7, #8
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	6812      	ldr	r2, [r2, #0]
 8000d5e:	4909      	ldr	r1, [pc, #36]	@ (8000d84 <assert_failed+0x58>)
 8000d60:	f005 fe1c 	bl	800699c <siprintf>

    terminal_print(buf, strlen(buf));
 8000d64:	f107 0308 	add.w	r3, r7, #8
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff f9f1 	bl	8000150 <strlen>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	4611      	mov	r1, r2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f004 ff0b 	bl	8005b94 <terminal_print>
    while (1) {
 8000d7e:	bf00      	nop
 8000d80:	e7fd      	b.n	8000d7e <assert_failed+0x52>
 8000d82:	bf00      	nop
 8000d84:	08008c20 	.word	0x08008c20

08000d88 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d8c:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <MX_SPI1_Init+0x64>)
 8000d8e:	4a18      	ldr	r2, [pc, #96]	@ (8000df0 <MX_SPI1_Init+0x68>)
 8000d90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d92:	4b16      	ldr	r3, [pc, #88]	@ (8000dec <MX_SPI1_Init+0x64>)
 8000d94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d9a:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <MX_SPI1_Init+0x64>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000da0:	4b12      	ldr	r3, [pc, #72]	@ (8000dec <MX_SPI1_Init+0x64>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000da6:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <MX_SPI1_Init+0x64>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	@ (8000dec <MX_SPI1_Init+0x64>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <MX_SPI1_Init+0x64>)
 8000db4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000db8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <MX_SPI1_Init+0x64>)
 8000dbc:	2220      	movs	r2, #32
 8000dbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <MX_SPI1_Init+0x64>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dc6:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <MX_SPI1_Init+0x64>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dcc:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <MX_SPI1_Init+0x64>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dd2:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <MX_SPI1_Init+0x64>)
 8000dd4:	220a      	movs	r2, #10
 8000dd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dd8:	4804      	ldr	r0, [pc, #16]	@ (8000dec <MX_SPI1_Init+0x64>)
 8000dda:	f001 fd61 	bl	80028a0 <HAL_SPI_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000de4:	f7ff ff9c 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000204 	.word	0x20000204
 8000df0:	40013000 	.word	0x40013000

08000df4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0310 	add.w	r3, r7, #16
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8000e7c <HAL_SPI_MspInit+0x88>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d12f      	bne.n	8000e74 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e14:	4b1a      	ldr	r3, [pc, #104]	@ (8000e80 <HAL_SPI_MspInit+0x8c>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a19      	ldr	r2, [pc, #100]	@ (8000e80 <HAL_SPI_MspInit+0x8c>)
 8000e1a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b17      	ldr	r3, [pc, #92]	@ (8000e80 <HAL_SPI_MspInit+0x8c>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	4b14      	ldr	r3, [pc, #80]	@ (8000e80 <HAL_SPI_MspInit+0x8c>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a13      	ldr	r2, [pc, #76]	@ (8000e80 <HAL_SPI_MspInit+0x8c>)
 8000e32:	f043 0304 	orr.w	r3, r3, #4
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <HAL_SPI_MspInit+0x8c>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DW_SCK_Pin|DW_MOSI_Pin;
 8000e44:	23a0      	movs	r3, #160	@ 0xa0
 8000e46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 0310 	add.w	r3, r7, #16
 8000e54:	4619      	mov	r1, r3
 8000e56:	480b      	ldr	r0, [pc, #44]	@ (8000e84 <HAL_SPI_MspInit+0x90>)
 8000e58:	f000 fcac 	bl	80017b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DW_MISO_Pin;
 8000e5c:	2340      	movs	r3, #64	@ 0x40
 8000e5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e64:	2302      	movs	r3, #2
 8000e66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(DW_MISO_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4805      	ldr	r0, [pc, #20]	@ (8000e84 <HAL_SPI_MspInit+0x90>)
 8000e70:	f000 fca0 	bl	80017b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e74:	bf00      	nop
 8000e76:	3720      	adds	r7, #32
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40013000 	.word	0x40013000
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40010800 	.word	0x40010800

08000e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <HAL_MspInit+0x5c>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	4a14      	ldr	r2, [pc, #80]	@ (8000ee4 <HAL_MspInit+0x5c>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6193      	str	r3, [r2, #24]
 8000e9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <HAL_MspInit+0x5c>)
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <HAL_MspInit+0x5c>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	4a0e      	ldr	r2, [pc, #56]	@ (8000ee4 <HAL_MspInit+0x5c>)
 8000eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eb0:	61d3      	str	r3, [r2, #28]
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <HAL_MspInit+0x5c>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <HAL_MspInit+0x60>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	@ (8000ee8 <HAL_MspInit+0x60>)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010000 	.word	0x40010000

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <MemManage_Handler+0x4>

08000f04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr

08000f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f3c:	f000 f9ce 	bl	80012dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_IRQn_Pin);
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f000 feed 	bl	8001d28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f58:	4802      	ldr	r0, [pc, #8]	@ (8000f64 <USART1_IRQHandler+0x10>)
 8000f5a:	f002 f973 	bl	8003244 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000260 	.word	0x20000260

08000f68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DW_RST_Pin);
 8000f6c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000f70:	f000 feda 	bl	8001d28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return 1;
 8000f7c:	2301      	movs	r3, #1
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr

08000f86 <_kill>:

int _kill(int pid, int sig)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
 8000f8e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f90:	f005 fdba 	bl	8006b08 <__errno>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2216      	movs	r2, #22
 8000f98:	601a      	str	r2, [r3, #0]
  return -1;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <_exit>:

void _exit (int status)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fae:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ffe7 	bl	8000f86 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <_exit+0x12>

08000fbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	e00a      	b.n	8000fe4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fce:	f3af 8000 	nop.w
 8000fd2:	4601      	mov	r1, r0
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	1c5a      	adds	r2, r3, #1
 8000fd8:	60ba      	str	r2, [r7, #8]
 8000fda:	b2ca      	uxtb	r2, r1
 8000fdc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	dbf0      	blt.n	8000fce <_read+0x12>
  }

  return len;
 8000fec:	687b      	ldr	r3, [r7, #4]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	60f8      	str	r0, [r7, #12]
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	e009      	b.n	800101c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	60ba      	str	r2, [r7, #8]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	3301      	adds	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697a      	ldr	r2, [r7, #20]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	429a      	cmp	r2, r3
 8001022:	dbf1      	blt.n	8001008 <_write+0x12>
  }
  return len;
 8001024:	687b      	ldr	r3, [r7, #4]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <_close>:

int _close(int file)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001054:	605a      	str	r2, [r3, #4]
  return 0;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr

08001062 <_isatty>:

int _isatty(int file)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800106a:	2301      	movs	r3, #1
}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr

08001076 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001076:	b480      	push	{r7}
 8001078:	b085      	sub	sp, #20
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
	...

08001090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001098:	4a14      	ldr	r2, [pc, #80]	@ (80010ec <_sbrk+0x5c>)
 800109a:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <_sbrk+0x60>)
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a4:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ac:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <_sbrk+0x64>)
 80010ae:	4a12      	ldr	r2, [pc, #72]	@ (80010f8 <_sbrk+0x68>)
 80010b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b2:	4b10      	ldr	r3, [pc, #64]	@ (80010f4 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d207      	bcs.n	80010d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c0:	f005 fd22 	bl	8006b08 <__errno>
 80010c4:	4603      	mov	r3, r0
 80010c6:	220c      	movs	r2, #12
 80010c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	e009      	b.n	80010e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d0:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d6:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	4a05      	ldr	r2, [pc, #20]	@ (80010f4 <_sbrk+0x64>)
 80010e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20005000 	.word	0x20005000
 80010f0:	00000400 	.word	0x00000400
 80010f4:	2000025c 	.word	0x2000025c
 80010f8:	200005c0 	.word	0x200005c0

080010fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800110c:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <MX_USART1_UART_Init+0x4c>)
 800110e:	4a12      	ldr	r2, [pc, #72]	@ (8001158 <MX_USART1_UART_Init+0x50>)
 8001110:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001112:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <MX_USART1_UART_Init+0x4c>)
 8001114:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001118:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <MX_USART1_UART_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001120:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <MX_USART1_UART_Init+0x4c>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001126:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <MX_USART1_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800112c:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <MX_USART1_UART_Init+0x4c>)
 800112e:	220c      	movs	r2, #12
 8001130:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001132:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <MX_USART1_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <MX_USART1_UART_Init+0x4c>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800113e:	4805      	ldr	r0, [pc, #20]	@ (8001154 <MX_USART1_UART_Init+0x4c>)
 8001140:	f001 ff48 	bl	8002fd4 <HAL_UART_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800114a:	f7ff fde9 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000260 	.word	0x20000260
 8001158:	40013800 	.word	0x40013800

0800115c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a20      	ldr	r2, [pc, #128]	@ (80011f8 <HAL_UART_MspInit+0x9c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d139      	bne.n	80011f0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800117c:	4b1f      	ldr	r3, [pc, #124]	@ (80011fc <HAL_UART_MspInit+0xa0>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a1e      	ldr	r2, [pc, #120]	@ (80011fc <HAL_UART_MspInit+0xa0>)
 8001182:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <HAL_UART_MspInit+0xa0>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001194:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <HAL_UART_MspInit+0xa0>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a18      	ldr	r2, [pc, #96]	@ (80011fc <HAL_UART_MspInit+0xa0>)
 800119a:	f043 0304 	orr.w	r3, r3, #4
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <HAL_UART_MspInit+0xa0>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 0310 	add.w	r3, r7, #16
 80011be:	4619      	mov	r1, r3
 80011c0:	480f      	ldr	r0, [pc, #60]	@ (8001200 <HAL_UART_MspInit+0xa4>)
 80011c2:	f000 faf7 	bl	80017b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	4619      	mov	r1, r3
 80011da:	4809      	ldr	r0, [pc, #36]	@ (8001200 <HAL_UART_MspInit+0xa4>)
 80011dc:	f000 faea 	bl	80017b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2100      	movs	r1, #0
 80011e4:	2025      	movs	r0, #37	@ 0x25
 80011e6:	f000 f9c9 	bl	800157c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011ea:	2025      	movs	r0, #37	@ 0x25
 80011ec:	f000 f9f2 	bl	80015d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80011f0:	bf00      	nop
 80011f2:	3720      	adds	r7, #32
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40013800 	.word	0x40013800
 80011fc:	40021000 	.word	0x40021000
 8001200:	40010800 	.word	0x40010800

08001204 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001204:	f7ff ff7a 	bl	80010fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001208:	480b      	ldr	r0, [pc, #44]	@ (8001238 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800120a:	490c      	ldr	r1, [pc, #48]	@ (800123c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800120c:	4a0c      	ldr	r2, [pc, #48]	@ (8001240 <LoopFillZerobss+0x16>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001210:	e002      	b.n	8001218 <LoopCopyDataInit>

08001212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001216:	3304      	adds	r3, #4

08001218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800121c:	d3f9      	bcc.n	8001212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121e:	4a09      	ldr	r2, [pc, #36]	@ (8001244 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001220:	4c09      	ldr	r4, [pc, #36]	@ (8001248 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001224:	e001      	b.n	800122a <LoopFillZerobss>

08001226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001228:	3204      	adds	r2, #4

0800122a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800122c:	d3fb      	bcc.n	8001226 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800122e:	f005 fc71 	bl	8006b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001232:	f7ff fd0f 	bl	8000c54 <main>
  bx lr
 8001236:	4770      	bx	lr
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800123c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001240:	08009308 	.word	0x08009308
  ldr r2, =_sbss
 8001244:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001248:	200005bc 	.word	0x200005bc

0800124c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC1_2_IRQHandler>
	...

08001250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001254:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <HAL_Init+0x28>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a07      	ldr	r2, [pc, #28]	@ (8001278 <HAL_Init+0x28>)
 800125a:	f043 0310 	orr.w	r3, r3, #16
 800125e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001260:	2003      	movs	r0, #3
 8001262:	f000 f96b 	bl	800153c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001266:	200f      	movs	r0, #15
 8001268:	f000 f808 	bl	800127c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800126c:	f7ff fe0c 	bl	8000e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40022000 	.word	0x40022000

0800127c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001284:	4b12      	ldr	r3, [pc, #72]	@ (80012d0 <HAL_InitTick+0x54>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b12      	ldr	r3, [pc, #72]	@ (80012d4 <HAL_InitTick+0x58>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4619      	mov	r1, r3
 800128e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001292:	fbb3 f3f1 	udiv	r3, r3, r1
 8001296:	fbb2 f3f3 	udiv	r3, r2, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f9ca 	bl	8001634 <HAL_SYSTICK_Config>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00e      	b.n	80012c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	d80a      	bhi.n	80012c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b0:	2200      	movs	r2, #0
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f000 f960 	bl	800157c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012bc:	4a06      	ldr	r2, [pc, #24]	@ (80012d8 <HAL_InitTick+0x5c>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e000      	b.n	80012c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000000 	.word	0x20000000
 80012d4:	20000008 	.word	0x20000008
 80012d8:	20000004 	.word	0x20000004

080012dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e0:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <HAL_IncTick+0x1c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <HAL_IncTick+0x20>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	4a03      	ldr	r2, [pc, #12]	@ (80012fc <HAL_IncTick+0x20>)
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	20000008 	.word	0x20000008
 80012fc:	200002a8 	.word	0x200002a8

08001300 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return uwTick;
 8001304:	4b02      	ldr	r3, [pc, #8]	@ (8001310 <HAL_GetTick+0x10>)
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	200002a8 	.word	0x200002a8

08001314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800131c:	f7ff fff0 	bl	8001300 <HAL_GetTick>
 8001320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132c:	d005      	beq.n	800133a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800132e:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <HAL_Delay+0x44>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800133a:	bf00      	nop
 800133c:	f7ff ffe0 	bl	8001300 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	429a      	cmp	r2, r3
 800134a:	d8f7      	bhi.n	800133c <HAL_Delay+0x28>
  {
  }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000008 	.word	0x20000008

0800135c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800136c:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <__NVIC_SetPriorityGrouping+0x44>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001378:	4013      	ands	r3, r2
 800137a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001384:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001388:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800138c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800138e:	4a04      	ldr	r2, [pc, #16]	@ (80013a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	60d3      	str	r3, [r2, #12]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a8:	4b04      	ldr	r3, [pc, #16]	@ (80013bc <__NVIC_GetPriorityGrouping+0x18>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	0a1b      	lsrs	r3, r3, #8
 80013ae:	f003 0307 	and.w	r3, r3, #7
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	db0b      	blt.n	80013ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	f003 021f 	and.w	r2, r3, #31
 80013d8:	4906      	ldr	r1, [pc, #24]	@ (80013f4 <__NVIC_EnableIRQ+0x34>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	095b      	lsrs	r3, r3, #5
 80013e0:	2001      	movs	r0, #1
 80013e2:	fa00 f202 	lsl.w	r2, r0, r2
 80013e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	e000e100 	.word	0xe000e100

080013f8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	2b00      	cmp	r3, #0
 8001408:	db12      	blt.n	8001430 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	f003 021f 	and.w	r2, r3, #31
 8001410:	490a      	ldr	r1, [pc, #40]	@ (800143c <__NVIC_DisableIRQ+0x44>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	2001      	movs	r0, #1
 800141a:	fa00 f202 	lsl.w	r2, r0, r2
 800141e:	3320      	adds	r3, #32
 8001420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001424:	f3bf 8f4f 	dsb	sy
}
 8001428:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800142a:	f3bf 8f6f 	isb	sy
}
 800142e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000e100 	.word	0xe000e100

08001440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	db0a      	blt.n	800146a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	b2da      	uxtb	r2, r3
 8001458:	490c      	ldr	r1, [pc, #48]	@ (800148c <__NVIC_SetPriority+0x4c>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	0112      	lsls	r2, r2, #4
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	440b      	add	r3, r1
 8001464:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001468:	e00a      	b.n	8001480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4908      	ldr	r1, [pc, #32]	@ (8001490 <__NVIC_SetPriority+0x50>)
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	3b04      	subs	r3, #4
 8001478:	0112      	lsls	r2, r2, #4
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	440b      	add	r3, r1
 800147e:	761a      	strb	r2, [r3, #24]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000e100 	.word	0xe000e100
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001494:	b480      	push	{r7}
 8001496:	b089      	sub	sp, #36	@ 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f1c3 0307 	rsb	r3, r3, #7
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	bf28      	it	cs
 80014b2:	2304      	movcs	r3, #4
 80014b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3304      	adds	r3, #4
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d902      	bls.n	80014c4 <NVIC_EncodePriority+0x30>
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3b03      	subs	r3, #3
 80014c2:	e000      	b.n	80014c6 <NVIC_EncodePriority+0x32>
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	f04f 32ff 	mov.w	r2, #4294967295
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	401a      	ands	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	43d9      	mvns	r1, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	4313      	orrs	r3, r2
         );
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3724      	adds	r7, #36	@ 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001508:	d301      	bcc.n	800150e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150a:	2301      	movs	r3, #1
 800150c:	e00f      	b.n	800152e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150e:	4a0a      	ldr	r2, [pc, #40]	@ (8001538 <SysTick_Config+0x40>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001516:	210f      	movs	r1, #15
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	f7ff ff90 	bl	8001440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001520:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <SysTick_Config+0x40>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001526:	4b04      	ldr	r3, [pc, #16]	@ (8001538 <SysTick_Config+0x40>)
 8001528:	2207      	movs	r2, #7
 800152a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	e000e010 	.word	0xe000e010

0800153c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b07      	cmp	r3, #7
 8001548:	d00f      	beq.n	800156a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b06      	cmp	r3, #6
 800154e:	d00c      	beq.n	800156a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b05      	cmp	r3, #5
 8001554:	d009      	beq.n	800156a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b04      	cmp	r3, #4
 800155a:	d006      	beq.n	800156a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d003      	beq.n	800156a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001562:	2191      	movs	r1, #145	@ 0x91
 8001564:	4804      	ldr	r0, [pc, #16]	@ (8001578 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001566:	f7ff fbe1 	bl	8000d2c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff fef6 	bl	800135c <__NVIC_SetPriorityGrouping>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	08008c50 	.word	0x08008c50

0800157c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b0f      	cmp	r3, #15
 8001592:	d903      	bls.n	800159c <HAL_NVIC_SetPriority+0x20>
 8001594:	21a9      	movs	r1, #169	@ 0xa9
 8001596:	480e      	ldr	r0, [pc, #56]	@ (80015d0 <HAL_NVIC_SetPriority+0x54>)
 8001598:	f7ff fbc8 	bl	8000d2c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	2b0f      	cmp	r3, #15
 80015a0:	d903      	bls.n	80015aa <HAL_NVIC_SetPriority+0x2e>
 80015a2:	21aa      	movs	r1, #170	@ 0xaa
 80015a4:	480a      	ldr	r0, [pc, #40]	@ (80015d0 <HAL_NVIC_SetPriority+0x54>)
 80015a6:	f7ff fbc1 	bl	8000d2c <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015aa:	f7ff fefb 	bl	80013a4 <__NVIC_GetPriorityGrouping>
 80015ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	68b9      	ldr	r1, [r7, #8]
 80015b4:	6978      	ldr	r0, [r7, #20]
 80015b6:	f7ff ff6d 	bl	8001494 <NVIC_EncodePriority>
 80015ba:	4602      	mov	r2, r0
 80015bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c0:	4611      	mov	r1, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff ff3c 	bl	8001440 <__NVIC_SetPriority>
}
 80015c8:	bf00      	nop
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	08008c50 	.word	0x08008c50

080015d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	da03      	bge.n	80015ee <HAL_NVIC_EnableIRQ+0x1a>
 80015e6:	21bd      	movs	r1, #189	@ 0xbd
 80015e8:	4805      	ldr	r0, [pc, #20]	@ (8001600 <HAL_NVIC_EnableIRQ+0x2c>)
 80015ea:	f7ff fb9f 	bl	8000d2c <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fee4 	bl	80013c0 <__NVIC_EnableIRQ>
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	08008c50 	.word	0x08008c50

08001604 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	2b00      	cmp	r3, #0
 8001614:	da03      	bge.n	800161e <HAL_NVIC_DisableIRQ+0x1a>
 8001616:	21cd      	movs	r1, #205	@ 0xcd
 8001618:	4805      	ldr	r0, [pc, #20]	@ (8001630 <HAL_NVIC_DisableIRQ+0x2c>)
 800161a:	f7ff fb87 	bl	8000d2c <assert_failed>

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fee8 	bl	80013f8 <__NVIC_DisableIRQ>
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	08008c50 	.word	0x08008c50

08001634 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff5b 	bl	80014f8 <SysTick_Config>
 8001642:	4603      	mov	r3, r0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d008      	beq.n	8001676 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2204      	movs	r2, #4
 8001668:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e020      	b.n	80016b8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 020e 	bic.w	r2, r2, #14
 8001684:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0201 	bic.w	r2, r2, #1
 8001694:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800169e:	2101      	movs	r1, #1
 80016a0:	fa01 f202 	lsl.w	r2, r1, r2
 80016a4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
	...

080016c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d005      	beq.n	80016e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2204      	movs	r2, #4
 80016e0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	73fb      	strb	r3, [r7, #15]
 80016e6:	e051      	b.n	800178c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 020e 	bic.w	r2, r2, #14
 80016f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0201 	bic.w	r2, r2, #1
 8001706:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a22      	ldr	r2, [pc, #136]	@ (8001798 <HAL_DMA_Abort_IT+0xd4>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d029      	beq.n	8001766 <HAL_DMA_Abort_IT+0xa2>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a21      	ldr	r2, [pc, #132]	@ (800179c <HAL_DMA_Abort_IT+0xd8>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d022      	beq.n	8001762 <HAL_DMA_Abort_IT+0x9e>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a1f      	ldr	r2, [pc, #124]	@ (80017a0 <HAL_DMA_Abort_IT+0xdc>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d01a      	beq.n	800175c <HAL_DMA_Abort_IT+0x98>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a1e      	ldr	r2, [pc, #120]	@ (80017a4 <HAL_DMA_Abort_IT+0xe0>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d012      	beq.n	8001756 <HAL_DMA_Abort_IT+0x92>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a1c      	ldr	r2, [pc, #112]	@ (80017a8 <HAL_DMA_Abort_IT+0xe4>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d00a      	beq.n	8001750 <HAL_DMA_Abort_IT+0x8c>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a1b      	ldr	r2, [pc, #108]	@ (80017ac <HAL_DMA_Abort_IT+0xe8>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d102      	bne.n	800174a <HAL_DMA_Abort_IT+0x86>
 8001744:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001748:	e00e      	b.n	8001768 <HAL_DMA_Abort_IT+0xa4>
 800174a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800174e:	e00b      	b.n	8001768 <HAL_DMA_Abort_IT+0xa4>
 8001750:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001754:	e008      	b.n	8001768 <HAL_DMA_Abort_IT+0xa4>
 8001756:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800175a:	e005      	b.n	8001768 <HAL_DMA_Abort_IT+0xa4>
 800175c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001760:	e002      	b.n	8001768 <HAL_DMA_Abort_IT+0xa4>
 8001762:	2310      	movs	r3, #16
 8001764:	e000      	b.n	8001768 <HAL_DMA_Abort_IT+0xa4>
 8001766:	2301      	movs	r3, #1
 8001768:	4a11      	ldr	r2, [pc, #68]	@ (80017b0 <HAL_DMA_Abort_IT+0xec>)
 800176a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	4798      	blx	r3
    } 
  }
  return status;
 800178c:	7bfb      	ldrb	r3, [r7, #15]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40020008 	.word	0x40020008
 800179c:	4002001c 	.word	0x4002001c
 80017a0:	40020030 	.word	0x40020030
 80017a4:	40020044 	.word	0x40020044
 80017a8:	40020058 	.word	0x40020058
 80017ac:	4002006c 	.word	0x4002006c
 80017b0:	40020000 	.word	0x40020000

080017b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	@ 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a96      	ldr	r2, [pc, #600]	@ (8001a24 <HAL_GPIO_Init+0x270>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d013      	beq.n	80017f6 <HAL_GPIO_Init+0x42>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a95      	ldr	r2, [pc, #596]	@ (8001a28 <HAL_GPIO_Init+0x274>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d00f      	beq.n	80017f6 <HAL_GPIO_Init+0x42>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a94      	ldr	r2, [pc, #592]	@ (8001a2c <HAL_GPIO_Init+0x278>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d00b      	beq.n	80017f6 <HAL_GPIO_Init+0x42>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a93      	ldr	r2, [pc, #588]	@ (8001a30 <HAL_GPIO_Init+0x27c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d007      	beq.n	80017f6 <HAL_GPIO_Init+0x42>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a92      	ldr	r2, [pc, #584]	@ (8001a34 <HAL_GPIO_Init+0x280>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_Init+0x42>
 80017ee:	21bd      	movs	r1, #189	@ 0xbd
 80017f0:	4891      	ldr	r0, [pc, #580]	@ (8001a38 <HAL_GPIO_Init+0x284>)
 80017f2:	f7ff fa9b 	bl	8000d2c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d004      	beq.n	800180a <HAL_GPIO_Init+0x56>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001808:	d303      	bcc.n	8001812 <HAL_GPIO_Init+0x5e>
 800180a:	21be      	movs	r1, #190	@ 0xbe
 800180c:	488a      	ldr	r0, [pc, #552]	@ (8001a38 <HAL_GPIO_Init+0x284>)
 800180e:	f7ff fa8d 	bl	8000d2c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 821d 	beq.w	8001c56 <HAL_GPIO_Init+0x4a2>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b01      	cmp	r3, #1
 8001822:	f000 8218 	beq.w	8001c56 <HAL_GPIO_Init+0x4a2>
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b11      	cmp	r3, #17
 800182c:	f000 8213 	beq.w	8001c56 <HAL_GPIO_Init+0x4a2>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b02      	cmp	r3, #2
 8001836:	f000 820e 	beq.w	8001c56 <HAL_GPIO_Init+0x4a2>
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b12      	cmp	r3, #18
 8001840:	f000 8209 	beq.w	8001c56 <HAL_GPIO_Init+0x4a2>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4a7c      	ldr	r2, [pc, #496]	@ (8001a3c <HAL_GPIO_Init+0x288>)
 800184a:	4293      	cmp	r3, r2
 800184c:	f000 8203 	beq.w	8001c56 <HAL_GPIO_Init+0x4a2>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	4a7a      	ldr	r2, [pc, #488]	@ (8001a40 <HAL_GPIO_Init+0x28c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	f000 81fd 	beq.w	8001c56 <HAL_GPIO_Init+0x4a2>
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4a78      	ldr	r2, [pc, #480]	@ (8001a44 <HAL_GPIO_Init+0x290>)
 8001862:	4293      	cmp	r3, r2
 8001864:	f000 81f7 	beq.w	8001c56 <HAL_GPIO_Init+0x4a2>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4a76      	ldr	r2, [pc, #472]	@ (8001a48 <HAL_GPIO_Init+0x294>)
 800186e:	4293      	cmp	r3, r2
 8001870:	f000 81f1 	beq.w	8001c56 <HAL_GPIO_Init+0x4a2>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4a74      	ldr	r2, [pc, #464]	@ (8001a4c <HAL_GPIO_Init+0x298>)
 800187a:	4293      	cmp	r3, r2
 800187c:	f000 81eb 	beq.w	8001c56 <HAL_GPIO_Init+0x4a2>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	4a72      	ldr	r2, [pc, #456]	@ (8001a50 <HAL_GPIO_Init+0x29c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	f000 81e5 	beq.w	8001c56 <HAL_GPIO_Init+0x4a2>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b03      	cmp	r3, #3
 8001892:	f000 81e0 	beq.w	8001c56 <HAL_GPIO_Init+0x4a2>
 8001896:	21bf      	movs	r1, #191	@ 0xbf
 8001898:	4867      	ldr	r0, [pc, #412]	@ (8001a38 <HAL_GPIO_Init+0x284>)
 800189a:	f7ff fa47 	bl	8000d2c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189e:	e1da      	b.n	8001c56 <HAL_GPIO_Init+0x4a2>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018a0:	2201      	movs	r2, #1
 80018a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	f040 81c9 	bne.w	8001c50 <HAL_GPIO_Init+0x49c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a58      	ldr	r2, [pc, #352]	@ (8001a24 <HAL_GPIO_Init+0x270>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d013      	beq.n	80018ee <HAL_GPIO_Init+0x13a>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a57      	ldr	r2, [pc, #348]	@ (8001a28 <HAL_GPIO_Init+0x274>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d00f      	beq.n	80018ee <HAL_GPIO_Init+0x13a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a56      	ldr	r2, [pc, #344]	@ (8001a2c <HAL_GPIO_Init+0x278>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d00b      	beq.n	80018ee <HAL_GPIO_Init+0x13a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a55      	ldr	r2, [pc, #340]	@ (8001a30 <HAL_GPIO_Init+0x27c>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d007      	beq.n	80018ee <HAL_GPIO_Init+0x13a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a54      	ldr	r2, [pc, #336]	@ (8001a34 <HAL_GPIO_Init+0x280>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_Init+0x13a>
 80018e6:	21cd      	movs	r1, #205	@ 0xcd
 80018e8:	4853      	ldr	r0, [pc, #332]	@ (8001a38 <HAL_GPIO_Init+0x284>)
 80018ea:	f7ff fa1f 	bl	8000d2c <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4a57      	ldr	r2, [pc, #348]	@ (8001a50 <HAL_GPIO_Init+0x29c>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	f000 80c2 	beq.w	8001a7e <HAL_GPIO_Init+0x2ca>
 80018fa:	4a55      	ldr	r2, [pc, #340]	@ (8001a50 <HAL_GPIO_Init+0x29c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	f200 80e8 	bhi.w	8001ad2 <HAL_GPIO_Init+0x31e>
 8001902:	4a50      	ldr	r2, [pc, #320]	@ (8001a44 <HAL_GPIO_Init+0x290>)
 8001904:	4293      	cmp	r3, r2
 8001906:	f000 80ba 	beq.w	8001a7e <HAL_GPIO_Init+0x2ca>
 800190a:	4a4e      	ldr	r2, [pc, #312]	@ (8001a44 <HAL_GPIO_Init+0x290>)
 800190c:	4293      	cmp	r3, r2
 800190e:	f200 80e0 	bhi.w	8001ad2 <HAL_GPIO_Init+0x31e>
 8001912:	4a4e      	ldr	r2, [pc, #312]	@ (8001a4c <HAL_GPIO_Init+0x298>)
 8001914:	4293      	cmp	r3, r2
 8001916:	f000 80b2 	beq.w	8001a7e <HAL_GPIO_Init+0x2ca>
 800191a:	4a4c      	ldr	r2, [pc, #304]	@ (8001a4c <HAL_GPIO_Init+0x298>)
 800191c:	4293      	cmp	r3, r2
 800191e:	f200 80d8 	bhi.w	8001ad2 <HAL_GPIO_Init+0x31e>
 8001922:	4a47      	ldr	r2, [pc, #284]	@ (8001a40 <HAL_GPIO_Init+0x28c>)
 8001924:	4293      	cmp	r3, r2
 8001926:	f000 80aa 	beq.w	8001a7e <HAL_GPIO_Init+0x2ca>
 800192a:	4a45      	ldr	r2, [pc, #276]	@ (8001a40 <HAL_GPIO_Init+0x28c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	f200 80d0 	bhi.w	8001ad2 <HAL_GPIO_Init+0x31e>
 8001932:	4a45      	ldr	r2, [pc, #276]	@ (8001a48 <HAL_GPIO_Init+0x294>)
 8001934:	4293      	cmp	r3, r2
 8001936:	f000 80a2 	beq.w	8001a7e <HAL_GPIO_Init+0x2ca>
 800193a:	4a43      	ldr	r2, [pc, #268]	@ (8001a48 <HAL_GPIO_Init+0x294>)
 800193c:	4293      	cmp	r3, r2
 800193e:	f200 80c8 	bhi.w	8001ad2 <HAL_GPIO_Init+0x31e>
 8001942:	2b12      	cmp	r3, #18
 8001944:	d82c      	bhi.n	80019a0 <HAL_GPIO_Init+0x1ec>
 8001946:	2b12      	cmp	r3, #18
 8001948:	f200 80c3 	bhi.w	8001ad2 <HAL_GPIO_Init+0x31e>
 800194c:	a201      	add	r2, pc, #4	@ (adr r2, 8001954 <HAL_GPIO_Init+0x1a0>)
 800194e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001952:	bf00      	nop
 8001954:	08001a7f 	.word	0x08001a7f
 8001958:	080019a9 	.word	0x080019a9
 800195c:	080019fb 	.word	0x080019fb
 8001960:	08001acd 	.word	0x08001acd
 8001964:	08001ad3 	.word	0x08001ad3
 8001968:	08001ad3 	.word	0x08001ad3
 800196c:	08001ad3 	.word	0x08001ad3
 8001970:	08001ad3 	.word	0x08001ad3
 8001974:	08001ad3 	.word	0x08001ad3
 8001978:	08001ad3 	.word	0x08001ad3
 800197c:	08001ad3 	.word	0x08001ad3
 8001980:	08001ad3 	.word	0x08001ad3
 8001984:	08001ad3 	.word	0x08001ad3
 8001988:	08001ad3 	.word	0x08001ad3
 800198c:	08001ad3 	.word	0x08001ad3
 8001990:	08001ad3 	.word	0x08001ad3
 8001994:	08001ad3 	.word	0x08001ad3
 8001998:	080019d1 	.word	0x080019d1
 800199c:	08001a55 	.word	0x08001a55
 80019a0:	4a26      	ldr	r2, [pc, #152]	@ (8001a3c <HAL_GPIO_Init+0x288>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d06b      	beq.n	8001a7e <HAL_GPIO_Init+0x2ca>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019a6:	e094      	b.n	8001ad2 <HAL_GPIO_Init+0x31e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d00b      	beq.n	80019c8 <HAL_GPIO_Init+0x214>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d007      	beq.n	80019c8 <HAL_GPIO_Init+0x214>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x214>
 80019c0:	21d5      	movs	r1, #213	@ 0xd5
 80019c2:	481d      	ldr	r0, [pc, #116]	@ (8001a38 <HAL_GPIO_Init+0x284>)
 80019c4:	f7ff f9b2 	bl	8000d2c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	623b      	str	r3, [r7, #32]
          break;
 80019ce:	e081      	b.n	8001ad4 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d00b      	beq.n	80019f0 <HAL_GPIO_Init+0x23c>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d007      	beq.n	80019f0 <HAL_GPIO_Init+0x23c>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x23c>
 80019e8:	21dc      	movs	r1, #220	@ 0xdc
 80019ea:	4813      	ldr	r0, [pc, #76]	@ (8001a38 <HAL_GPIO_Init+0x284>)
 80019ec:	f7ff f99e 	bl	8000d2c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	3304      	adds	r3, #4
 80019f6:	623b      	str	r3, [r7, #32]
          break;
 80019f8:	e06c      	b.n	8001ad4 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d00b      	beq.n	8001a1a <HAL_GPIO_Init+0x266>
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d007      	beq.n	8001a1a <HAL_GPIO_Init+0x266>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x266>
 8001a12:	21e3      	movs	r1, #227	@ 0xe3
 8001a14:	4808      	ldr	r0, [pc, #32]	@ (8001a38 <HAL_GPIO_Init+0x284>)
 8001a16:	f7ff f989 	bl	8000d2c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	3308      	adds	r3, #8
 8001a20:	623b      	str	r3, [r7, #32]
          break;
 8001a22:	e057      	b.n	8001ad4 <HAL_GPIO_Init+0x320>
 8001a24:	40010800 	.word	0x40010800
 8001a28:	40010c00 	.word	0x40010c00
 8001a2c:	40011000 	.word	0x40011000
 8001a30:	40011400 	.word	0x40011400
 8001a34:	40011800 	.word	0x40011800
 8001a38:	08008c8c 	.word	0x08008c8c
 8001a3c:	10110000 	.word	0x10110000
 8001a40:	10210000 	.word	0x10210000
 8001a44:	10310000 	.word	0x10310000
 8001a48:	10120000 	.word	0x10120000
 8001a4c:	10220000 	.word	0x10220000
 8001a50:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d00b      	beq.n	8001a74 <HAL_GPIO_Init+0x2c0>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d007      	beq.n	8001a74 <HAL_GPIO_Init+0x2c0>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x2c0>
 8001a6c:	21ea      	movs	r1, #234	@ 0xea
 8001a6e:	4880      	ldr	r0, [pc, #512]	@ (8001c70 <HAL_GPIO_Init+0x4bc>)
 8001a70:	f7ff f95c 	bl	8000d2c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	330c      	adds	r3, #12
 8001a7a:	623b      	str	r3, [r7, #32]
          break;
 8001a7c:	e02a      	b.n	8001ad4 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00b      	beq.n	8001a9e <HAL_GPIO_Init+0x2ea>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d007      	beq.n	8001a9e <HAL_GPIO_Init+0x2ea>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_Init+0x2ea>
 8001a96:	21f7      	movs	r1, #247	@ 0xf7
 8001a98:	4875      	ldr	r0, [pc, #468]	@ (8001c70 <HAL_GPIO_Init+0x4bc>)
 8001a9a:	f7ff f947 	bl	8000d2c <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d102      	bne.n	8001aac <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001aa6:	2304      	movs	r3, #4
 8001aa8:	623b      	str	r3, [r7, #32]
          break;
 8001aaa:	e013      	b.n	8001ad4 <HAL_GPIO_Init+0x320>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d105      	bne.n	8001ac0 <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ab4:	2308      	movs	r3, #8
 8001ab6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69fa      	ldr	r2, [r7, #28]
 8001abc:	611a      	str	r2, [r3, #16]
          break;
 8001abe:	e009      	b.n	8001ad4 <HAL_GPIO_Init+0x320>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ac0:	2308      	movs	r3, #8
 8001ac2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69fa      	ldr	r2, [r7, #28]
 8001ac8:	615a      	str	r2, [r3, #20]
          break;
 8001aca:	e003      	b.n	8001ad4 <HAL_GPIO_Init+0x320>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
          break;
 8001ad0:	e000      	b.n	8001ad4 <HAL_GPIO_Init+0x320>
          break;
 8001ad2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	2bff      	cmp	r3, #255	@ 0xff
 8001ad8:	d801      	bhi.n	8001ade <HAL_GPIO_Init+0x32a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	e001      	b.n	8001ae2 <HAL_GPIO_Init+0x32e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	2bff      	cmp	r3, #255	@ 0xff
 8001ae8:	d802      	bhi.n	8001af0 <HAL_GPIO_Init+0x33c>
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	e002      	b.n	8001af6 <HAL_GPIO_Init+0x342>
 8001af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af2:	3b08      	subs	r3, #8
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	210f      	movs	r1, #15
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	fa01 f303 	lsl.w	r3, r1, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	401a      	ands	r2, r3
 8001b08:	6a39      	ldr	r1, [r7, #32]
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b10:	431a      	orrs	r2, r3
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 8096 	beq.w	8001c50 <HAL_GPIO_Init+0x49c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b24:	4b53      	ldr	r3, [pc, #332]	@ (8001c74 <HAL_GPIO_Init+0x4c0>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	4a52      	ldr	r2, [pc, #328]	@ (8001c74 <HAL_GPIO_Init+0x4c0>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6193      	str	r3, [r2, #24]
 8001b30:	4b50      	ldr	r3, [pc, #320]	@ (8001c74 <HAL_GPIO_Init+0x4c0>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b3c:	4a4e      	ldr	r2, [pc, #312]	@ (8001c78 <HAL_GPIO_Init+0x4c4>)
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b40:	089b      	lsrs	r3, r3, #2
 8001b42:	3302      	adds	r3, #2
 8001b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	220f      	movs	r2, #15
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a46      	ldr	r2, [pc, #280]	@ (8001c7c <HAL_GPIO_Init+0x4c8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d013      	beq.n	8001b90 <HAL_GPIO_Init+0x3dc>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a45      	ldr	r2, [pc, #276]	@ (8001c80 <HAL_GPIO_Init+0x4cc>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d00d      	beq.n	8001b8c <HAL_GPIO_Init+0x3d8>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a44      	ldr	r2, [pc, #272]	@ (8001c84 <HAL_GPIO_Init+0x4d0>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d007      	beq.n	8001b88 <HAL_GPIO_Init+0x3d4>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a43      	ldr	r2, [pc, #268]	@ (8001c88 <HAL_GPIO_Init+0x4d4>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d101      	bne.n	8001b84 <HAL_GPIO_Init+0x3d0>
 8001b80:	2303      	movs	r3, #3
 8001b82:	e006      	b.n	8001b92 <HAL_GPIO_Init+0x3de>
 8001b84:	2304      	movs	r3, #4
 8001b86:	e004      	b.n	8001b92 <HAL_GPIO_Init+0x3de>
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e002      	b.n	8001b92 <HAL_GPIO_Init+0x3de>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <HAL_GPIO_Init+0x3de>
 8001b90:	2300      	movs	r3, #0
 8001b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b94:	f002 0203 	and.w	r2, r2, #3
 8001b98:	0092      	lsls	r2, r2, #2
 8001b9a:	4093      	lsls	r3, r2
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ba2:	4935      	ldr	r1, [pc, #212]	@ (8001c78 <HAL_GPIO_Init+0x4c4>)
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	3302      	adds	r3, #2
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d006      	beq.n	8001bca <HAL_GPIO_Init+0x416>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bbc:	4b33      	ldr	r3, [pc, #204]	@ (8001c8c <HAL_GPIO_Init+0x4d8>)
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	4932      	ldr	r1, [pc, #200]	@ (8001c8c <HAL_GPIO_Init+0x4d8>)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	608b      	str	r3, [r1, #8]
 8001bc8:	e006      	b.n	8001bd8 <HAL_GPIO_Init+0x424>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bca:	4b30      	ldr	r3, [pc, #192]	@ (8001c8c <HAL_GPIO_Init+0x4d8>)
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	492e      	ldr	r1, [pc, #184]	@ (8001c8c <HAL_GPIO_Init+0x4d8>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d006      	beq.n	8001bf2 <HAL_GPIO_Init+0x43e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001be4:	4b29      	ldr	r3, [pc, #164]	@ (8001c8c <HAL_GPIO_Init+0x4d8>)
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	4928      	ldr	r1, [pc, #160]	@ (8001c8c <HAL_GPIO_Init+0x4d8>)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	60cb      	str	r3, [r1, #12]
 8001bf0:	e006      	b.n	8001c00 <HAL_GPIO_Init+0x44c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bf2:	4b26      	ldr	r3, [pc, #152]	@ (8001c8c <HAL_GPIO_Init+0x4d8>)
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	4924      	ldr	r1, [pc, #144]	@ (8001c8c <HAL_GPIO_Init+0x4d8>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d006      	beq.n	8001c1a <HAL_GPIO_Init+0x466>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c8c <HAL_GPIO_Init+0x4d8>)
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	491e      	ldr	r1, [pc, #120]	@ (8001c8c <HAL_GPIO_Init+0x4d8>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
 8001c18:	e006      	b.n	8001c28 <HAL_GPIO_Init+0x474>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c8c <HAL_GPIO_Init+0x4d8>)
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	491a      	ldr	r1, [pc, #104]	@ (8001c8c <HAL_GPIO_Init+0x4d8>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d006      	beq.n	8001c42 <HAL_GPIO_Init+0x48e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c34:	4b15      	ldr	r3, [pc, #84]	@ (8001c8c <HAL_GPIO_Init+0x4d8>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4914      	ldr	r1, [pc, #80]	@ (8001c8c <HAL_GPIO_Init+0x4d8>)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	600b      	str	r3, [r1, #0]
 8001c40:	e006      	b.n	8001c50 <HAL_GPIO_Init+0x49c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c42:	4b12      	ldr	r3, [pc, #72]	@ (8001c8c <HAL_GPIO_Init+0x4d8>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	4910      	ldr	r1, [pc, #64]	@ (8001c8c <HAL_GPIO_Init+0x4d8>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c52:	3301      	adds	r3, #1
 8001c54:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f47f ae1d 	bne.w	80018a0 <HAL_GPIO_Init+0xec>
  }
}
 8001c66:	bf00      	nop
 8001c68:	bf00      	nop
 8001c6a:	3728      	adds	r7, #40	@ 0x28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	08008c8c 	.word	0x08008c8c
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40010000 	.word	0x40010000
 8001c7c:	40010800 	.word	0x40010800
 8001c80:	40010c00 	.word	0x40010c00
 8001c84:	40011000 	.word	0x40011000
 8001c88:	40011400 	.word	0x40011400
 8001c8c:	40010400 	.word	0x40010400

08001c90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001c9c:	887b      	ldrh	r3, [r7, #2]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d104      	bne.n	8001cac <HAL_GPIO_ReadPin+0x1c>
 8001ca2:	f44f 71da 	mov.w	r1, #436	@ 0x1b4
 8001ca6:	4809      	ldr	r0, [pc, #36]	@ (8001ccc <HAL_GPIO_ReadPin+0x3c>)
 8001ca8:	f7ff f840 	bl	8000d2c <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	887b      	ldrh	r3, [r7, #2]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
 8001cbc:	e001      	b.n	8001cc2 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	08008c8c 	.word	0x08008c8c

08001cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	807b      	strh	r3, [r7, #2]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001ce0:	887b      	ldrh	r3, [r7, #2]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d104      	bne.n	8001cf0 <HAL_GPIO_WritePin+0x20>
 8001ce6:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 8001cea:	480e      	ldr	r0, [pc, #56]	@ (8001d24 <HAL_GPIO_WritePin+0x54>)
 8001cec:	f7ff f81e 	bl	8000d2c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001cf0:	787b      	ldrb	r3, [r7, #1]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d007      	beq.n	8001d06 <HAL_GPIO_WritePin+0x36>
 8001cf6:	787b      	ldrb	r3, [r7, #1]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d004      	beq.n	8001d06 <HAL_GPIO_WritePin+0x36>
 8001cfc:	f240 11d5 	movw	r1, #469	@ 0x1d5
 8001d00:	4808      	ldr	r0, [pc, #32]	@ (8001d24 <HAL_GPIO_WritePin+0x54>)
 8001d02:	f7ff f813 	bl	8000d2c <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8001d06:	787b      	ldrb	r3, [r7, #1]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d0c:	887a      	ldrh	r2, [r7, #2]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d12:	e003      	b.n	8001d1c <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d14:	887b      	ldrh	r3, [r7, #2]
 8001d16:	041a      	lsls	r2, r3, #16
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	611a      	str	r2, [r3, #16]
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	08008c8c 	.word	0x08008c8c

08001d28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d32:	4b08      	ldr	r3, [pc, #32]	@ (8001d54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d34:	695a      	ldr	r2, [r3, #20]
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d006      	beq.n	8001d4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d3e:	4a05      	ldr	r2, [pc, #20]	@ (8001d54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f003 f966 	bl	8005018 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40010400 	.word	0x40010400

08001d58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e35a      	b.n	8002420 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d01c      	beq.n	8001dac <HAL_RCC_OscConfig+0x54>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d116      	bne.n	8001dac <HAL_RCC_OscConfig+0x54>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d110      	bne.n	8001dac <HAL_RCC_OscConfig+0x54>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10a      	bne.n	8001dac <HAL_RCC_OscConfig+0x54>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d104      	bne.n	8001dac <HAL_RCC_OscConfig+0x54>
 8001da2:	f240 1165 	movw	r1, #357	@ 0x165
 8001da6:	488f      	ldr	r0, [pc, #572]	@ (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001da8:	f7fe ffc0 	bl	8000d2c <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 809a 	beq.w	8001eee <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00e      	beq.n	8001de0 <HAL_RCC_OscConfig+0x88>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dca:	d009      	beq.n	8001de0 <HAL_RCC_OscConfig+0x88>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dd4:	d004      	beq.n	8001de0 <HAL_RCC_OscConfig+0x88>
 8001dd6:	f240 116b 	movw	r1, #363	@ 0x16b
 8001dda:	4882      	ldr	r0, [pc, #520]	@ (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001ddc:	f7fe ffa6 	bl	8000d2c <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001de0:	4b81      	ldr	r3, [pc, #516]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d00c      	beq.n	8001e06 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dec:	4b7e      	ldr	r3, [pc, #504]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 030c 	and.w	r3, r3, #12
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d112      	bne.n	8001e1e <HAL_RCC_OscConfig+0xc6>
 8001df8:	4b7b      	ldr	r3, [pc, #492]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e04:	d10b      	bne.n	8001e1e <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e06:	4b78      	ldr	r3, [pc, #480]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d06c      	beq.n	8001eec <HAL_RCC_OscConfig+0x194>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d168      	bne.n	8001eec <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e300      	b.n	8002420 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e26:	d106      	bne.n	8001e36 <HAL_RCC_OscConfig+0xde>
 8001e28:	4b6f      	ldr	r3, [pc, #444]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a6e      	ldr	r2, [pc, #440]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001e2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	e02e      	b.n	8001e94 <HAL_RCC_OscConfig+0x13c>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10c      	bne.n	8001e58 <HAL_RCC_OscConfig+0x100>
 8001e3e:	4b6a      	ldr	r3, [pc, #424]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a69      	ldr	r2, [pc, #420]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001e44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	4b67      	ldr	r3, [pc, #412]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a66      	ldr	r2, [pc, #408]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001e50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e01d      	b.n	8001e94 <HAL_RCC_OscConfig+0x13c>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e60:	d10c      	bne.n	8001e7c <HAL_RCC_OscConfig+0x124>
 8001e62:	4b61      	ldr	r3, [pc, #388]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a60      	ldr	r2, [pc, #384]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001e68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	4b5e      	ldr	r3, [pc, #376]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a5d      	ldr	r2, [pc, #372]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e00b      	b.n	8001e94 <HAL_RCC_OscConfig+0x13c>
 8001e7c:	4b5a      	ldr	r3, [pc, #360]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a59      	ldr	r2, [pc, #356]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001e82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b57      	ldr	r3, [pc, #348]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a56      	ldr	r2, [pc, #344]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001e8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d013      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7ff fa30 	bl	8001300 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea4:	f7ff fa2c 	bl	8001300 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	@ 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e2b4      	b.n	8002420 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	4b4c      	ldr	r3, [pc, #304]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x14c>
 8001ec2:	e014      	b.n	8001eee <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7ff fa1c 	bl	8001300 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7ff fa18 	bl	8001300 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	@ 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e2a0      	b.n	8002420 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ede:	4b42      	ldr	r3, [pc, #264]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x174>
 8001eea:	e000      	b.n	8001eee <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 8080 	beq.w	8001ffc <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d008      	beq.n	8001f16 <HAL_RCC_OscConfig+0x1be>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d004      	beq.n	8001f16 <HAL_RCC_OscConfig+0x1be>
 8001f0c:	f240 119f 	movw	r1, #415	@ 0x19f
 8001f10:	4834      	ldr	r0, [pc, #208]	@ (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001f12:	f7fe ff0b 	bl	8000d2c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	2b1f      	cmp	r3, #31
 8001f1c:	d904      	bls.n	8001f28 <HAL_RCC_OscConfig+0x1d0>
 8001f1e:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8001f22:	4830      	ldr	r0, [pc, #192]	@ (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001f24:	f7fe ff02 	bl	8000d2c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f28:	4b2f      	ldr	r3, [pc, #188]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 030c 	and.w	r3, r3, #12
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00b      	beq.n	8001f4c <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f34:	4b2c      	ldr	r3, [pc, #176]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 030c 	and.w	r3, r3, #12
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d11c      	bne.n	8001f7a <HAL_RCC_OscConfig+0x222>
 8001f40:	4b29      	ldr	r3, [pc, #164]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d116      	bne.n	8001f7a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4c:	4b26      	ldr	r3, [pc, #152]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_OscConfig+0x20c>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e25d      	b.n	8002420 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f64:	4b20      	ldr	r3, [pc, #128]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	491d      	ldr	r1, [pc, #116]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f78:	e040      	b.n	8001ffc <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d020      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f82:	4b1a      	ldr	r3, [pc, #104]	@ (8001fec <HAL_RCC_OscConfig+0x294>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7ff f9ba 	bl	8001300 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f90:	f7ff f9b6 	bl	8001300 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e23e      	b.n	8002420 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa2:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f0      	beq.n	8001f90 <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fae:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	490a      	ldr	r1, [pc, #40]	@ (8001fe8 <HAL_RCC_OscConfig+0x290>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]
 8001fc2:	e01b      	b.n	8001ffc <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc4:	4b09      	ldr	r3, [pc, #36]	@ (8001fec <HAL_RCC_OscConfig+0x294>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fca:	f7ff f999 	bl	8001300 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd0:	e00e      	b.n	8001ff0 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd2:	f7ff f995 	bl	8001300 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d907      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e21d      	b.n	8002420 <HAL_RCC_OscConfig+0x6c8>
 8001fe4:	08008cc8 	.word	0x08008cc8
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff0:	4b7d      	ldr	r3, [pc, #500]	@ (80021e8 <HAL_RCC_OscConfig+0x490>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1ea      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	d040      	beq.n	800208a <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d008      	beq.n	8002022 <HAL_RCC_OscConfig+0x2ca>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d004      	beq.n	8002022 <HAL_RCC_OscConfig+0x2ca>
 8002018:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800201c:	4873      	ldr	r0, [pc, #460]	@ (80021ec <HAL_RCC_OscConfig+0x494>)
 800201e:	f7fe fe85 	bl	8000d2c <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d019      	beq.n	800205e <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800202a:	4b71      	ldr	r3, [pc, #452]	@ (80021f0 <HAL_RCC_OscConfig+0x498>)
 800202c:	2201      	movs	r2, #1
 800202e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002030:	f7ff f966 	bl	8001300 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002038:	f7ff f962 	bl	8001300 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e1ea      	b.n	8002420 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204a:	4b67      	ldr	r3, [pc, #412]	@ (80021e8 <HAL_RCC_OscConfig+0x490>)
 800204c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002056:	2001      	movs	r0, #1
 8002058:	f000 fc04 	bl	8002864 <RCC_Delay>
 800205c:	e015      	b.n	800208a <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800205e:	4b64      	ldr	r3, [pc, #400]	@ (80021f0 <HAL_RCC_OscConfig+0x498>)
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002064:	f7ff f94c 	bl	8001300 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800206c:	f7ff f948 	bl	8001300 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e1d0      	b.n	8002420 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800207e:	4b5a      	ldr	r3, [pc, #360]	@ (80021e8 <HAL_RCC_OscConfig+0x490>)
 8002080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 80bf 	beq.w	8002216 <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002098:	2300      	movs	r3, #0
 800209a:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00c      	beq.n	80020be <HAL_RCC_OscConfig+0x366>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d008      	beq.n	80020be <HAL_RCC_OscConfig+0x366>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2b05      	cmp	r3, #5
 80020b2:	d004      	beq.n	80020be <HAL_RCC_OscConfig+0x366>
 80020b4:	f240 210f 	movw	r1, #527	@ 0x20f
 80020b8:	484c      	ldr	r0, [pc, #304]	@ (80021ec <HAL_RCC_OscConfig+0x494>)
 80020ba:	f7fe fe37 	bl	8000d2c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020be:	4b4a      	ldr	r3, [pc, #296]	@ (80021e8 <HAL_RCC_OscConfig+0x490>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10d      	bne.n	80020e6 <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ca:	4b47      	ldr	r3, [pc, #284]	@ (80021e8 <HAL_RCC_OscConfig+0x490>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	4a46      	ldr	r2, [pc, #280]	@ (80021e8 <HAL_RCC_OscConfig+0x490>)
 80020d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020d4:	61d3      	str	r3, [r2, #28]
 80020d6:	4b44      	ldr	r3, [pc, #272]	@ (80021e8 <HAL_RCC_OscConfig+0x490>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e2:	2301      	movs	r3, #1
 80020e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e6:	4b43      	ldr	r3, [pc, #268]	@ (80021f4 <HAL_RCC_OscConfig+0x49c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d118      	bne.n	8002124 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f2:	4b40      	ldr	r3, [pc, #256]	@ (80021f4 <HAL_RCC_OscConfig+0x49c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a3f      	ldr	r2, [pc, #252]	@ (80021f4 <HAL_RCC_OscConfig+0x49c>)
 80020f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020fe:	f7ff f8ff 	bl	8001300 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002106:	f7ff f8fb 	bl	8001300 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b64      	cmp	r3, #100	@ 0x64
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e183      	b.n	8002420 <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002118:	4b36      	ldr	r3, [pc, #216]	@ (80021f4 <HAL_RCC_OscConfig+0x49c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d106      	bne.n	800213a <HAL_RCC_OscConfig+0x3e2>
 800212c:	4b2e      	ldr	r3, [pc, #184]	@ (80021e8 <HAL_RCC_OscConfig+0x490>)
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	4a2d      	ldr	r2, [pc, #180]	@ (80021e8 <HAL_RCC_OscConfig+0x490>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6213      	str	r3, [r2, #32]
 8002138:	e02d      	b.n	8002196 <HAL_RCC_OscConfig+0x43e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0x404>
 8002142:	4b29      	ldr	r3, [pc, #164]	@ (80021e8 <HAL_RCC_OscConfig+0x490>)
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	4a28      	ldr	r2, [pc, #160]	@ (80021e8 <HAL_RCC_OscConfig+0x490>)
 8002148:	f023 0301 	bic.w	r3, r3, #1
 800214c:	6213      	str	r3, [r2, #32]
 800214e:	4b26      	ldr	r3, [pc, #152]	@ (80021e8 <HAL_RCC_OscConfig+0x490>)
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	4a25      	ldr	r2, [pc, #148]	@ (80021e8 <HAL_RCC_OscConfig+0x490>)
 8002154:	f023 0304 	bic.w	r3, r3, #4
 8002158:	6213      	str	r3, [r2, #32]
 800215a:	e01c      	b.n	8002196 <HAL_RCC_OscConfig+0x43e>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	2b05      	cmp	r3, #5
 8002162:	d10c      	bne.n	800217e <HAL_RCC_OscConfig+0x426>
 8002164:	4b20      	ldr	r3, [pc, #128]	@ (80021e8 <HAL_RCC_OscConfig+0x490>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4a1f      	ldr	r2, [pc, #124]	@ (80021e8 <HAL_RCC_OscConfig+0x490>)
 800216a:	f043 0304 	orr.w	r3, r3, #4
 800216e:	6213      	str	r3, [r2, #32]
 8002170:	4b1d      	ldr	r3, [pc, #116]	@ (80021e8 <HAL_RCC_OscConfig+0x490>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	4a1c      	ldr	r2, [pc, #112]	@ (80021e8 <HAL_RCC_OscConfig+0x490>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	6213      	str	r3, [r2, #32]
 800217c:	e00b      	b.n	8002196 <HAL_RCC_OscConfig+0x43e>
 800217e:	4b1a      	ldr	r3, [pc, #104]	@ (80021e8 <HAL_RCC_OscConfig+0x490>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4a19      	ldr	r2, [pc, #100]	@ (80021e8 <HAL_RCC_OscConfig+0x490>)
 8002184:	f023 0301 	bic.w	r3, r3, #1
 8002188:	6213      	str	r3, [r2, #32]
 800218a:	4b17      	ldr	r3, [pc, #92]	@ (80021e8 <HAL_RCC_OscConfig+0x490>)
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	4a16      	ldr	r2, [pc, #88]	@ (80021e8 <HAL_RCC_OscConfig+0x490>)
 8002190:	f023 0304 	bic.w	r3, r3, #4
 8002194:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d015      	beq.n	80021ca <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219e:	f7ff f8af 	bl	8001300 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a4:	e00a      	b.n	80021bc <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a6:	f7ff f8ab 	bl	8001300 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e131      	b.n	8002420 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021bc:	4b0a      	ldr	r3, [pc, #40]	@ (80021e8 <HAL_RCC_OscConfig+0x490>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0ee      	beq.n	80021a6 <HAL_RCC_OscConfig+0x44e>
 80021c8:	e01c      	b.n	8002204 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ca:	f7ff f899 	bl	8001300 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d0:	e012      	b.n	80021f8 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d2:	f7ff f895 	bl	8001300 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d909      	bls.n	80021f8 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e11b      	b.n	8002420 <HAL_RCC_OscConfig+0x6c8>
 80021e8:	40021000 	.word	0x40021000
 80021ec:	08008cc8 	.word	0x08008cc8
 80021f0:	42420480 	.word	0x42420480
 80021f4:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f8:	4b8b      	ldr	r3, [pc, #556]	@ (8002428 <HAL_RCC_OscConfig+0x6d0>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1e6      	bne.n	80021d2 <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002204:	7dfb      	ldrb	r3, [r7, #23]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d105      	bne.n	8002216 <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220a:	4b87      	ldr	r3, [pc, #540]	@ (8002428 <HAL_RCC_OscConfig+0x6d0>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	4a86      	ldr	r2, [pc, #536]	@ (8002428 <HAL_RCC_OscConfig+0x6d0>)
 8002210:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002214:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00c      	beq.n	8002238 <HAL_RCC_OscConfig+0x4e0>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d008      	beq.n	8002238 <HAL_RCC_OscConfig+0x4e0>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d004      	beq.n	8002238 <HAL_RCC_OscConfig+0x4e0>
 800222e:	f240 21ad 	movw	r1, #685	@ 0x2ad
 8002232:	487e      	ldr	r0, [pc, #504]	@ (800242c <HAL_RCC_OscConfig+0x6d4>)
 8002234:	f7fe fd7a 	bl	8000d2c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80ee 	beq.w	800241e <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002242:	4b79      	ldr	r3, [pc, #484]	@ (8002428 <HAL_RCC_OscConfig+0x6d0>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b08      	cmp	r3, #8
 800224c:	f000 80ce 	beq.w	80023ec <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	2b02      	cmp	r3, #2
 8002256:	f040 80b2 	bne.w	80023be <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d009      	beq.n	8002276 <HAL_RCC_OscConfig+0x51e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800226a:	d004      	beq.n	8002276 <HAL_RCC_OscConfig+0x51e>
 800226c:	f240 21b6 	movw	r1, #694	@ 0x2b6
 8002270:	486e      	ldr	r0, [pc, #440]	@ (800242c <HAL_RCC_OscConfig+0x6d4>)
 8002272:	f7fe fd5b 	bl	8000d2c <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227a:	2b00      	cmp	r3, #0
 800227c:	d04a      	beq.n	8002314 <HAL_RCC_OscConfig+0x5bc>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002282:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002286:	d045      	beq.n	8002314 <HAL_RCC_OscConfig+0x5bc>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002290:	d040      	beq.n	8002314 <HAL_RCC_OscConfig+0x5bc>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002296:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800229a:	d03b      	beq.n	8002314 <HAL_RCC_OscConfig+0x5bc>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80022a4:	d036      	beq.n	8002314 <HAL_RCC_OscConfig+0x5bc>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022aa:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80022ae:	d031      	beq.n	8002314 <HAL_RCC_OscConfig+0x5bc>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80022b8:	d02c      	beq.n	8002314 <HAL_RCC_OscConfig+0x5bc>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022be:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80022c2:	d027      	beq.n	8002314 <HAL_RCC_OscConfig+0x5bc>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80022cc:	d022      	beq.n	8002314 <HAL_RCC_OscConfig+0x5bc>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80022d6:	d01d      	beq.n	8002314 <HAL_RCC_OscConfig+0x5bc>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022dc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80022e0:	d018      	beq.n	8002314 <HAL_RCC_OscConfig+0x5bc>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80022ea:	d013      	beq.n	8002314 <HAL_RCC_OscConfig+0x5bc>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80022f4:	d00e      	beq.n	8002314 <HAL_RCC_OscConfig+0x5bc>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fa:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 80022fe:	d009      	beq.n	8002314 <HAL_RCC_OscConfig+0x5bc>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002304:	f5b3 1f60 	cmp.w	r3, #3670016	@ 0x380000
 8002308:	d004      	beq.n	8002314 <HAL_RCC_OscConfig+0x5bc>
 800230a:	f240 21b7 	movw	r1, #695	@ 0x2b7
 800230e:	4847      	ldr	r0, [pc, #284]	@ (800242c <HAL_RCC_OscConfig+0x6d4>)
 8002310:	f7fe fd0c 	bl	8000d2c <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002314:	4b46      	ldr	r3, [pc, #280]	@ (8002430 <HAL_RCC_OscConfig+0x6d8>)
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231a:	f7fe fff1 	bl	8001300 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002322:	f7fe ffed 	bl	8001300 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e075      	b.n	8002420 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002334:	4b3c      	ldr	r3, [pc, #240]	@ (8002428 <HAL_RCC_OscConfig+0x6d0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1f0      	bne.n	8002322 <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002348:	d116      	bne.n	8002378 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d009      	beq.n	8002366 <HAL_RCC_OscConfig+0x60e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800235a:	d004      	beq.n	8002366 <HAL_RCC_OscConfig+0x60e>
 800235c:	f240 21cd 	movw	r1, #717	@ 0x2cd
 8002360:	4832      	ldr	r0, [pc, #200]	@ (800242c <HAL_RCC_OscConfig+0x6d4>)
 8002362:	f7fe fce3 	bl	8000d2c <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002366:	4b30      	ldr	r3, [pc, #192]	@ (8002428 <HAL_RCC_OscConfig+0x6d0>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	492d      	ldr	r1, [pc, #180]	@ (8002428 <HAL_RCC_OscConfig+0x6d0>)
 8002374:	4313      	orrs	r3, r2
 8002376:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002378:	4b2b      	ldr	r3, [pc, #172]	@ (8002428 <HAL_RCC_OscConfig+0x6d0>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a19      	ldr	r1, [r3, #32]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002388:	430b      	orrs	r3, r1
 800238a:	4927      	ldr	r1, [pc, #156]	@ (8002428 <HAL_RCC_OscConfig+0x6d0>)
 800238c:	4313      	orrs	r3, r2
 800238e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002390:	4b27      	ldr	r3, [pc, #156]	@ (8002430 <HAL_RCC_OscConfig+0x6d8>)
 8002392:	2201      	movs	r2, #1
 8002394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002396:	f7fe ffb3 	bl	8001300 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239e:	f7fe ffaf 	bl	8001300 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e037      	b.n	8002420 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002428 <HAL_RCC_OscConfig+0x6d0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x646>
 80023bc:	e02f      	b.n	800241e <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023be:	4b1c      	ldr	r3, [pc, #112]	@ (8002430 <HAL_RCC_OscConfig+0x6d8>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c4:	f7fe ff9c 	bl	8001300 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023cc:	f7fe ff98 	bl	8001300 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e020      	b.n	8002420 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023de:	4b12      	ldr	r3, [pc, #72]	@ (8002428 <HAL_RCC_OscConfig+0x6d0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0x674>
 80023ea:	e018      	b.n	800241e <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e013      	b.n	8002420 <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002428 <HAL_RCC_OscConfig+0x6d0>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	429a      	cmp	r2, r3
 800240a:	d106      	bne.n	800241a <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002416:	429a      	cmp	r2, r3
 8002418:	d001      	beq.n	800241e <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40021000 	.word	0x40021000
 800242c:	08008cc8 	.word	0x08008cc8
 8002430:	42420060 	.word	0x42420060

08002434 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e176      	b.n	8002736 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b00      	cmp	r3, #0
 8002452:	d116      	bne.n	8002482 <HAL_RCC_ClockConfig+0x4e>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d110      	bne.n	8002482 <HAL_RCC_ClockConfig+0x4e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10a      	bne.n	8002482 <HAL_RCC_ClockConfig+0x4e>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b00      	cmp	r3, #0
 8002476:	d104      	bne.n	8002482 <HAL_RCC_ClockConfig+0x4e>
 8002478:	f240 3136 	movw	r1, #822	@ 0x336
 800247c:	4874      	ldr	r0, [pc, #464]	@ (8002650 <HAL_RCC_ClockConfig+0x21c>)
 800247e:	f7fe fc55 	bl	8000d2c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00a      	beq.n	800249e <HAL_RCC_ClockConfig+0x6a>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d007      	beq.n	800249e <HAL_RCC_ClockConfig+0x6a>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	2b02      	cmp	r3, #2
 8002492:	d004      	beq.n	800249e <HAL_RCC_ClockConfig+0x6a>
 8002494:	f240 3137 	movw	r1, #823	@ 0x337
 8002498:	486d      	ldr	r0, [pc, #436]	@ (8002650 <HAL_RCC_ClockConfig+0x21c>)
 800249a:	f7fe fc47 	bl	8000d2c <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800249e:	4b6d      	ldr	r3, [pc, #436]	@ (8002654 <HAL_RCC_ClockConfig+0x220>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d910      	bls.n	80024ce <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ac:	4b69      	ldr	r3, [pc, #420]	@ (8002654 <HAL_RCC_ClockConfig+0x220>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f023 0207 	bic.w	r2, r3, #7
 80024b4:	4967      	ldr	r1, [pc, #412]	@ (8002654 <HAL_RCC_ClockConfig+0x220>)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024bc:	4b65      	ldr	r3, [pc, #404]	@ (8002654 <HAL_RCC_ClockConfig+0x220>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d001      	beq.n	80024ce <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e133      	b.n	8002736 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d049      	beq.n	800256e <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d005      	beq.n	80024f2 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002658 <HAL_RCC_ClockConfig+0x224>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	4a5b      	ldr	r2, [pc, #364]	@ (8002658 <HAL_RCC_ClockConfig+0x224>)
 80024ec:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024f0:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024fe:	4b56      	ldr	r3, [pc, #344]	@ (8002658 <HAL_RCC_ClockConfig+0x224>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	4a55      	ldr	r2, [pc, #340]	@ (8002658 <HAL_RCC_ClockConfig+0x224>)
 8002504:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002508:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d024      	beq.n	800255c <HAL_RCC_ClockConfig+0x128>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2b80      	cmp	r3, #128	@ 0x80
 8002518:	d020      	beq.n	800255c <HAL_RCC_ClockConfig+0x128>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b90      	cmp	r3, #144	@ 0x90
 8002520:	d01c      	beq.n	800255c <HAL_RCC_ClockConfig+0x128>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2ba0      	cmp	r3, #160	@ 0xa0
 8002528:	d018      	beq.n	800255c <HAL_RCC_ClockConfig+0x128>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	2bb0      	cmp	r3, #176	@ 0xb0
 8002530:	d014      	beq.n	800255c <HAL_RCC_ClockConfig+0x128>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	2bc0      	cmp	r3, #192	@ 0xc0
 8002538:	d010      	beq.n	800255c <HAL_RCC_ClockConfig+0x128>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2bd0      	cmp	r3, #208	@ 0xd0
 8002540:	d00c      	beq.n	800255c <HAL_RCC_ClockConfig+0x128>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2be0      	cmp	r3, #224	@ 0xe0
 8002548:	d008      	beq.n	800255c <HAL_RCC_ClockConfig+0x128>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2bf0      	cmp	r3, #240	@ 0xf0
 8002550:	d004      	beq.n	800255c <HAL_RCC_ClockConfig+0x128>
 8002552:	f240 315d 	movw	r1, #861	@ 0x35d
 8002556:	483e      	ldr	r0, [pc, #248]	@ (8002650 <HAL_RCC_ClockConfig+0x21c>)
 8002558:	f7fe fbe8 	bl	8000d2c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800255c:	4b3e      	ldr	r3, [pc, #248]	@ (8002658 <HAL_RCC_ClockConfig+0x224>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	493b      	ldr	r1, [pc, #236]	@ (8002658 <HAL_RCC_ClockConfig+0x224>)
 800256a:	4313      	orrs	r3, r2
 800256c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d051      	beq.n	800261e <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00c      	beq.n	800259c <HAL_RCC_ClockConfig+0x168>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d008      	beq.n	800259c <HAL_RCC_ClockConfig+0x168>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d004      	beq.n	800259c <HAL_RCC_ClockConfig+0x168>
 8002592:	f44f 7159 	mov.w	r1, #868	@ 0x364
 8002596:	482e      	ldr	r0, [pc, #184]	@ (8002650 <HAL_RCC_ClockConfig+0x21c>)
 8002598:	f7fe fbc8 	bl	8000d2c <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d107      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a4:	4b2c      	ldr	r3, [pc, #176]	@ (8002658 <HAL_RCC_ClockConfig+0x224>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d115      	bne.n	80025dc <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0c0      	b.n	8002736 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d107      	bne.n	80025cc <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025bc:	4b26      	ldr	r3, [pc, #152]	@ (8002658 <HAL_RCC_ClockConfig+0x224>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d109      	bne.n	80025dc <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0b4      	b.n	8002736 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025cc:	4b22      	ldr	r3, [pc, #136]	@ (8002658 <HAL_RCC_ClockConfig+0x224>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0ac      	b.n	8002736 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002658 <HAL_RCC_ClockConfig+0x224>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f023 0203 	bic.w	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	491b      	ldr	r1, [pc, #108]	@ (8002658 <HAL_RCC_ClockConfig+0x224>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025ee:	f7fe fe87 	bl	8001300 <HAL_GetTick>
 80025f2:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f4:	e00a      	b.n	800260c <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f6:	f7fe fe83 	bl	8001300 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002604:	4293      	cmp	r3, r2
 8002606:	d901      	bls.n	800260c <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e094      	b.n	8002736 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260c:	4b12      	ldr	r3, [pc, #72]	@ (8002658 <HAL_RCC_ClockConfig+0x224>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 020c 	and.w	r2, r3, #12
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	429a      	cmp	r2, r3
 800261c:	d1eb      	bne.n	80025f6 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800261e:	4b0d      	ldr	r3, [pc, #52]	@ (8002654 <HAL_RCC_ClockConfig+0x220>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d217      	bcs.n	800265c <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262c:	4b09      	ldr	r3, [pc, #36]	@ (8002654 <HAL_RCC_ClockConfig+0x220>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f023 0207 	bic.w	r2, r3, #7
 8002634:	4907      	ldr	r1, [pc, #28]	@ (8002654 <HAL_RCC_ClockConfig+0x220>)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	4313      	orrs	r3, r2
 800263a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263c:	4b05      	ldr	r3, [pc, #20]	@ (8002654 <HAL_RCC_ClockConfig+0x220>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d008      	beq.n	800265c <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e073      	b.n	8002736 <HAL_RCC_ClockConfig+0x302>
 800264e:	bf00      	nop
 8002650:	08008cc8 	.word	0x08008cc8
 8002654:	40022000 	.word	0x40022000
 8002658:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d025      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d018      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x26e>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002678:	d013      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x26e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002682:	d00e      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x26e>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800268c:	d009      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x26e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002696:	d004      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x26e>
 8002698:	f240 31a2 	movw	r1, #930	@ 0x3a2
 800269c:	4828      	ldr	r0, [pc, #160]	@ (8002740 <HAL_RCC_ClockConfig+0x30c>)
 800269e:	f7fe fb45 	bl	8000d2c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a2:	4b28      	ldr	r3, [pc, #160]	@ (8002744 <HAL_RCC_ClockConfig+0x310>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	4925      	ldr	r1, [pc, #148]	@ (8002744 <HAL_RCC_ClockConfig+0x310>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d026      	beq.n	800270e <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d018      	beq.n	80026fa <HAL_RCC_ClockConfig+0x2c6>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026d0:	d013      	beq.n	80026fa <HAL_RCC_ClockConfig+0x2c6>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80026da:	d00e      	beq.n	80026fa <HAL_RCC_ClockConfig+0x2c6>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80026e4:	d009      	beq.n	80026fa <HAL_RCC_ClockConfig+0x2c6>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80026ee:	d004      	beq.n	80026fa <HAL_RCC_ClockConfig+0x2c6>
 80026f0:	f240 31a9 	movw	r1, #937	@ 0x3a9
 80026f4:	4812      	ldr	r0, [pc, #72]	@ (8002740 <HAL_RCC_ClockConfig+0x30c>)
 80026f6:	f7fe fb19 	bl	8000d2c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026fa:	4b12      	ldr	r3, [pc, #72]	@ (8002744 <HAL_RCC_ClockConfig+0x310>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	490e      	ldr	r1, [pc, #56]	@ (8002744 <HAL_RCC_ClockConfig+0x310>)
 800270a:	4313      	orrs	r3, r2
 800270c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800270e:	f000 f821 	bl	8002754 <HAL_RCC_GetSysClockFreq>
 8002712:	4602      	mov	r2, r0
 8002714:	4b0b      	ldr	r3, [pc, #44]	@ (8002744 <HAL_RCC_ClockConfig+0x310>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	091b      	lsrs	r3, r3, #4
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	490a      	ldr	r1, [pc, #40]	@ (8002748 <HAL_RCC_ClockConfig+0x314>)
 8002720:	5ccb      	ldrb	r3, [r1, r3]
 8002722:	fa22 f303 	lsr.w	r3, r2, r3
 8002726:	4a09      	ldr	r2, [pc, #36]	@ (800274c <HAL_RCC_ClockConfig+0x318>)
 8002728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800272a:	4b09      	ldr	r3, [pc, #36]	@ (8002750 <HAL_RCC_ClockConfig+0x31c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe fda4 	bl	800127c <HAL_InitTick>

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	08008cc8 	.word	0x08008cc8
 8002744:	40021000 	.word	0x40021000
 8002748:	08008eac 	.word	0x08008eac
 800274c:	20000000 	.word	0x20000000
 8002750:	20000004 	.word	0x20000004

08002754 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	2300      	movs	r3, #0
 8002768:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800276e:	4b1e      	ldr	r3, [pc, #120]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b04      	cmp	r3, #4
 800277c:	d002      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0x30>
 800277e:	2b08      	cmp	r3, #8
 8002780:	d003      	beq.n	800278a <HAL_RCC_GetSysClockFreq+0x36>
 8002782:	e027      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002784:	4b19      	ldr	r3, [pc, #100]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x98>)
 8002786:	613b      	str	r3, [r7, #16]
      break;
 8002788:	e027      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	0c9b      	lsrs	r3, r3, #18
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	4a17      	ldr	r2, [pc, #92]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002794:	5cd3      	ldrb	r3, [r2, r3]
 8002796:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d010      	beq.n	80027c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027a2:	4b11      	ldr	r3, [pc, #68]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	0c5b      	lsrs	r3, r3, #17
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	4a11      	ldr	r2, [pc, #68]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027ae:	5cd3      	ldrb	r3, [r2, r3]
 80027b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a0d      	ldr	r2, [pc, #52]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x98>)
 80027b6:	fb03 f202 	mul.w	r2, r3, r2
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	e004      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a0c      	ldr	r2, [pc, #48]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027c8:	fb02 f303 	mul.w	r3, r2, r3
 80027cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	613b      	str	r3, [r7, #16]
      break;
 80027d2:	e002      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027d4:	4b09      	ldr	r3, [pc, #36]	@ (80027fc <HAL_RCC_GetSysClockFreq+0xa8>)
 80027d6:	613b      	str	r3, [r7, #16]
      break;
 80027d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027da:	693b      	ldr	r3, [r7, #16]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	371c      	adds	r7, #28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40021000 	.word	0x40021000
 80027ec:	00f42400 	.word	0x00f42400
 80027f0:	08008ec4 	.word	0x08008ec4
 80027f4:	08008ed4 	.word	0x08008ed4
 80027f8:	003d0900 	.word	0x003d0900
 80027fc:	007a1200 	.word	0x007a1200

08002800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002804:	4b02      	ldr	r3, [pc, #8]	@ (8002810 <HAL_RCC_GetHCLKFreq+0x10>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	20000000 	.word	0x20000000

08002814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002818:	f7ff fff2 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 800281c:	4602      	mov	r2, r0
 800281e:	4b05      	ldr	r3, [pc, #20]	@ (8002834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	0a1b      	lsrs	r3, r3, #8
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	4903      	ldr	r1, [pc, #12]	@ (8002838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800282a:	5ccb      	ldrb	r3, [r1, r3]
 800282c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002830:	4618      	mov	r0, r3
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021000 	.word	0x40021000
 8002838:	08008ebc 	.word	0x08008ebc

0800283c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002840:	f7ff ffde 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 8002844:	4602      	mov	r2, r0
 8002846:	4b05      	ldr	r3, [pc, #20]	@ (800285c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	0adb      	lsrs	r3, r3, #11
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	4903      	ldr	r1, [pc, #12]	@ (8002860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002852:	5ccb      	ldrb	r3, [r1, r3]
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000
 8002860:	08008ebc 	.word	0x08008ebc

08002864 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800286c:	4b0a      	ldr	r3, [pc, #40]	@ (8002898 <RCC_Delay+0x34>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0a      	ldr	r2, [pc, #40]	@ (800289c <RCC_Delay+0x38>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	0a5b      	lsrs	r3, r3, #9
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	fb02 f303 	mul.w	r3, r2, r3
 800287e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002880:	bf00      	nop
  }
  while (Delay --);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	1e5a      	subs	r2, r3, #1
 8002886:	60fa      	str	r2, [r7, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f9      	bne.n	8002880 <RCC_Delay+0x1c>
}
 800288c:	bf00      	nop
 800288e:	bf00      	nop
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr
 8002898:	20000000 	.word	0x20000000
 800289c:	10624dd3 	.word	0x10624dd3

080028a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e16d      	b.n	8002b8e <HAL_SPI_Init+0x2ee>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a6b      	ldr	r2, [pc, #428]	@ (8002a64 <HAL_SPI_Init+0x1c4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d009      	beq.n	80028d0 <HAL_SPI_Init+0x30>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a69      	ldr	r2, [pc, #420]	@ (8002a68 <HAL_SPI_Init+0x1c8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d004      	beq.n	80028d0 <HAL_SPI_Init+0x30>
 80028c6:	f44f 71ac 	mov.w	r1, #344	@ 0x158
 80028ca:	4868      	ldr	r0, [pc, #416]	@ (8002a6c <HAL_SPI_Init+0x1cc>)
 80028cc:	f7fe fa2e 	bl	8000d2c <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d009      	beq.n	80028ec <HAL_SPI_Init+0x4c>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028e0:	d004      	beq.n	80028ec <HAL_SPI_Init+0x4c>
 80028e2:	f240 1159 	movw	r1, #345	@ 0x159
 80028e6:	4861      	ldr	r0, [pc, #388]	@ (8002a6c <HAL_SPI_Init+0x1cc>)
 80028e8:	f7fe fa20 	bl	8000d2c <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00e      	beq.n	8002912 <HAL_SPI_Init+0x72>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028fc:	d009      	beq.n	8002912 <HAL_SPI_Init+0x72>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002906:	d004      	beq.n	8002912 <HAL_SPI_Init+0x72>
 8002908:	f44f 71ad 	mov.w	r1, #346	@ 0x15a
 800290c:	4857      	ldr	r0, [pc, #348]	@ (8002a6c <HAL_SPI_Init+0x1cc>)
 800290e:	f7fe fa0d 	bl	8000d2c <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800291a:	d008      	beq.n	800292e <HAL_SPI_Init+0x8e>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d004      	beq.n	800292e <HAL_SPI_Init+0x8e>
 8002924:	f240 115b 	movw	r1, #347	@ 0x15b
 8002928:	4850      	ldr	r0, [pc, #320]	@ (8002a6c <HAL_SPI_Init+0x1cc>)
 800292a:	f7fe f9ff 	bl	8000d2c <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002936:	d00d      	beq.n	8002954 <HAL_SPI_Init+0xb4>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d009      	beq.n	8002954 <HAL_SPI_Init+0xb4>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002948:	d004      	beq.n	8002954 <HAL_SPI_Init+0xb4>
 800294a:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800294e:	4847      	ldr	r0, [pc, #284]	@ (8002a6c <HAL_SPI_Init+0x1cc>)
 8002950:	f7fe f9ec 	bl	8000d2c <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d020      	beq.n	800299e <HAL_SPI_Init+0xfe>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	2b08      	cmp	r3, #8
 8002962:	d01c      	beq.n	800299e <HAL_SPI_Init+0xfe>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	2b10      	cmp	r3, #16
 800296a:	d018      	beq.n	800299e <HAL_SPI_Init+0xfe>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	2b18      	cmp	r3, #24
 8002972:	d014      	beq.n	800299e <HAL_SPI_Init+0xfe>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	2b20      	cmp	r3, #32
 800297a:	d010      	beq.n	800299e <HAL_SPI_Init+0xfe>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	2b28      	cmp	r3, #40	@ 0x28
 8002982:	d00c      	beq.n	800299e <HAL_SPI_Init+0xfe>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	2b30      	cmp	r3, #48	@ 0x30
 800298a:	d008      	beq.n	800299e <HAL_SPI_Init+0xfe>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	2b38      	cmp	r3, #56	@ 0x38
 8002992:	d004      	beq.n	800299e <HAL_SPI_Init+0xfe>
 8002994:	f240 115d 	movw	r1, #349	@ 0x15d
 8002998:	4834      	ldr	r0, [pc, #208]	@ (8002a6c <HAL_SPI_Init+0x1cc>)
 800299a:	f7fe f9c7 	bl	8000d2c <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d008      	beq.n	80029b8 <HAL_SPI_Init+0x118>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	2b80      	cmp	r3, #128	@ 0x80
 80029ac:	d004      	beq.n	80029b8 <HAL_SPI_Init+0x118>
 80029ae:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 80029b2:	482e      	ldr	r0, [pc, #184]	@ (8002a6c <HAL_SPI_Init+0x1cc>)
 80029b4:	f7fe f9ba 	bl	8000d2c <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d004      	beq.n	80029ca <HAL_SPI_Init+0x12a>
 80029c0:	f240 1161 	movw	r1, #353	@ 0x161
 80029c4:	4829      	ldr	r0, [pc, #164]	@ (8002a6c <HAL_SPI_Init+0x1cc>)
 80029c6:	f7fe f9b1 	bl	8000d2c <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d14e      	bne.n	8002a70 <HAL_SPI_Init+0x1d0>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d008      	beq.n	80029ec <HAL_SPI_Init+0x14c>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d004      	beq.n	80029ec <HAL_SPI_Init+0x14c>
 80029e2:	f44f 71b2 	mov.w	r1, #356	@ 0x164
 80029e6:	4821      	ldr	r0, [pc, #132]	@ (8002a6c <HAL_SPI_Init+0x1cc>)
 80029e8:	f7fe f9a0 	bl	8000d2c <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <HAL_SPI_Init+0x166>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d004      	beq.n	8002a06 <HAL_SPI_Init+0x166>
 80029fc:	f240 1165 	movw	r1, #357	@ 0x165
 8002a00:	481a      	ldr	r0, [pc, #104]	@ (8002a6c <HAL_SPI_Init+0x1cc>)
 8002a02:	f7fe f993 	bl	8000d2c <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a0e:	d125      	bne.n	8002a5c <HAL_SPI_Init+0x1bc>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d056      	beq.n	8002ac6 <HAL_SPI_Init+0x226>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d052      	beq.n	8002ac6 <HAL_SPI_Init+0x226>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	2b10      	cmp	r3, #16
 8002a26:	d04e      	beq.n	8002ac6 <HAL_SPI_Init+0x226>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	2b18      	cmp	r3, #24
 8002a2e:	d04a      	beq.n	8002ac6 <HAL_SPI_Init+0x226>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	2b20      	cmp	r3, #32
 8002a36:	d046      	beq.n	8002ac6 <HAL_SPI_Init+0x226>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	2b28      	cmp	r3, #40	@ 0x28
 8002a3e:	d042      	beq.n	8002ac6 <HAL_SPI_Init+0x226>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	2b30      	cmp	r3, #48	@ 0x30
 8002a46:	d03e      	beq.n	8002ac6 <HAL_SPI_Init+0x226>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	2b38      	cmp	r3, #56	@ 0x38
 8002a4e:	d03a      	beq.n	8002ac6 <HAL_SPI_Init+0x226>
 8002a50:	f240 1169 	movw	r1, #361	@ 0x169
 8002a54:	4805      	ldr	r0, [pc, #20]	@ (8002a6c <HAL_SPI_Init+0x1cc>)
 8002a56:	f7fe f969 	bl	8000d2c <assert_failed>
 8002a5a:	e034      	b.n	8002ac6 <HAL_SPI_Init+0x226>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	61da      	str	r2, [r3, #28]
 8002a62:	e030      	b.n	8002ac6 <HAL_SPI_Init+0x226>
 8002a64:	40013000 	.word	0x40013000
 8002a68:	40003800 	.word	0x40003800
 8002a6c:	08008d00 	.word	0x08008d00
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d020      	beq.n	8002aba <HAL_SPI_Init+0x21a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d01c      	beq.n	8002aba <HAL_SPI_Init+0x21a>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	2b10      	cmp	r3, #16
 8002a86:	d018      	beq.n	8002aba <HAL_SPI_Init+0x21a>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	2b18      	cmp	r3, #24
 8002a8e:	d014      	beq.n	8002aba <HAL_SPI_Init+0x21a>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	2b20      	cmp	r3, #32
 8002a96:	d010      	beq.n	8002aba <HAL_SPI_Init+0x21a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	2b28      	cmp	r3, #40	@ 0x28
 8002a9e:	d00c      	beq.n	8002aba <HAL_SPI_Init+0x21a>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	2b30      	cmp	r3, #48	@ 0x30
 8002aa6:	d008      	beq.n	8002aba <HAL_SPI_Init+0x21a>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	2b38      	cmp	r3, #56	@ 0x38
 8002aae:	d004      	beq.n	8002aba <HAL_SPI_Init+0x21a>
 8002ab0:	f240 1173 	movw	r1, #371	@ 0x173
 8002ab4:	4838      	ldr	r0, [pc, #224]	@ (8002b98 <HAL_SPI_Init+0x2f8>)
 8002ab6:	f7fe f939 	bl	8000d2c <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d106      	bne.n	8002ae6 <HAL_SPI_Init+0x246>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7fe f987 	bl	8000df4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2202      	movs	r2, #2
 8002aea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002afc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b4a:	ea42 0103 	orr.w	r1, r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b52:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	0c1a      	lsrs	r2, r3, #16
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f002 0204 	and.w	r2, r2, #4
 8002b6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	69da      	ldr	r2, [r3, #28]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	08008d00 	.word	0x08008d00

08002b9c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d009      	beq.n	8002bc8 <HAL_SPI_Transmit+0x2c>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bbc:	d004      	beq.n	8002bc8 <HAL_SPI_Transmit+0x2c>
 8002bbe:	f240 3121 	movw	r1, #801	@ 0x321
 8002bc2:	4886      	ldr	r0, [pc, #536]	@ (8002ddc <HAL_SPI_Transmit+0x240>)
 8002bc4:	f7fe f8b2 	bl	8000d2c <assert_failed>

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bc8:	f7fe fb9a 	bl	8001300 <HAL_GetTick>
 8002bcc:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d001      	beq.n	8002be2 <HAL_SPI_Transmit+0x46>
  {
    return HAL_BUSY;
 8002bde:	2302      	movs	r3, #2
 8002be0:	e12c      	b.n	8002e3c <HAL_SPI_Transmit+0x2a0>
  }

  if ((pData == NULL) || (Size == 0U))
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d002      	beq.n	8002bee <HAL_SPI_Transmit+0x52>
 8002be8:	88fb      	ldrh	r3, [r7, #6]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_SPI_Transmit+0x56>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e124      	b.n	8002e3c <HAL_SPI_Transmit+0x2a0>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_SPI_Transmit+0x64>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e11d      	b.n	8002e3c <HAL_SPI_Transmit+0x2a0>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	88fa      	ldrh	r2, [r7, #6]
 8002c20:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	88fa      	ldrh	r2, [r7, #6]
 8002c26:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c4e:	d10f      	bne.n	8002c70 <HAL_SPI_Transmit+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c6e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c7a:	2b40      	cmp	r3, #64	@ 0x40
 8002c7c:	d007      	beq.n	8002c8e <HAL_SPI_Transmit+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c96:	d152      	bne.n	8002d3e <HAL_SPI_Transmit+0x1a2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <HAL_SPI_Transmit+0x10a>
 8002ca0:	8b7b      	ldrh	r3, [r7, #26]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d145      	bne.n	8002d32 <HAL_SPI_Transmit+0x196>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	881a      	ldrh	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb6:	1c9a      	adds	r2, r3, #2
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cca:	e032      	b.n	8002d32 <HAL_SPI_Transmit+0x196>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d112      	bne.n	8002d00 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cde:	881a      	ldrh	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cea:	1c9a      	adds	r2, r3, #2
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002cfe:	e018      	b.n	8002d32 <HAL_SPI_Transmit+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d00:	f7fe fafe 	bl	8001300 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d803      	bhi.n	8002d18 <HAL_SPI_Transmit+0x17c>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d16:	d102      	bne.n	8002d1e <HAL_SPI_Transmit+0x182>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d109      	bne.n	8002d32 <HAL_SPI_Transmit+0x196>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e084      	b.n	8002e3c <HAL_SPI_Transmit+0x2a0>
    while (hspi->TxXferCount > 0U)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1c7      	bne.n	8002ccc <HAL_SPI_Transmit+0x130>
 8002d3c:	e055      	b.n	8002dea <HAL_SPI_Transmit+0x24e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_SPI_Transmit+0x1b0>
 8002d46:	8b7b      	ldrh	r3, [r7, #26]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d149      	bne.n	8002de0 <HAL_SPI_Transmit+0x244>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	330c      	adds	r3, #12
 8002d56:	7812      	ldrb	r2, [r2, #0]
 8002d58:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d72:	e035      	b.n	8002de0 <HAL_SPI_Transmit+0x244>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d113      	bne.n	8002daa <HAL_SPI_Transmit+0x20e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	330c      	adds	r3, #12
 8002d8c:	7812      	ldrb	r2, [r2, #0]
 8002d8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002da8:	e01a      	b.n	8002de0 <HAL_SPI_Transmit+0x244>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002daa:	f7fe faa9 	bl	8001300 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d803      	bhi.n	8002dc2 <HAL_SPI_Transmit+0x226>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc0:	d102      	bne.n	8002dc8 <HAL_SPI_Transmit+0x22c>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10b      	bne.n	8002de0 <HAL_SPI_Transmit+0x244>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e02f      	b.n	8002e3c <HAL_SPI_Transmit+0x2a0>
 8002ddc:	08008d00 	.word	0x08008d00
    while (hspi->TxXferCount > 0U)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1c4      	bne.n	8002d74 <HAL_SPI_Transmit+0x1d8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dea:	69fa      	ldr	r2, [r7, #28]
 8002dec:	6839      	ldr	r1, [r7, #0]
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f8be 	bl	8002f70 <SPI_EndRxTxTransaction>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10a      	bne.n	8002e1e <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_SPI_Transmit+0x29e>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <HAL_SPI_Transmit+0x2a0>
  }
  else
  {
    return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
  }
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3720      	adds	r7, #32
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e52:	b2db      	uxtb	r3, r3
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr
	...

08002e60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	603b      	str	r3, [r7, #0]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e70:	f7fe fa46 	bl	8001300 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e78:	1a9b      	subs	r3, r3, r2
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e80:	f7fe fa3e 	bl	8001300 <HAL_GetTick>
 8002e84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e86:	4b39      	ldr	r3, [pc, #228]	@ (8002f6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	015b      	lsls	r3, r3, #5
 8002e8c:	0d1b      	lsrs	r3, r3, #20
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	fb02 f303 	mul.w	r3, r2, r3
 8002e94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e96:	e054      	b.n	8002f42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9e:	d050      	beq.n	8002f42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ea0:	f7fe fa2e 	bl	8001300 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	69fa      	ldr	r2, [r7, #28]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d902      	bls.n	8002eb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d13d      	bne.n	8002f32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ec4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ece:	d111      	bne.n	8002ef4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ed8:	d004      	beq.n	8002ee4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ee2:	d107      	bne.n	8002ef4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ef2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002efc:	d10f      	bne.n	8002f1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e017      	b.n	8002f62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	bf0c      	ite	eq
 8002f52:	2301      	moveq	r3, #1
 8002f54:	2300      	movne	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d19b      	bne.n	8002e98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3720      	adds	r7, #32
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20000000 	.word	0x20000000

08002f70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af02      	add	r7, sp, #8
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2201      	movs	r2, #1
 8002f84:	2102      	movs	r1, #2
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f7ff ff6a 	bl	8002e60 <SPI_WaitFlagStateUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d007      	beq.n	8002fa2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f96:	f043 0220 	orr.w	r2, r3, #32
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e013      	b.n	8002fca <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2180      	movs	r1, #128	@ 0x80
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f7ff ff57 	bl	8002e60 <SPI_WaitFlagStateUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d007      	beq.n	8002fc8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fbc:	f043 0220 	orr.w	r2, r3, #32
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e000      	b.n	8002fca <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e095      	b.n	8003112 <HAL_UART_Init+0x13e>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d02c      	beq.n	8003048 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a4a      	ldr	r2, [pc, #296]	@ (800311c <HAL_UART_Init+0x148>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d00e      	beq.n	8003016 <HAL_UART_Init+0x42>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a48      	ldr	r2, [pc, #288]	@ (8003120 <HAL_UART_Init+0x14c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d009      	beq.n	8003016 <HAL_UART_Init+0x42>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a47      	ldr	r2, [pc, #284]	@ (8003124 <HAL_UART_Init+0x150>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d004      	beq.n	8003016 <HAL_UART_Init+0x42>
 800300c:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 8003010:	4845      	ldr	r0, [pc, #276]	@ (8003128 <HAL_UART_Init+0x154>)
 8003012:	f7fd fe8b 	bl	8000d2c <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d028      	beq.n	8003070 <HAL_UART_Init+0x9c>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003026:	d023      	beq.n	8003070 <HAL_UART_Init+0x9c>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003030:	d01e      	beq.n	8003070 <HAL_UART_Init+0x9c>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800303a:	d019      	beq.n	8003070 <HAL_UART_Init+0x9c>
 800303c:	f240 116f 	movw	r1, #367	@ 0x16f
 8003040:	4839      	ldr	r0, [pc, #228]	@ (8003128 <HAL_UART_Init+0x154>)
 8003042:	f7fd fe73 	bl	8000d2c <assert_failed>
 8003046:	e013      	b.n	8003070 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a33      	ldr	r2, [pc, #204]	@ (800311c <HAL_UART_Init+0x148>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00e      	beq.n	8003070 <HAL_UART_Init+0x9c>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a32      	ldr	r2, [pc, #200]	@ (8003120 <HAL_UART_Init+0x14c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d009      	beq.n	8003070 <HAL_UART_Init+0x9c>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a30      	ldr	r2, [pc, #192]	@ (8003124 <HAL_UART_Init+0x150>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d004      	beq.n	8003070 <HAL_UART_Init+0x9c>
 8003066:	f240 1173 	movw	r1, #371	@ 0x173
 800306a:	482f      	ldr	r0, [pc, #188]	@ (8003128 <HAL_UART_Init+0x154>)
 800306c:	f7fd fe5e 	bl	8000d2c <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d009      	beq.n	800308c <HAL_UART_Init+0xb8>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003080:	d004      	beq.n	800308c <HAL_UART_Init+0xb8>
 8003082:	f240 1175 	movw	r1, #373	@ 0x175
 8003086:	4828      	ldr	r0, [pc, #160]	@ (8003128 <HAL_UART_Init+0x154>)
 8003088:	f7fd fe50 	bl	8000d2c <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d106      	bne.n	80030a6 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7fe f85b 	bl	800115c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2224      	movs	r2, #36	@ 0x24
 80030aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030bc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fd8a 	bl	8003bd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691a      	ldr	r2, [r3, #16]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030e2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030f2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40013800 	.word	0x40013800
 8003120:	40004400 	.word	0x40004400
 8003124:	40004800 	.word	0x40004800
 8003128:	08008d38 	.word	0x08008d38

0800312c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08a      	sub	sp, #40	@ 0x28
 8003130:	af02      	add	r7, sp, #8
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	4613      	mov	r3, r2
 800313a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b20      	cmp	r3, #32
 800314a:	d175      	bne.n	8003238 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_UART_Transmit+0x2c>
 8003152:	88fb      	ldrh	r3, [r7, #6]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e06e      	b.n	800323a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2221      	movs	r2, #33	@ 0x21
 8003166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800316a:	f7fe f8c9 	bl	8001300 <HAL_GetTick>
 800316e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	88fa      	ldrh	r2, [r7, #6]
 8003174:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	88fa      	ldrh	r2, [r7, #6]
 800317a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003184:	d108      	bne.n	8003198 <HAL_UART_Transmit+0x6c>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d104      	bne.n	8003198 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800318e:	2300      	movs	r3, #0
 8003190:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	61bb      	str	r3, [r7, #24]
 8003196:	e003      	b.n	80031a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800319c:	2300      	movs	r3, #0
 800319e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031a0:	e02e      	b.n	8003200 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2200      	movs	r2, #0
 80031aa:	2180      	movs	r1, #128	@ 0x80
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 fb1e 	bl	80037ee <UART_WaitOnFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e03a      	b.n	800323a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10b      	bne.n	80031e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	461a      	mov	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	3302      	adds	r3, #2
 80031de:	61bb      	str	r3, [r7, #24]
 80031e0:	e007      	b.n	80031f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	781a      	ldrb	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	3301      	adds	r3, #1
 80031f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003204:	b29b      	uxth	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1cb      	bne.n	80031a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2200      	movs	r2, #0
 8003212:	2140      	movs	r1, #64	@ 0x40
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 faea 	bl	80037ee <UART_WaitOnFlagUntilTimeout>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e006      	b.n	800323a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	e000      	b.n	800323a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003238:	2302      	movs	r3, #2
  }
}
 800323a:	4618      	mov	r0, r3
 800323c:	3720      	adds	r7, #32
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b0ba      	sub	sp, #232	@ 0xe8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800326a:	2300      	movs	r3, #0
 800326c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003270:	2300      	movs	r3, #0
 8003272:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003282:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10f      	bne.n	80032aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800328a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d009      	beq.n	80032aa <HAL_UART_IRQHandler+0x66>
 8003296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800329a:	f003 0320 	and.w	r3, r3, #32
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fbd9 	bl	8003a5a <UART_Receive_IT>
      return;
 80032a8:	e25b      	b.n	8003762 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80032aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 80de 	beq.w	8003470 <HAL_UART_IRQHandler+0x22c>
 80032b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d106      	bne.n	80032ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032c4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 80d1 	beq.w	8003470 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00b      	beq.n	80032f2 <HAL_UART_IRQHandler+0xae>
 80032da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ea:	f043 0201 	orr.w	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00b      	beq.n	8003316 <HAL_UART_IRQHandler+0xd2>
 80032fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d005      	beq.n	8003316 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330e:	f043 0202 	orr.w	r2, r3, #2
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00b      	beq.n	800333a <HAL_UART_IRQHandler+0xf6>
 8003322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d005      	beq.n	800333a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003332:	f043 0204 	orr.w	r2, r3, #4
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800333a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d011      	beq.n	800336a <HAL_UART_IRQHandler+0x126>
 8003346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	2b00      	cmp	r3, #0
 8003350:	d105      	bne.n	800335e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d005      	beq.n	800336a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003362:	f043 0208 	orr.w	r2, r3, #8
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 81f2 	beq.w	8003758 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003378:	f003 0320 	and.w	r3, r3, #32
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <HAL_UART_IRQHandler+0x14e>
 8003380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003384:	f003 0320 	and.w	r3, r3, #32
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fb64 	bl	8003a5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800339c:	2b00      	cmp	r3, #0
 800339e:	bf14      	ite	ne
 80033a0:	2301      	movne	r3, #1
 80033a2:	2300      	moveq	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d103      	bne.n	80033be <HAL_UART_IRQHandler+0x17a>
 80033b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d04f      	beq.n	800345e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fa6e 	bl	80038a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d041      	beq.n	8003456 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3314      	adds	r3, #20
 80033d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033e0:	e853 3f00 	ldrex	r3, [r3]
 80033e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80033e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3314      	adds	r3, #20
 80033fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80033fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003402:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003406:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800340a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800340e:	e841 2300 	strex	r3, r2, [r1]
 8003412:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003416:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1d9      	bne.n	80033d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003422:	2b00      	cmp	r3, #0
 8003424:	d013      	beq.n	800344e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342a:	4a7e      	ldr	r2, [pc, #504]	@ (8003624 <HAL_UART_IRQHandler+0x3e0>)
 800342c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe f946 	bl	80016c4 <HAL_DMA_Abort_IT>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d016      	beq.n	800346c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003448:	4610      	mov	r0, r2
 800344a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800344c:	e00e      	b.n	800346c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f99c 	bl	800378c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003454:	e00a      	b.n	800346c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f998 	bl	800378c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800345c:	e006      	b.n	800346c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f994 	bl	800378c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800346a:	e175      	b.n	8003758 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800346c:	bf00      	nop
    return;
 800346e:	e173      	b.n	8003758 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003474:	2b01      	cmp	r3, #1
 8003476:	f040 814f 	bne.w	8003718 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800347a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800347e:	f003 0310 	and.w	r3, r3, #16
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 8148 	beq.w	8003718 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 8141 	beq.w	8003718 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003496:	2300      	movs	r3, #0
 8003498:	60bb      	str	r3, [r7, #8]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 80b6 	beq.w	8003628 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 8145 	beq.w	800375c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034da:	429a      	cmp	r2, r3
 80034dc:	f080 813e 	bcs.w	800375c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2b20      	cmp	r3, #32
 80034f0:	f000 8088 	beq.w	8003604 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	330c      	adds	r3, #12
 80034fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003502:	e853 3f00 	ldrex	r3, [r3]
 8003506:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800350a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800350e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003512:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	330c      	adds	r3, #12
 800351c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003520:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003524:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003528:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800352c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003530:	e841 2300 	strex	r3, r2, [r1]
 8003534:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003538:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1d9      	bne.n	80034f4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3314      	adds	r3, #20
 8003546:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800354a:	e853 3f00 	ldrex	r3, [r3]
 800354e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003550:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003552:	f023 0301 	bic.w	r3, r3, #1
 8003556:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3314      	adds	r3, #20
 8003560:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003564:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003568:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800356c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003570:	e841 2300 	strex	r3, r2, [r1]
 8003574:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003576:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1e1      	bne.n	8003540 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3314      	adds	r3, #20
 8003582:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003584:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003586:	e853 3f00 	ldrex	r3, [r3]
 800358a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800358c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800358e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003592:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3314      	adds	r3, #20
 800359c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80035a0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80035a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80035a6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80035a8:	e841 2300 	strex	r3, r2, [r1]
 80035ac:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80035ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e3      	bne.n	800357c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	330c      	adds	r3, #12
 80035c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035cc:	e853 3f00 	ldrex	r3, [r3]
 80035d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80035d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035d4:	f023 0310 	bic.w	r3, r3, #16
 80035d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	330c      	adds	r3, #12
 80035e2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80035e6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80035e8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80035ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035ee:	e841 2300 	strex	r3, r2, [r1]
 80035f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80035f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1e3      	bne.n	80035c2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fe f824 	bl	800164c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003612:	b29b      	uxth	r3, r3
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	b29b      	uxth	r3, r3
 8003618:	4619      	mov	r1, r3
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f8bf 	bl	800379e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003620:	e09c      	b.n	800375c <HAL_UART_IRQHandler+0x518>
 8003622:	bf00      	nop
 8003624:	08003965 	.word	0x08003965
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003630:	b29b      	uxth	r3, r3
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 808e 	beq.w	8003760 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003644:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 8089 	beq.w	8003760 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	330c      	adds	r3, #12
 8003654:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003658:	e853 3f00 	ldrex	r3, [r3]
 800365c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800365e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003660:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003664:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	330c      	adds	r3, #12
 800366e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003672:	647a      	str	r2, [r7, #68]	@ 0x44
 8003674:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003676:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003678:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800367a:	e841 2300 	strex	r3, r2, [r1]
 800367e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1e3      	bne.n	800364e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	3314      	adds	r3, #20
 800368c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003690:	e853 3f00 	ldrex	r3, [r3]
 8003694:	623b      	str	r3, [r7, #32]
   return(result);
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	f023 0301 	bic.w	r3, r3, #1
 800369c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3314      	adds	r3, #20
 80036a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80036aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80036ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036b2:	e841 2300 	strex	r3, r2, [r1]
 80036b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1e3      	bne.n	8003686 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	330c      	adds	r3, #12
 80036d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	e853 3f00 	ldrex	r3, [r3]
 80036da:	60fb      	str	r3, [r7, #12]
   return(result);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0310 	bic.w	r3, r3, #16
 80036e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	330c      	adds	r3, #12
 80036ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80036f0:	61fa      	str	r2, [r7, #28]
 80036f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f4:	69b9      	ldr	r1, [r7, #24]
 80036f6:	69fa      	ldr	r2, [r7, #28]
 80036f8:	e841 2300 	strex	r3, r2, [r1]
 80036fc:	617b      	str	r3, [r7, #20]
   return(result);
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1e3      	bne.n	80036cc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800370a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800370e:	4619      	mov	r1, r3
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f844 	bl	800379e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003716:	e023      	b.n	8003760 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800371c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003720:	2b00      	cmp	r3, #0
 8003722:	d009      	beq.n	8003738 <HAL_UART_IRQHandler+0x4f4>
 8003724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f92b 	bl	800398c <UART_Transmit_IT>
    return;
 8003736:	e014      	b.n	8003762 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800373c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00e      	beq.n	8003762 <HAL_UART_IRQHandler+0x51e>
 8003744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f96a 	bl	8003a2a <UART_EndTransmit_IT>
    return;
 8003756:	e004      	b.n	8003762 <HAL_UART_IRQHandler+0x51e>
    return;
 8003758:	bf00      	nop
 800375a:	e002      	b.n	8003762 <HAL_UART_IRQHandler+0x51e>
      return;
 800375c:	bf00      	nop
 800375e:	e000      	b.n	8003762 <HAL_UART_IRQHandler+0x51e>
      return;
 8003760:	bf00      	nop
  }
}
 8003762:	37e8      	adds	r7, #232	@ 0xe8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr

0800377a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr

0800378c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	bc80      	pop	{r7}
 800379c:	4770      	bx	lr

0800379e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
 80037a6:	460b      	mov	r3, r1
 80037a8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr

080037b4 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 80037bc:	2300      	movs	r3, #0
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	2300      	movs	r3, #0
 80037c2:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	4313      	orrs	r3, r2
 80037e2:	b2db      	uxtb	r3, r3
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr

080037ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b086      	sub	sp, #24
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	603b      	str	r3, [r7, #0]
 80037fa:	4613      	mov	r3, r2
 80037fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037fe:	e03b      	b.n	8003878 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003806:	d037      	beq.n	8003878 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003808:	f7fd fd7a 	bl	8001300 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	6a3a      	ldr	r2, [r7, #32]
 8003814:	429a      	cmp	r2, r3
 8003816:	d302      	bcc.n	800381e <UART_WaitOnFlagUntilTimeout+0x30>
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e03a      	b.n	8003898 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d023      	beq.n	8003878 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2b80      	cmp	r3, #128	@ 0x80
 8003834:	d020      	beq.n	8003878 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b40      	cmp	r3, #64	@ 0x40
 800383a:	d01d      	beq.n	8003878 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b08      	cmp	r3, #8
 8003848:	d116      	bne.n	8003878 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 f81d 	bl	80038a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2208      	movs	r2, #8
 800386a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e00f      	b.n	8003898 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	4013      	ands	r3, r2
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	429a      	cmp	r2, r3
 8003886:	bf0c      	ite	eq
 8003888:	2301      	moveq	r3, #1
 800388a:	2300      	movne	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	429a      	cmp	r2, r3
 8003894:	d0b4      	beq.n	8003800 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b095      	sub	sp, #84	@ 0x54
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	330c      	adds	r3, #12
 80038ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b2:	e853 3f00 	ldrex	r3, [r3]
 80038b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	330c      	adds	r3, #12
 80038c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80038ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038d0:	e841 2300 	strex	r3, r2, [r1]
 80038d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1e5      	bne.n	80038a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3314      	adds	r3, #20
 80038e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	e853 3f00 	ldrex	r3, [r3]
 80038ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f023 0301 	bic.w	r3, r3, #1
 80038f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3314      	adds	r3, #20
 80038fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003900:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003902:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003904:	e841 2300 	strex	r3, r2, [r1]
 8003908:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1e5      	bne.n	80038dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003914:	2b01      	cmp	r3, #1
 8003916:	d119      	bne.n	800394c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	330c      	adds	r3, #12
 800391e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	e853 3f00 	ldrex	r3, [r3]
 8003926:	60bb      	str	r3, [r7, #8]
   return(result);
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f023 0310 	bic.w	r3, r3, #16
 800392e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	330c      	adds	r3, #12
 8003936:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003938:	61ba      	str	r2, [r7, #24]
 800393a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393c:	6979      	ldr	r1, [r7, #20]
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	e841 2300 	strex	r3, r2, [r1]
 8003944:	613b      	str	r3, [r7, #16]
   return(result);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e5      	bne.n	8003918 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800395a:	bf00      	nop
 800395c:	3754      	adds	r7, #84	@ 0x54
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr

08003964 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003970:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f7ff ff04 	bl	800378c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003984:	bf00      	nop
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b21      	cmp	r3, #33	@ 0x21
 800399e:	d13e      	bne.n	8003a1e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039a8:	d114      	bne.n	80039d4 <UART_Transmit_IT+0x48>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d110      	bne.n	80039d4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	1c9a      	adds	r2, r3, #2
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	621a      	str	r2, [r3, #32]
 80039d2:	e008      	b.n	80039e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	1c59      	adds	r1, r3, #1
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6211      	str	r1, [r2, #32]
 80039de:	781a      	ldrb	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	4619      	mov	r1, r3
 80039f4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10f      	bne.n	8003a1a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a08:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a18:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	e000      	b.n	8003a20 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a1e:	2302      	movs	r3, #2
  }
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr

08003a2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b082      	sub	sp, #8
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff fe8c 	bl	8003768 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b08c      	sub	sp, #48	@ 0x30
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b22      	cmp	r3, #34	@ 0x22
 8003a6c:	f040 80ae 	bne.w	8003bcc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a78:	d117      	bne.n	8003aaa <UART_Receive_IT+0x50>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d113      	bne.n	8003aaa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa2:	1c9a      	adds	r2, r3, #2
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003aa8:	e026      	b.n	8003af8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003abc:	d007      	beq.n	8003ace <UART_Receive_IT+0x74>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10a      	bne.n	8003adc <UART_Receive_IT+0x82>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ad8:	701a      	strb	r2, [r3, #0]
 8003ada:	e008      	b.n	8003aee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	4619      	mov	r1, r3
 8003b06:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d15d      	bne.n	8003bc8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0220 	bic.w	r2, r2, #32
 8003b1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695a      	ldr	r2, [r3, #20]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0201 	bic.w	r2, r2, #1
 8003b3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d135      	bne.n	8003bbe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	330c      	adds	r3, #12
 8003b5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	e853 3f00 	ldrex	r3, [r3]
 8003b66:	613b      	str	r3, [r7, #16]
   return(result);
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f023 0310 	bic.w	r3, r3, #16
 8003b6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	330c      	adds	r3, #12
 8003b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b78:	623a      	str	r2, [r7, #32]
 8003b7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7c:	69f9      	ldr	r1, [r7, #28]
 8003b7e:	6a3a      	ldr	r2, [r7, #32]
 8003b80:	e841 2300 	strex	r3, r2, [r1]
 8003b84:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1e5      	bne.n	8003b58 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	2b10      	cmp	r3, #16
 8003b98:	d10a      	bne.n	8003bb0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7ff fdf1 	bl	800379e <HAL_UARTEx_RxEventCallback>
 8003bbc:	e002      	b.n	8003bc4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff fddb 	bl	800377a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	e002      	b.n	8003bce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	e000      	b.n	8003bce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003bcc:	2302      	movs	r3, #2
  }
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3730      	adds	r7, #48	@ 0x30
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	4a5f      	ldr	r2, [pc, #380]	@ (8003d64 <UART_SetConfig+0x18c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d904      	bls.n	8003bf4 <UART_SetConfig+0x1c>
 8003bea:	f640 6175 	movw	r1, #3701	@ 0xe75
 8003bee:	485e      	ldr	r0, [pc, #376]	@ (8003d68 <UART_SetConfig+0x190>)
 8003bf0:	f7fd f89c 	bl	8000d2c <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d009      	beq.n	8003c10 <UART_SetConfig+0x38>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c04:	d004      	beq.n	8003c10 <UART_SetConfig+0x38>
 8003c06:	f640 6176 	movw	r1, #3702	@ 0xe76
 8003c0a:	4857      	ldr	r0, [pc, #348]	@ (8003d68 <UART_SetConfig+0x190>)
 8003c0c:	f7fd f88e 	bl	8000d2c <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00e      	beq.n	8003c36 <UART_SetConfig+0x5e>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c20:	d009      	beq.n	8003c36 <UART_SetConfig+0x5e>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003c2a:	d004      	beq.n	8003c36 <UART_SetConfig+0x5e>
 8003c2c:	f640 6177 	movw	r1, #3703	@ 0xe77
 8003c30:	484d      	ldr	r0, [pc, #308]	@ (8003d68 <UART_SetConfig+0x190>)
 8003c32:	f7fd f87b 	bl	8000d2c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695a      	ldr	r2, [r3, #20]
 8003c3a:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 8003c3e:	4013      	ands	r3, r2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d103      	bne.n	8003c4c <UART_SetConfig+0x74>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d104      	bne.n	8003c56 <UART_SetConfig+0x7e>
 8003c4c:	f640 6178 	movw	r1, #3704	@ 0xe78
 8003c50:	4845      	ldr	r0, [pc, #276]	@ (8003d68 <UART_SetConfig+0x190>)
 8003c52:	f7fd f86b 	bl	8000d2c <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003c88:	f023 030c 	bic.w	r3, r3, #12
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	68b9      	ldr	r1, [r7, #8]
 8003c92:	430b      	orrs	r3, r1
 8003c94:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	699a      	ldr	r2, [r3, #24]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a2e      	ldr	r2, [pc, #184]	@ (8003d6c <UART_SetConfig+0x194>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d103      	bne.n	8003cbe <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003cb6:	f7fe fdc1 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	e002      	b.n	8003cc4 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003cbe:	f7fe fda9 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 8003cc2:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	009a      	lsls	r2, r3, #2
 8003cce:	441a      	add	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cda:	4a25      	ldr	r2, [pc, #148]	@ (8003d70 <UART_SetConfig+0x198>)
 8003cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce0:	095b      	lsrs	r3, r3, #5
 8003ce2:	0119      	lsls	r1, r3, #4
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	009a      	lsls	r2, r3, #2
 8003cee:	441a      	add	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8003d70 <UART_SetConfig+0x198>)
 8003cfc:	fba3 0302 	umull	r0, r3, r3, r2
 8003d00:	095b      	lsrs	r3, r3, #5
 8003d02:	2064      	movs	r0, #100	@ 0x64
 8003d04:	fb00 f303 	mul.w	r3, r0, r3
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	3332      	adds	r3, #50	@ 0x32
 8003d0e:	4a18      	ldr	r2, [pc, #96]	@ (8003d70 <UART_SetConfig+0x198>)
 8003d10:	fba2 2303 	umull	r2, r3, r2, r3
 8003d14:	095b      	lsrs	r3, r3, #5
 8003d16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d1a:	4419      	add	r1, r3
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	009a      	lsls	r2, r3, #2
 8003d26:	441a      	add	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d32:	4b0f      	ldr	r3, [pc, #60]	@ (8003d70 <UART_SetConfig+0x198>)
 8003d34:	fba3 0302 	umull	r0, r3, r3, r2
 8003d38:	095b      	lsrs	r3, r3, #5
 8003d3a:	2064      	movs	r0, #100	@ 0x64
 8003d3c:	fb00 f303 	mul.w	r3, r0, r3
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	3332      	adds	r3, #50	@ 0x32
 8003d46:	4a0a      	ldr	r2, [pc, #40]	@ (8003d70 <UART_SetConfig+0x198>)
 8003d48:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4c:	095b      	lsrs	r3, r3, #5
 8003d4e:	f003 020f 	and.w	r2, r3, #15
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	440a      	add	r2, r1
 8003d58:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d5a:	bf00      	nop
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	0044aa20 	.word	0x0044aa20
 8003d68:	08008d38 	.word	0x08008d38
 8003d6c:	40013800 	.word	0x40013800
 8003d70:	51eb851f 	.word	0x51eb851f

08003d74 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 8003d74:	b590      	push	{r4, r7, lr}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 8003d80:	2300      	movs	r3, #0
 8003d82:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8003d84:	4b9f      	ldr	r3, [pc, #636]	@ (8004004 <dwt_initialise+0x290>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 8003d8c:	4b9d      	ldr	r3, [pc, #628]	@ (8004004 <dwt_initialise+0x290>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2200      	movs	r2, #0
 8003d92:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 8003d94:	4b9b      	ldr	r3, [pc, #620]	@ (8004004 <dwt_initialise+0x290>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 8003d9c:	4b99      	ldr	r3, [pc, #612]	@ (8004004 <dwt_initialise+0x290>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2200      	movs	r2, #0
 8003da2:	629a      	str	r2, [r3, #40]	@ 0x28
    pdw1000local->cbRxOk = NULL;
 8003da4:	4b97      	ldr	r3, [pc, #604]	@ (8004004 <dwt_initialise+0x290>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2200      	movs	r2, #0
 8003daa:	62da      	str	r2, [r3, #44]	@ 0x2c
    pdw1000local->cbRxTo = NULL;
 8003dac:	4b95      	ldr	r3, [pc, #596]	@ (8004004 <dwt_initialise+0x290>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2200      	movs	r2, #0
 8003db2:	631a      	str	r2, [r3, #48]	@ 0x30
    pdw1000local->cbRxErr = NULL;
 8003db4:	4b93      	ldr	r3, [pc, #588]	@ (8004004 <dwt_initialise+0x290>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2200      	movs	r2, #0
 8003dba:	635a      	str	r2, [r3, #52]	@ 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8003dbc:	f000 f926 	bl	800400c <dwt_readdevid>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	4a91      	ldr	r2, [pc, #580]	@ (8004008 <dwt_initialise+0x294>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d002      	beq.n	8003dce <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 8003dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dcc:	e115      	b.n	8003ffa <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 8003dd8:	f000 ff22 	bl	8004c20 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d004      	beq.n	8003df0 <dwt_initialise+0x7c>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d102      	bne.n	8003df6 <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8003df0:	2000      	movs	r0, #0
 8003df2:	f000 fd39 	bl	8004868 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8003df6:	2204      	movs	r2, #4
 8003df8:	2100      	movs	r1, #0
 8003dfa:	2024      	movs	r0, #36	@ 0x24
 8003dfc:	f000 fc06 	bl	800460c <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d116      	bne.n	8003e38 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8003e0a:	2004      	movs	r0, #4
 8003e0c:	f000 fc54 	bl	80046b8 <_dwt_otpread>
 8003e10:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d01f      	beq.n	8003e5a <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	2112      	movs	r1, #18
 8003e1e:	202d      	movs	r0, #45	@ 0x2d
 8003e20:	f000 fbf4 	bl	800460c <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8003e24:	4b77      	ldr	r3, [pc, #476]	@ (8004004 <dwt_initialise+0x290>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	8ada      	ldrh	r2, [r3, #22]
 8003e2a:	4b76      	ldr	r3, [pc, #472]	@ (8004004 <dwt_initialise+0x290>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003e32:	b292      	uxth	r2, r2
 8003e34:	82da      	strh	r2, [r3, #22]
 8003e36:	e010      	b.n	8003e5a <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 8003e38:	2130      	movs	r1, #48	@ 0x30
 8003e3a:	2028      	movs	r0, #40	@ 0x28
 8003e3c:	f000 fb91 	bl	8004562 <dwt_read32bitoffsetreg>
 8003e40:	4603      	mov	r3, r0
 8003e42:	f1b3 3f88 	cmp.w	r3, #2290649224	@ 0x88888888
 8003e46:	d008      	beq.n	8003e5a <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 8003e48:	4b6e      	ldr	r3, [pc, #440]	@ (8004004 <dwt_initialise+0x290>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	8ada      	ldrh	r2, [r3, #22]
 8003e4e:	4b6d      	ldr	r3, [pc, #436]	@ (8004004 <dwt_initialise+0x290>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003e56:	b292      	uxth	r2, r2
 8003e58:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d009      	beq.n	8003e78 <dwt_initialise+0x104>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d011      	beq.n	8003e92 <dwt_initialise+0x11e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00c      	beq.n	8003e92 <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8003e78:	201e      	movs	r0, #30
 8003e7a:	f000 fc1d 	bl	80046b8 <_dwt_otpread>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 8003e82:	8afb      	ldrh	r3, [r7, #22]
 8003e84:	0a1b      	lsrs	r3, r3, #8
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	4b5e      	ldr	r3, [pc, #376]	@ (8004004 <dwt_initialise+0x290>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	72da      	strb	r2, [r3, #11]
 8003e90:	e003      	b.n	8003e9a <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 8003e92:	4b5c      	ldr	r3, [pc, #368]	@ (8004004 <dwt_initialise+0x290>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2200      	movs	r2, #0
 8003e98:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10b      	bne.n	8003ebc <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 8003ea4:	8afb      	ldrh	r3, [r7, #22]
 8003ea6:	f003 031f 	and.w	r3, r3, #31
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 8003eae:	2310      	movs	r3, #16
 8003eb0:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 8003eb2:	8afb      	ldrh	r3, [r7, #22]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fed8 	bl	8004c6c <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f003 0310 	and.w	r3, r3, #16
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d007      	beq.n	8003ed6 <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8003ec6:	4b4f      	ldr	r3, [pc, #316]	@ (8004004 <dwt_initialise+0x290>)
 8003ec8:	681c      	ldr	r4, [r3, #0]
 8003eca:	2006      	movs	r0, #6
 8003ecc:	f000 fbf4 	bl	80046b8 <_dwt_otpread>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	6023      	str	r3, [r4, #0]
 8003ed4:	e003      	b.n	8003ede <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 8003ed6:	4b4b      	ldr	r3, [pc, #300]	@ (8004004 <dwt_initialise+0x290>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2200      	movs	r2, #0
 8003edc:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f003 0320 	and.w	r3, r3, #32
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d007      	beq.n	8003ef8 <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8003ee8:	4b46      	ldr	r3, [pc, #280]	@ (8004004 <dwt_initialise+0x290>)
 8003eea:	681c      	ldr	r4, [r3, #0]
 8003eec:	2007      	movs	r0, #7
 8003eee:	f000 fbe3 	bl	80046b8 <_dwt_otpread>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	6063      	str	r3, [r4, #4]
 8003ef6:	e003      	b.n	8003f00 <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 8003ef8:	4b42      	ldr	r3, [pc, #264]	@ (8004004 <dwt_initialise+0x290>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2200      	movs	r2, #0
 8003efe:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d008      	beq.n	8003f1c <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8003f0a:	2008      	movs	r0, #8
 8003f0c:	f000 fbd4 	bl	80046b8 <_dwt_otpread>
 8003f10:	4602      	mov	r2, r0
 8003f12:	4b3c      	ldr	r3, [pc, #240]	@ (8004004 <dwt_initialise+0x290>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	721a      	strb	r2, [r3, #8]
 8003f1a:	e003      	b.n	8003f24 <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 8003f1c:	4b39      	ldr	r3, [pc, #228]	@ (8004004 <dwt_initialise+0x290>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2200      	movs	r2, #0
 8003f22:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d008      	beq.n	8003f40 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 8003f2e:	2009      	movs	r0, #9
 8003f30:	f000 fbc2 	bl	80046b8 <_dwt_otpread>
 8003f34:	4602      	mov	r2, r0
 8003f36:	4b33      	ldr	r3, [pc, #204]	@ (8004004 <dwt_initialise+0x290>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	725a      	strb	r2, [r3, #9]
 8003f3e:	e003      	b.n	8003f48 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 8003f40:	4b30      	ldr	r3, [pc, #192]	@ (8004004 <dwt_initialise+0x290>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2200      	movs	r2, #0
 8003f46:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d121      	bne.n	8003f96 <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00b      	beq.n	8003f74 <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 8003f5c:	f000 fbf9 	bl	8004752 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8003f60:	4b28      	ldr	r3, [pc, #160]	@ (8004004 <dwt_initialise+0x290>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	8ada      	ldrh	r2, [r3, #22]
 8003f66:	4b27      	ldr	r3, [pc, #156]	@ (8004004 <dwt_initialise+0x290>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f6e:	b292      	uxth	r2, r2
 8003f70:	82da      	strh	r2, [r3, #22]
 8003f72:	e01e      	b.n	8003fb2 <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8003f74:	2105      	movs	r1, #5
 8003f76:	2036      	movs	r0, #54	@ 0x36
 8003f78:	f000 fb1a 	bl	80045b0 <dwt_read16bitoffsetreg>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 8003f80:	89fb      	ldrh	r3, [r7, #14]
 8003f82:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f86:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 8003f88:	89fb      	ldrh	r3, [r7, #14]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	2105      	movs	r1, #5
 8003f8e:	2036      	movs	r0, #54	@ 0x36
 8003f90:	f000 fb4f 	bl	8004632 <dwt_write16bitoffsetreg>
 8003f94:	e00d      	b.n	8003fb2 <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d108      	bne.n	8003fb2 <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 8003fa0:	4b18      	ldr	r3, [pc, #96]	@ (8004004 <dwt_initialise+0x290>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	8ada      	ldrh	r2, [r3, #22]
 8003fa6:	4b17      	ldr	r3, [pc, #92]	@ (8004004 <dwt_initialise+0x290>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fae:	b292      	uxth	r2, r2
 8003fb0:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8003fb2:	2001      	movs	r0, #1
 8003fb4:	f000 fc58 	bl	8004868 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8003fb8:	2200      	movs	r2, #0
 8003fba:	210a      	movs	r1, #10
 8003fbc:	202c      	movs	r0, #44	@ 0x2c
 8003fbe:	f000 fb25 	bl	800460c <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 8003fc2:	4b10      	ldr	r3, [pc, #64]	@ (8004004 <dwt_initialise+0x290>)
 8003fc4:	681c      	ldr	r4, [r3, #0]
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	2004      	movs	r0, #4
 8003fca:	f000 faca 	bl	8004562 <dwt_read32bitoffsetreg>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 8003fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8004004 <dwt_initialise+0x290>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	0c1b      	lsrs	r3, r3, #16
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	4b09      	ldr	r3, [pc, #36]	@ (8004004 <dwt_initialise+0x290>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f002 0203 	and.w	r2, r2, #3
 8003fe4:	b2d2      	uxtb	r2, r2
 8003fe6:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8003fe8:	4b06      	ldr	r3, [pc, #24]	@ (8004004 <dwt_initialise+0x290>)
 8003fea:	681c      	ldr	r4, [r3, #0]
 8003fec:	2100      	movs	r1, #0
 8003fee:	2008      	movs	r0, #8
 8003ff0:	f000 fab7 	bl	8004562 <dwt_read32bitoffsetreg>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8003ff8:	2300      	movs	r3, #0

} // end dwt_initialise()
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	371c      	adds	r7, #28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd90      	pop	{r4, r7, pc}
 8004002:	bf00      	nop
 8004004:	2000000c 	.word	0x2000000c
 8004008:	deca0130 	.word	0xdeca0130

0800400c <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8004010:	2100      	movs	r1, #0
 8004012:	2000      	movs	r0, #0
 8004014:	f000 faa5 	bl	8004562 <dwt_read32bitoffsetreg>
 8004018:	4603      	mov	r3, r0
}
 800401a:	4618      	mov	r0, r3
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 8004028:	2300      	movs	r3, #0
 800402a:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 800402c:	2300      	movs	r3, #0
 800402e:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	795b      	ldrb	r3, [r3, #5]
 800403a:	461a      	mov	r2, r3
 800403c:	4ba1      	ldr	r3, [pc, #644]	@ (80042c4 <dwt_configure+0x2a4>)
 800403e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004042:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	785b      	ldrb	r3, [r3, #1]
 8004048:	3b01      	subs	r3, #1
 800404a:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 800404c:	7cfb      	ldrb	r3, [r7, #19]
 800404e:	2b04      	cmp	r3, #4
 8004050:	d002      	beq.n	8004058 <dwt_configure+0x38>
 8004052:	7cfb      	ldrb	r3, [r7, #19]
 8004054:	2b07      	cmp	r3, #7
 8004056:	d101      	bne.n	800405c <dwt_configure+0x3c>
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <dwt_configure+0x3e>
 800405c:	2300      	movs	r3, #0
 800405e:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	79db      	ldrb	r3, [r3, #7]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10b      	bne.n	8004080 <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 8004068:	4b97      	ldr	r3, [pc, #604]	@ (80042c8 <dwt_configure+0x2a8>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691a      	ldr	r2, [r3, #16]
 800406e:	4b96      	ldr	r3, [pc, #600]	@ (80042c8 <dwt_configure+0x2a8>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8004076:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 8004078:	8abb      	ldrh	r3, [r7, #20]
 800407a:	08db      	lsrs	r3, r3, #3
 800407c:	82bb      	strh	r3, [r7, #20]
 800407e:	e007      	b.n	8004090 <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8004080:	4b91      	ldr	r3, [pc, #580]	@ (80042c8 <dwt_configure+0x2a8>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	4b90      	ldr	r3, [pc, #576]	@ (80042c8 <dwt_configure+0x2a8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 800408e:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 8004090:	4b8d      	ldr	r3, [pc, #564]	@ (80042c8 <dwt_configure+0x2a8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	7a12      	ldrb	r2, [r2, #8]
 8004098:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 800409a:	4b8b      	ldr	r3, [pc, #556]	@ (80042c8 <dwt_configure+0x2a8>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	4b89      	ldr	r3, [pc, #548]	@ (80042c8 <dwt_configure+0x2a8>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80040a8:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80040aa:	4b87      	ldr	r3, [pc, #540]	@ (80042c8 <dwt_configure+0x2a8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6919      	ldr	r1, [r3, #16]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	7a1b      	ldrb	r3, [r3, #8]
 80040b4:	041b      	lsls	r3, r3, #16
 80040b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80040ba:	4b83      	ldr	r3, [pc, #524]	@ (80042c8 <dwt_configure+0x2a8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 80040c2:	4b81      	ldr	r3, [pc, #516]	@ (80042c8 <dwt_configure+0x2a8>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	461a      	mov	r2, r3
 80040ca:	2100      	movs	r1, #0
 80040cc:	2004      	movs	r0, #4
 80040ce:	f000 facc 	bl	800466a <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 80040d2:	8abb      	ldrh	r3, [r7, #20]
 80040d4:	461a      	mov	r2, r3
 80040d6:	f642 0104 	movw	r1, #10244	@ 0x2804
 80040da:	202e      	movs	r0, #46	@ 0x2e
 80040dc:	f000 faa9 	bl	8004632 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 80040e0:	7cbb      	ldrb	r3, [r7, #18]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fb15 	bl	8004712 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 80040e8:	7cfb      	ldrb	r3, [r7, #19]
 80040ea:	4a78      	ldr	r2, [pc, #480]	@ (80042cc <dwt_configure+0x2ac>)
 80040ec:	5cd3      	ldrb	r3, [r2, r3]
 80040ee:	461a      	mov	r2, r3
 80040f0:	4b77      	ldr	r3, [pc, #476]	@ (80042d0 <dwt_configure+0x2b0>)
 80040f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040f6:	461a      	mov	r2, r3
 80040f8:	2107      	movs	r1, #7
 80040fa:	202b      	movs	r0, #43	@ 0x2b
 80040fc:	f000 fab5 	bl	800466a <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8004100:	7cfb      	ldrb	r3, [r7, #19]
 8004102:	4a72      	ldr	r2, [pc, #456]	@ (80042cc <dwt_configure+0x2ac>)
 8004104:	5cd3      	ldrb	r3, [r2, r3]
 8004106:	461a      	mov	r2, r3
 8004108:	4b72      	ldr	r3, [pc, #456]	@ (80042d4 <dwt_configure+0x2b4>)
 800410a:	5c9b      	ldrb	r3, [r3, r2]
 800410c:	461a      	mov	r2, r3
 800410e:	210b      	movs	r1, #11
 8004110:	202b      	movs	r0, #43	@ 0x2b
 8004112:	f000 fa7b 	bl	800460c <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8004116:	7c7b      	ldrb	r3, [r7, #17]
 8004118:	4a6f      	ldr	r2, [pc, #444]	@ (80042d8 <dwt_configure+0x2b8>)
 800411a:	5cd3      	ldrb	r3, [r2, r3]
 800411c:	461a      	mov	r2, r3
 800411e:	210b      	movs	r1, #11
 8004120:	2028      	movs	r0, #40	@ 0x28
 8004122:	f000 fa73 	bl	800460c <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 8004126:	7cfb      	ldrb	r3, [r7, #19]
 8004128:	4a68      	ldr	r2, [pc, #416]	@ (80042cc <dwt_configure+0x2ac>)
 800412a:	5cd3      	ldrb	r3, [r2, r3]
 800412c:	461a      	mov	r2, r3
 800412e:	4b6b      	ldr	r3, [pc, #428]	@ (80042dc <dwt_configure+0x2bc>)
 8004130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004134:	461a      	mov	r2, r3
 8004136:	210c      	movs	r1, #12
 8004138:	2028      	movs	r0, #40	@ 0x28
 800413a:	f000 fa96 	bl	800466a <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	79db      	ldrb	r3, [r3, #7]
 8004142:	4618      	mov	r0, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	799b      	ldrb	r3, [r3, #6]
 8004148:	4619      	mov	r1, r3
 800414a:	4a65      	ldr	r2, [pc, #404]	@ (80042e0 <dwt_configure+0x2c0>)
 800414c:	0043      	lsls	r3, r0, #1
 800414e:	440b      	add	r3, r1
 8004150:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004154:	461a      	mov	r2, r3
 8004156:	2102      	movs	r1, #2
 8004158:	2027      	movs	r0, #39	@ 0x27
 800415a:	f000 fa6a 	bl	8004632 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 800415e:	7cbb      	ldrb	r3, [r7, #18]
 8004160:	4a60      	ldr	r2, [pc, #384]	@ (80042e4 <dwt_configure+0x2c4>)
 8004162:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004166:	461a      	mov	r2, r3
 8004168:	2104      	movs	r1, #4
 800416a:	2027      	movs	r0, #39	@ 0x27
 800416c:	f000 fa61 	bl	8004632 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	79db      	ldrb	r3, [r3, #7]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d105      	bne.n	8004184 <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 8004178:	2264      	movs	r2, #100	@ 0x64
 800417a:	2106      	movs	r1, #6
 800417c:	2027      	movs	r0, #39	@ 0x27
 800417e:	f000 fa58 	bl	8004632 <dwt_write16bitoffsetreg>
 8004182:	e018      	b.n	80041b6 <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	789b      	ldrb	r3, [r3, #2]
 8004188:	2b04      	cmp	r3, #4
 800418a:	d10a      	bne.n	80041a2 <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 800418c:	2210      	movs	r2, #16
 800418e:	2106      	movs	r1, #6
 8004190:	2027      	movs	r0, #39	@ 0x27
 8004192:	f000 fa4e 	bl	8004632 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 8004196:	2210      	movs	r2, #16
 8004198:	2126      	movs	r1, #38	@ 0x26
 800419a:	2027      	movs	r0, #39	@ 0x27
 800419c:	f000 fa36 	bl	800460c <dwt_write8bitoffsetreg>
 80041a0:	e009      	b.n	80041b6 <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 80041a2:	2220      	movs	r2, #32
 80041a4:	2106      	movs	r1, #6
 80041a6:	2027      	movs	r0, #39	@ 0x27
 80041a8:	f000 fa43 	bl	8004632 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 80041ac:	2228      	movs	r2, #40	@ 0x28
 80041ae:	2126      	movs	r1, #38	@ 0x26
 80041b0:	2027      	movs	r0, #39	@ 0x27
 80041b2:	f000 fa2b 	bl	800460c <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 80041b6:	7cbb      	ldrb	r3, [r7, #18]
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	78d2      	ldrb	r2, [r2, #3]
 80041bc:	4611      	mov	r1, r2
 80041be:	4a4a      	ldr	r2, [pc, #296]	@ (80042e8 <dwt_configure+0x2c8>)
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	440b      	add	r3, r1
 80041c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041c8:	461a      	mov	r2, r3
 80041ca:	2108      	movs	r1, #8
 80041cc:	2027      	movs	r0, #39	@ 0x27
 80041ce:	f000 fa4c 	bl	800466a <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	895b      	ldrh	r3, [r3, #10]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d103      	bne.n	80041e2 <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f241 0241 	movw	r2, #4161	@ 0x1041
 80041e0:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	895b      	ldrh	r3, [r3, #10]
 80041e6:	461a      	mov	r2, r3
 80041e8:	2120      	movs	r1, #32
 80041ea:	2027      	movs	r0, #39	@ 0x27
 80041ec:	f000 fa21 	bl	8004632 <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 80041f0:	4b3e      	ldr	r3, [pc, #248]	@ (80042ec <dwt_configure+0x2cc>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	461a      	mov	r2, r3
 80041f6:	210c      	movs	r1, #12
 80041f8:	2023      	movs	r0, #35	@ 0x23
 80041fa:	f000 fa36 	bl	800466a <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 80041fe:	7cbb      	ldrb	r3, [r7, #18]
 8004200:	4a3a      	ldr	r2, [pc, #232]	@ (80042ec <dwt_configure+0x2cc>)
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	4413      	add	r3, r2
 8004206:	889b      	ldrh	r3, [r3, #4]
 8004208:	461a      	mov	r2, r3
 800420a:	2104      	movs	r1, #4
 800420c:	2023      	movs	r0, #35	@ 0x23
 800420e:	f000 fa10 	bl	8004632 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	799b      	ldrb	r3, [r3, #6]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00d      	beq.n	8004236 <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	79db      	ldrb	r3, [r3, #7]
 800421e:	461a      	mov	r2, r3
 8004220:	4b33      	ldr	r3, [pc, #204]	@ (80042f0 <dwt_configure+0x2d0>)
 8004222:	5c9b      	ldrb	r3, [r3, r2]
 8004224:	461a      	mov	r2, r3
 8004226:	2100      	movs	r1, #0
 8004228:	2021      	movs	r0, #33	@ 0x21
 800422a:	f000 f9ef 	bl	800460c <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 800422e:	2303      	movs	r3, #3
 8004230:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 8004232:	2301      	movs	r3, #1
 8004234:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8004236:	7cfb      	ldrb	r3, [r7, #19]
 8004238:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800423c:	7cfb      	ldrb	r3, [r7, #19]
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8004242:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	785b      	ldrb	r3, [r3, #1]
 8004248:	049b      	lsls	r3, r3, #18
 800424a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800424e:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8004250:	7dfb      	ldrb	r3, [r7, #23]
 8004252:	051b      	lsls	r3, r3, #20
 8004254:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8004258:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800425a:	7dbb      	ldrb	r3, [r7, #22]
 800425c:	045b      	lsls	r3, r3, #17
 800425e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8004262:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	791b      	ldrb	r3, [r3, #4]
 8004268:	059b      	lsls	r3, r3, #22
 800426a:	f003 63f8 	and.w	r3, r3, #130023424	@ 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800426e:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	795b      	ldrb	r3, [r3, #5]
 8004274:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	2100      	movs	r1, #0
 800427e:	201f      	movs	r0, #31
 8004280:	f000 f9f3 	bl	800466a <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	789a      	ldrb	r2, [r3, #2]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	785b      	ldrb	r3, [r3, #1]
 800428c:	4313      	orrs	r3, r2
 800428e:	b2db      	uxtb	r3, r3
 8004290:	0419      	lsls	r1, r3, #16
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	79db      	ldrb	r3, [r3, #7]
 8004296:	035a      	lsls	r2, r3, #13
 8004298:	4b0b      	ldr	r3, [pc, #44]	@ (80042c8 <dwt_configure+0x2a8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 80042a0:	4b09      	ldr	r3, [pc, #36]	@ (80042c8 <dwt_configure+0x2a8>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	461a      	mov	r2, r3
 80042a8:	2100      	movs	r1, #0
 80042aa:	2008      	movs	r0, #8
 80042ac:	f000 f9dd 	bl	800466a <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 80042b0:	2242      	movs	r2, #66	@ 0x42
 80042b2:	2100      	movs	r1, #0
 80042b4:	200d      	movs	r0, #13
 80042b6:	f000 f9a9 	bl	800460c <dwt_write8bitoffsetreg>
} // end dwt_configure()
 80042ba:	bf00      	nop
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	08008f58 	.word	0x08008f58
 80042c8:	2000000c 	.word	0x2000000c
 80042cc:	08008ed8 	.word	0x08008ed8
 80042d0:	08008ef8 	.word	0x08008ef8
 80042d4:	08008f10 	.word	0x08008f10
 80042d8:	08008f18 	.word	0x08008f18
 80042dc:	08008ee0 	.word	0x08008ee0
 80042e0:	08008f28 	.word	0x08008f28
 80042e4:	08008f34 	.word	0x08008f34
 80042e8:	08008f38 	.word	0x08008f38
 80042ec:	08008f1c 	.word	0x08008f1c
 80042f0:	08008f24 	.word	0x08008f24

080042f4 <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	80fb      	strh	r3, [r7, #6]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 80042fe:	88fb      	ldrh	r3, [r7, #6]
 8004300:	461a      	mov	r2, r3
 8004302:	f641 0104 	movw	r1, #6148	@ 0x1804
 8004306:	202e      	movs	r0, #46	@ 0x2e
 8004308:	f000 f993 	bl	8004632 <dwt_write16bitoffsetreg>
}
 800430c:	bf00      	nop
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	80fb      	strh	r3, [r7, #6]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 800431e:	88fb      	ldrh	r3, [r7, #6]
 8004320:	461a      	mov	r2, r3
 8004322:	2100      	movs	r1, #0
 8004324:	2018      	movs	r0, #24
 8004326:	f000 f984 	bl	8004632 <dwt_write16bitoffsetreg>
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	4603      	mov	r3, r0
 800433a:	6039      	str	r1, [r7, #0]
 800433c:	80fb      	strh	r3, [r7, #6]
 800433e:	4613      	mov	r3, r2
 8004340:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 8004342:	88ba      	ldrh	r2, [r7, #4]
 8004344:	88fb      	ldrh	r3, [r7, #6]
 8004346:	4413      	add	r3, r2
 8004348:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800434c:	dc09      	bgt.n	8004362 <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 800434e:	88fb      	ldrh	r3, [r7, #6]
 8004350:	3b02      	subs	r3, #2
 8004352:	461a      	mov	r2, r3
 8004354:	88b9      	ldrh	r1, [r7, #4]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2009      	movs	r0, #9
 800435a:	f000 f857 	bl	800440c <dwt_writetodevice>
        return DWT_SUCCESS;
 800435e:	2300      	movs	r3, #0
 8004360:	e001      	b.n	8004366 <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 8004362:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 8004366:	4618      	mov	r0, r3
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
	...

08004370 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	603a      	str	r2, [r7, #0]
 800437a:	80fb      	strh	r3, [r7, #6]
 800437c:	460b      	mov	r3, r1
 800437e:	80bb      	strh	r3, [r7, #4]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8004380:	4b0a      	ldr	r3, [pc, #40]	@ (80043ac <dwt_writetxfctrl+0x3c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	88fb      	ldrh	r3, [r7, #6]
 8004388:	431a      	orrs	r2, r3
 800438a:	88bb      	ldrh	r3, [r7, #4]
 800438c:	059b      	lsls	r3, r3, #22
 800438e:	431a      	orrs	r2, r3
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	03db      	lsls	r3, r3, #15
 8004394:	4313      	orrs	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	2100      	movs	r1, #0
 800439c:	2008      	movs	r0, #8
 800439e:	f000 f964 	bl	800466a <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 80043a2:	bf00      	nop
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	2000000c 	.word	0x2000000c

080043b0 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	807b      	strh	r3, [r7, #2]
 80043bc:	4613      	mov	r3, r2
 80043be:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 80043c0:	887a      	ldrh	r2, [r7, #2]
 80043c2:	8839      	ldrh	r1, [r7, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2011      	movs	r0, #17
 80043c8:	f000 f877 	bl	80044ba <dwt_readfromdevice>
}
 80043cc:	bf00      	nop
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <dwt_readtxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readtxtimestamp(uint8 * timestamp)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN, timestamp) ; // Read bytes directly into buffer
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2205      	movs	r2, #5
 80043e0:	2100      	movs	r1, #0
 80043e2:	2017      	movs	r0, #23
 80043e4:	f000 f869 	bl	80044ba <dwt_readfromdevice>
}
 80043e8:	bf00      	nop
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 * timestamp)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2205      	movs	r2, #5
 80043fc:	2100      	movs	r1, #0
 80043fe:	2015      	movs	r0, #21
 8004400:	f000 f85b 	bl	80044ba <dwt_readfromdevice>
}
 8004404:	bf00      	nop
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	60ba      	str	r2, [r7, #8]
 8004414:	607b      	str	r3, [r7, #4]
 8004416:	4603      	mov	r3, r0
 8004418:	81fb      	strh	r3, [r7, #14]
 800441a:	460b      	mov	r3, r1
 800441c:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 800441e:	2300      	movs	r3, #0
 8004420:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8004422:	89bb      	ldrh	r3, [r7, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10c      	bne.n	8004442 <dwt_writetodevice+0x36>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8004428:	89fb      	ldrh	r3, [r7, #14]
 800442a:	b2da      	uxtb	r2, r3
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	1c59      	adds	r1, r3, #1
 8004430:	6179      	str	r1, [r7, #20]
 8004432:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	3318      	adds	r3, #24
 800443a:	443b      	add	r3, r7
 800443c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004440:	e02f      	b.n	80044a2 <dwt_writetodevice+0x96>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8004442:	89fb      	ldrh	r3, [r7, #14]
 8004444:	b2da      	uxtb	r2, r3
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	1c59      	adds	r1, r3, #1
 800444a:	6179      	str	r1, [r7, #20]
 800444c:	f062 023f 	orn	r2, r2, #63	@ 0x3f
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	3318      	adds	r3, #24
 8004454:	443b      	add	r3, r7
 8004456:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800445a:	89bb      	ldrh	r3, [r7, #12]
 800445c:	2b7f      	cmp	r3, #127	@ 0x7f
 800445e:	d809      	bhi.n	8004474 <dwt_writetodevice+0x68>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	617a      	str	r2, [r7, #20]
 8004466:	89ba      	ldrh	r2, [r7, #12]
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	3318      	adds	r3, #24
 800446c:	443b      	add	r3, r7
 800446e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004472:	e016      	b.n	80044a2 <dwt_writetodevice+0x96>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8004474:	89bb      	ldrh	r3, [r7, #12]
 8004476:	b2da      	uxtb	r2, r3
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	1c59      	adds	r1, r3, #1
 800447c:	6179      	str	r1, [r7, #20]
 800447e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	3318      	adds	r3, #24
 8004486:	443b      	add	r3, r7
 8004488:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800448c:	89bb      	ldrh	r3, [r7, #12]
 800448e:	09db      	lsrs	r3, r3, #7
 8004490:	b299      	uxth	r1, r3
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	617a      	str	r2, [r7, #20]
 8004498:	b2ca      	uxtb	r2, r1
 800449a:	3318      	adds	r3, #24
 800449c:	443b      	add	r3, r7
 800449e:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	b298      	uxth	r0, r3
 80044a6:	f107 0110 	add.w	r1, r7, #16
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	f000 fc1f 	bl	8004cf0 <writetospi>
} // end dwt_writetodevice()
 80044b2:	bf00      	nop
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b086      	sub	sp, #24
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60ba      	str	r2, [r7, #8]
 80044c2:	607b      	str	r3, [r7, #4]
 80044c4:	4603      	mov	r3, r0
 80044c6:	81fb      	strh	r3, [r7, #14]
 80044c8:	460b      	mov	r3, r1
 80044ca:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 80044d0:	89bb      	ldrh	r3, [r7, #12]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <dwt_readfromdevice+0x30>
    {
         header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	617a      	str	r2, [r7, #20]
 80044dc:	89fa      	ldrh	r2, [r7, #14]
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	3318      	adds	r3, #24
 80044e2:	443b      	add	r3, r7
 80044e4:	f803 2c08 	strb.w	r2, [r3, #-8]
 80044e8:	e02f      	b.n	800454a <dwt_readfromdevice+0x90>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80044ea:	89fb      	ldrh	r3, [r7, #14]
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	1c59      	adds	r1, r3, #1
 80044f2:	6179      	str	r1, [r7, #20]
 80044f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	3318      	adds	r3, #24
 80044fc:	443b      	add	r3, r7
 80044fe:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8004502:	89bb      	ldrh	r3, [r7, #12]
 8004504:	2b7f      	cmp	r3, #127	@ 0x7f
 8004506:	d809      	bhi.n	800451c <dwt_readfromdevice+0x62>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	617a      	str	r2, [r7, #20]
 800450e:	89ba      	ldrh	r2, [r7, #12]
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	3318      	adds	r3, #24
 8004514:	443b      	add	r3, r7
 8004516:	f803 2c08 	strb.w	r2, [r3, #-8]
 800451a:	e016      	b.n	800454a <dwt_readfromdevice+0x90>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800451c:	89bb      	ldrh	r3, [r7, #12]
 800451e:	b2da      	uxtb	r2, r3
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	1c59      	adds	r1, r3, #1
 8004524:	6179      	str	r1, [r7, #20]
 8004526:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	3318      	adds	r3, #24
 800452e:	443b      	add	r3, r7
 8004530:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8004534:	89bb      	ldrh	r3, [r7, #12]
 8004536:	09db      	lsrs	r3, r3, #7
 8004538:	b299      	uxth	r1, r3
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	617a      	str	r2, [r7, #20]
 8004540:	b2ca      	uxtb	r2, r1
 8004542:	3318      	adds	r3, #24
 8004544:	443b      	add	r3, r7
 8004546:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	b298      	uxth	r0, r3
 800454e:	f107 0110 	add.w	r1, r7, #16
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	f000 fbff 	bl	8004d58 <readfromspi>
} // end dwt_readfromdevice()
 800455a:	bf00      	nop
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b086      	sub	sp, #24
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	b298      	uxth	r0, r3
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	b299      	uxth	r1, r3
 8004578:	f107 030c 	add.w	r3, r7, #12
 800457c:	2204      	movs	r2, #4
 800457e:	f7ff ff9c 	bl	80044ba <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8004582:	2303      	movs	r3, #3
 8004584:	613b      	str	r3, [r7, #16]
 8004586:	e00b      	b.n	80045a0 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	021b      	lsls	r3, r3, #8
 800458c:	f107 010c 	add.w	r1, r7, #12
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	440a      	add	r2, r1
 8004594:	7812      	ldrb	r2, [r2, #0]
 8004596:	4413      	add	r3, r2
 8004598:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	3b01      	subs	r3, #1
 800459e:	613b      	str	r3, [r7, #16]
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	daf0      	bge.n	8004588 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 80045a6:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 80045a8:	4618      	mov	r0, r3
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 80045ba:	2300      	movs	r3, #0
 80045bc:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	b298      	uxth	r0, r3
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	b299      	uxth	r1, r3
 80045c6:	f107 030c 	add.w	r3, r7, #12
 80045ca:	2202      	movs	r2, #2
 80045cc:	f7ff ff75 	bl	80044ba <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 80045d0:	7b7b      	ldrb	r3, [r7, #13]
 80045d2:	021b      	lsls	r3, r3, #8
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	7b3a      	ldrb	r2, [r7, #12]
 80045d8:	4413      	add	r3, r2
 80045da:	81fb      	strh	r3, [r7, #14]
    return regval ;
 80045dc:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	b298      	uxth	r0, r3
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	b299      	uxth	r1, r3
 80045f8:	f107 030f 	add.w	r3, r7, #15
 80045fc:	2201      	movs	r2, #1
 80045fe:	f7ff ff5c 	bl	80044ba <dwt_readfromdevice>

    return regval ;
 8004602:	7bfb      	ldrb	r3, [r7, #15]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	4613      	mov	r3, r2
 8004618:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	b298      	uxth	r0, r3
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	b299      	uxth	r1, r3
 8004622:	1dfb      	adds	r3, r7, #7
 8004624:	2201      	movs	r2, #1
 8004626:	f7ff fef1 	bl	800440c <dwt_writetodevice>
}
 800462a:	bf00      	nop
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b086      	sub	sp, #24
 8004636:	af00      	add	r7, sp, #0
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	4613      	mov	r3, r2
 800463e:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8004640:	88fb      	ldrh	r3, [r7, #6]
 8004642:	b2db      	uxtb	r3, r3
 8004644:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8004646:	88fb      	ldrh	r3, [r7, #6]
 8004648:	0a1b      	lsrs	r3, r3, #8
 800464a:	b29b      	uxth	r3, r3
 800464c:	b2db      	uxtb	r3, r3
 800464e:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	b298      	uxth	r0, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	b299      	uxth	r1, r3
 8004658:	f107 0314 	add.w	r3, r7, #20
 800465c:	2202      	movs	r2, #2
 800465e:	f7ff fed5 	bl	800440c <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8004662:	bf00      	nop
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b086      	sub	sp, #24
 800466e:	af00      	add	r7, sp, #0
 8004670:	60f8      	str	r0, [r7, #12]
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]
 800467a:	e00d      	b.n	8004698 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	b2d9      	uxtb	r1, r3
 8004680:	f107 0210 	add.w	r2, r7, #16
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	4413      	add	r3, r2
 8004688:	460a      	mov	r2, r1
 800468a:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	0a1b      	lsrs	r3, r3, #8
 8004690:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	3301      	adds	r3, #1
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	2b03      	cmp	r3, #3
 800469c:	ddee      	ble.n	800467c <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	b298      	uxth	r0, r3
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	b299      	uxth	r1, r3
 80046a6:	f107 0310 	add.w	r3, r7, #16
 80046aa:	2204      	movs	r2, #4
 80046ac:	f7ff feae 	bl	800440c <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 80046b0:	bf00      	nop
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	4603      	mov	r3, r0
 80046c0:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 80046c2:	88fb      	ldrh	r3, [r7, #6]
 80046c4:	461a      	mov	r2, r3
 80046c6:	2104      	movs	r1, #4
 80046c8:	202d      	movs	r0, #45	@ 0x2d
 80046ca:	f7ff ffb2 	bl	8004632 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 80046ce:	2203      	movs	r2, #3
 80046d0:	2106      	movs	r1, #6
 80046d2:	202d      	movs	r0, #45	@ 0x2d
 80046d4:	f7ff ff9a 	bl	800460c <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 80046d8:	2200      	movs	r2, #0
 80046da:	2106      	movs	r1, #6
 80046dc:	202d      	movs	r0, #45	@ 0x2d
 80046de:	f7ff ff95 	bl	800460c <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 80046e2:	210a      	movs	r1, #10
 80046e4:	202d      	movs	r0, #45	@ 0x2d
 80046e6:	f7ff ff3c 	bl	8004562 <dwt_read32bitoffsetreg>
 80046ea:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 80046ec:	68fb      	ldr	r3, [r7, #12]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 80046fa:	2200      	movs	r2, #0
 80046fc:	2102      	movs	r1, #2
 80046fe:	202c      	movs	r0, #44	@ 0x2c
 8004700:	f7ff ff84 	bl	800460c <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8004704:	2202      	movs	r2, #2
 8004706:	2102      	movs	r1, #2
 8004708:	202c      	movs	r0, #44	@ 0x2c
 800470a:	f7ff ff7f 	bl	800460c <dwt_write8bitoffsetreg>
}
 800470e:	bf00      	nop
 8004710:	bd80      	pop	{r7, pc}

08004712 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b082      	sub	sp, #8
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 800471a:	226d      	movs	r2, #109	@ 0x6d
 800471c:	f640 0106 	movw	r1, #2054	@ 0x806
 8004720:	202e      	movs	r0, #46	@ 0x2e
 8004722:	f7ff ff73 	bl	800460c <dwt_write8bitoffsetreg>

    if(prfIndex)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d007      	beq.n	800473c <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 800472c:	f240 6207 	movw	r2, #1543	@ 0x607
 8004730:	f641 0106 	movw	r1, #6150	@ 0x1806
 8004734:	202e      	movs	r0, #46	@ 0x2e
 8004736:	f7ff ff7c 	bl	8004632 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 800473a:	e006      	b.n	800474a <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 800473c:	f241 6207 	movw	r2, #5639	@ 0x1607
 8004740:	f641 0106 	movw	r1, #6150	@ 0x1806
 8004744:	202e      	movs	r0, #46	@ 0x2e
 8004746:	f7ff ff74 	bl	8004632 <dwt_write16bitoffsetreg>
}
 800474a:	bf00      	nop
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8004756:	200e      	movs	r0, #14
 8004758:	f000 f886 	bl	8004868 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 800475c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004760:	2106      	movs	r1, #6
 8004762:	202d      	movs	r0, #45	@ 0x2d
 8004764:	f7ff ff65 	bl	8004632 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8004768:	2001      	movs	r0, #1
 800476a:	f000 fab5 	bl	8004cd8 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800476e:	2001      	movs	r0, #1
 8004770:	f000 f87a 	bl	8004868 <_dwt_enableclocks>
}
 8004774:	bf00      	nop
 8004776:	bd80      	pop	{r7, pc}

08004778 <dwt_setrxaftertxdelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32 rxDelayTime)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 8004780:	2100      	movs	r1, #0
 8004782:	201a      	movs	r0, #26
 8004784:	f7ff feed 	bl	8004562 <dwt_read32bitoffsetreg>
 8004788:	60f8      	str	r0, [r7, #12]

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	0d1b      	lsrs	r3, r3, #20
 800478e:	051b      	lsls	r3, r3, #20
 8004790:	60fb      	str	r3, [r7, #12]

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	4313      	orrs	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	2100      	movs	r1, #0
 80047a2:	201a      	movs	r0, #26
 80047a4:	f7ff ff61 	bl	800466a <dwt_write32bitoffsetreg>
}
 80047a8:	bf00      	nop
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <dwt_setleds>:
 * output parameters none
 *
 * no return value
 */
void dwt_setleds(uint8 mode)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	4603      	mov	r3, r0
 80047b8:	71fb      	strb	r3, [r7, #7]
    uint32 reg;

    if (mode & DWT_LEDS_ENABLE)
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d03f      	beq.n	8004844 <dwt_setleds+0x94>
    {
        // Set up MFIO for LED output.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
 80047c4:	2100      	movs	r1, #0
 80047c6:	2026      	movs	r0, #38	@ 0x26
 80047c8:	f7ff fecb 	bl	8004562 <dwt_read32bitoffsetreg>
 80047cc:	60f8      	str	r0, [r7, #12]
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 80047d4:	60fb      	str	r3, [r7, #12]
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 80047dc:	60fb      	str	r3, [r7, #12]
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	2100      	movs	r1, #0
 80047e2:	2026      	movs	r0, #38	@ 0x26
 80047e4:	f7ff ff41 	bl	800466a <dwt_write32bitoffsetreg>

        // Enable LP Oscillator to run from counter and turn on de-bounce clock.
        reg = dwt_read32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET);
 80047e8:	2100      	movs	r1, #0
 80047ea:	2036      	movs	r0, #54	@ 0x36
 80047ec:	f7ff feb9 	bl	8004562 <dwt_read32bitoffsetreg>
 80047f0:	60f8      	str	r0, [r7, #12]
        reg |= (PMSC_CTRL0_GPDCE | PMSC_CTRL0_KHZCLEN);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f443 0304 	orr.w	r3, r3, #8650752	@ 0x840000
 80047f8:	60fb      	str	r3, [r7, #12]
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET, reg);
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	2100      	movs	r1, #0
 80047fe:	2036      	movs	r0, #54	@ 0x36
 8004800:	f7ff ff33 	bl	800466a <dwt_write32bitoffsetreg>

        // Enable LEDs to blink and set default blink time.
        reg = PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF;
 8004804:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8004808:	60fb      	str	r3, [r7, #12]
        // Make LEDs blink once if requested.
        if (mode & DWT_LEDS_INIT_BLINK)
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <dwt_setleds+0x6c>
        {
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 800481a:	60fb      	str	r3, [r7, #12]
        }
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	2128      	movs	r1, #40	@ 0x28
 8004820:	2036      	movs	r0, #54	@ 0x36
 8004822:	f7ff ff22 	bl	800466a <dwt_write32bitoffsetreg>
        // Clear force blink bits if needed.
        if(mode & DWT_LEDS_INIT_BLINK)
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d017      	beq.n	8004860 <dwt_setleds+0xb0>
        {
            reg &= ~PMSC_LEDC_BLINK_NOW_ALL;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8004836:	60fb      	str	r3, [r7, #12]
            dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	2128      	movs	r1, #40	@ 0x28
 800483c:	2036      	movs	r0, #54	@ 0x36
 800483e:	f7ff ff14 	bl	800466a <dwt_write32bitoffsetreg>
        // Clear the GPIO bits that are used for LED control.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
    }
}
 8004842:	e00d      	b.n	8004860 <dwt_setleds+0xb0>
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
 8004844:	2100      	movs	r1, #0
 8004846:	2026      	movs	r0, #38	@ 0x26
 8004848:	f7ff fe8b 	bl	8004562 <dwt_read32bitoffsetreg>
 800484c:	60f8      	str	r0, [r7, #12]
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8004854:	60fb      	str	r3, [r7, #12]
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	2100      	movs	r1, #0
 800485a:	2026      	movs	r0, #38	@ 0x26
 800485c:	f7ff ff05 	bl	800466a <dwt_write32bitoffsetreg>
}
 8004860:	bf00      	nop
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8004870:	f107 030c 	add.w	r3, r7, #12
 8004874:	2202      	movs	r2, #2
 8004876:	2100      	movs	r1, #0
 8004878:	2036      	movs	r0, #54	@ 0x36
 800487a:	f7ff fe1e 	bl	80044ba <dwt_readfromdevice>
    switch(clocks)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b0e      	cmp	r3, #14
 8004882:	d876      	bhi.n	8004972 <_dwt_enableclocks+0x10a>
 8004884:	a201      	add	r2, pc, #4	@ (adr r2, 800488c <_dwt_enableclocks+0x24>)
 8004886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488a:	bf00      	nop
 800488c:	080048d9 	.word	0x080048d9
 8004890:	080048c9 	.word	0x080048c9
 8004894:	080048ef 	.word	0x080048ef
 8004898:	08004973 	.word	0x08004973
 800489c:	08004973 	.word	0x08004973
 80048a0:	08004973 	.word	0x08004973
 80048a4:	08004973 	.word	0x08004973
 80048a8:	08004905 	.word	0x08004905
 80048ac:	08004925 	.word	0x08004925
 80048b0:	08004973 	.word	0x08004973
 80048b4:	08004973 	.word	0x08004973
 80048b8:	0800493b 	.word	0x0800493b
 80048bc:	08004947 	.word	0x08004947
 80048c0:	08004953 	.word	0x08004953
 80048c4:	08004969 	.word	0x08004969
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 80048c8:	2300      	movs	r3, #0
 80048ca:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 80048cc:	7b7b      	ldrb	r3, [r7, #13]
 80048ce:	f023 0301 	bic.w	r3, r3, #1
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	737b      	strb	r3, [r7, #13]
        }
        break;
 80048d6:	e04d      	b.n	8004974 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 80048d8:	7b3b      	ldrb	r3, [r7, #12]
 80048da:	b25b      	sxtb	r3, r3
 80048dc:	f023 0303 	bic.w	r3, r3, #3
 80048e0:	b25b      	sxtb	r3, r3
 80048e2:	f043 0301 	orr.w	r3, r3, #1
 80048e6:	b25b      	sxtb	r3, r3
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	733b      	strb	r3, [r7, #12]
        }
        break;
 80048ec:	e042      	b.n	8004974 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 80048ee:	7b3b      	ldrb	r3, [r7, #12]
 80048f0:	b25b      	sxtb	r3, r3
 80048f2:	f023 0303 	bic.w	r3, r3, #3
 80048f6:	b25b      	sxtb	r3, r3
 80048f8:	f043 0302 	orr.w	r3, r3, #2
 80048fc:	b25b      	sxtb	r3, r3
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	733b      	strb	r3, [r7, #12]
        }
        break;
 8004902:	e037      	b.n	8004974 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8004904:	7b3b      	ldrb	r3, [r7, #12]
 8004906:	b25b      	sxtb	r3, r3
 8004908:	f023 034c 	bic.w	r3, r3, #76	@ 0x4c
 800490c:	b25b      	sxtb	r3, r3
 800490e:	f043 0348 	orr.w	r3, r3, #72	@ 0x48
 8004912:	b25b      	sxtb	r3, r3
 8004914:	b2db      	uxtb	r3, r3
 8004916:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8004918:	7b7b      	ldrb	r3, [r7, #13]
 800491a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800491e:	b2db      	uxtb	r3, r3
 8004920:	737b      	strb	r3, [r7, #13]
        }
        break;
 8004922:	e027      	b.n	8004974 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8004924:	7b3b      	ldrb	r3, [r7, #12]
 8004926:	f023 034c 	bic.w	r3, r3, #76	@ 0x4c
 800492a:	b2db      	uxtb	r3, r3
 800492c:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 800492e:	7b7b      	ldrb	r3, [r7, #13]
 8004930:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004934:	b2db      	uxtb	r3, r3
 8004936:	737b      	strb	r3, [r7, #13]
        }
        break;
 8004938:	e01c      	b.n	8004974 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 800493a:	7b7b      	ldrb	r3, [r7, #13]
 800493c:	f043 0302 	orr.w	r3, r3, #2
 8004940:	b2db      	uxtb	r3, r3
 8004942:	737b      	strb	r3, [r7, #13]
        }
        break;
 8004944:	e016      	b.n	8004974 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8004946:	7b7b      	ldrb	r3, [r7, #13]
 8004948:	f023 0302 	bic.w	r3, r3, #2
 800494c:	b2db      	uxtb	r3, r3
 800494e:	737b      	strb	r3, [r7, #13]
        }
        break;
 8004950:	e010      	b.n	8004974 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8004952:	7b3b      	ldrb	r3, [r7, #12]
 8004954:	b25b      	sxtb	r3, r3
 8004956:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800495a:	b25b      	sxtb	r3, r3
 800495c:	f043 0320 	orr.w	r3, r3, #32
 8004960:	b25b      	sxtb	r3, r3
 8004962:	b2db      	uxtb	r3, r3
 8004964:	733b      	strb	r3, [r7, #12]
        }
        break;
 8004966:	e005      	b.n	8004974 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8004968:	2301      	movs	r3, #1
 800496a:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 800496c:	2303      	movs	r3, #3
 800496e:	737b      	strb	r3, [r7, #13]
        }
        break;
 8004970:	e000      	b.n	8004974 <_dwt_enableclocks+0x10c>
        default:
        break;
 8004972:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8004974:	f107 030c 	add.w	r3, r7, #12
 8004978:	2201      	movs	r2, #1
 800497a:	2100      	movs	r1, #0
 800497c:	2036      	movs	r0, #54	@ 0x36
 800497e:	f7ff fd45 	bl	800440c <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8004982:	f107 030c 	add.w	r3, r7, #12
 8004986:	3301      	adds	r3, #1
 8004988:	2201      	movs	r2, #1
 800498a:	2101      	movs	r1, #1
 800498c:	2036      	movs	r0, #54	@ 0x36
 800498e:	f7ff fd3d 	bl	800440c <dwt_writetodevice>

} // end _dwt_enableclocks()
 8004992:	bf00      	nop
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop

0800499c <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 80049a0:	2000      	movs	r0, #0
 80049a2:	f7ff ff61 	bl	8004868 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 80049a6:	2200      	movs	r2, #0
 80049a8:	2104      	movs	r1, #4
 80049aa:	2036      	movs	r0, #54	@ 0x36
 80049ac:	f7ff fe41 	bl	8004632 <dwt_write16bitoffsetreg>
}
 80049b0:	bf00      	nop
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <dwt_setdelayedtrxtime>:
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32 starttime)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	2101      	movs	r1, #1
 80049c0:	200a      	movs	r0, #10
 80049c2:	f7ff fe52 	bl	800466a <dwt_write32bitoffsetreg>

} // end dwt_setdelayedtrxtime()
 80049c6:	bf00      	nop
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	4603      	mov	r3, r0
 80049d8:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 80049da:	2300      	movs	r3, #0
 80049dc:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 80049de:	2300      	movs	r3, #0
 80049e0:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 80049e2:	2300      	movs	r3, #0
 80049e4:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 80049e6:	79fb      	ldrb	r3, [r7, #7]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d005      	beq.n	80049fc <dwt_starttx+0x2c>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 80049f0:	2380      	movs	r3, #128	@ 0x80
 80049f2:	72fb      	strb	r3, [r7, #11]
        pdw1000local->wait4resp = 1;
 80049f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004a68 <dwt_starttx+0x98>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2201      	movs	r2, #1
 80049fa:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 80049fc:	79fb      	ldrb	r3, [r7, #7]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d020      	beq.n	8004a48 <dwt_starttx+0x78>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8004a06:	7afb      	ldrb	r3, [r7, #11]
 8004a08:	f043 0306 	orr.w	r3, r3, #6
 8004a0c:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8004a0e:	7afb      	ldrb	r3, [r7, #11]
 8004a10:	461a      	mov	r2, r3
 8004a12:	2100      	movs	r1, #0
 8004a14:	200d      	movs	r0, #13
 8004a16:	f7ff fdf9 	bl	800460c <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 8004a1a:	2103      	movs	r1, #3
 8004a1c:	200f      	movs	r0, #15
 8004a1e:	f7ff fdc7 	bl	80045b0 <dwt_read16bitoffsetreg>
 8004a22:	4603      	mov	r3, r0
 8004a24:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8004a26:	893b      	ldrh	r3, [r7, #8]
 8004a28:	f403 6381 	and.w	r3, r3, #1032	@ 0x408
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d102      	bne.n	8004a36 <dwt_starttx+0x66>
        {
            retval = DWT_SUCCESS ; // All okay
 8004a30:	2300      	movs	r3, #0
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	e012      	b.n	8004a5c <dwt_starttx+0x8c>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 8004a36:	2240      	movs	r2, #64	@ 0x40
 8004a38:	2100      	movs	r1, #0
 8004a3a:	200d      	movs	r0, #13
 8004a3c:	f7ff fde6 	bl	800460c <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 8004a40:	f04f 33ff 	mov.w	r3, #4294967295
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	e009      	b.n	8004a5c <dwt_starttx+0x8c>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 8004a48:	7afb      	ldrb	r3, [r7, #11]
 8004a4a:	f043 0302 	orr.w	r3, r3, #2
 8004a4e:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8004a50:	7afb      	ldrb	r3, [r7, #11]
 8004a52:	461a      	mov	r2, r3
 8004a54:	2100      	movs	r1, #0
 8004a56:	200d      	movs	r0, #13
 8004a58:	f7ff fdd8 	bl	800460c <dwt_write8bitoffsetreg>
    }

    return retval;
 8004a5c:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	2000000c 	.word	0x2000000c

08004a6c <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 8004a72:	2100      	movs	r1, #0
 8004a74:	200e      	movs	r0, #14
 8004a76:	f7ff fd74 	bl	8004562 <dwt_read32bitoffsetreg>
 8004a7a:	6078      	str	r0, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 8004a7c:	f000 f90e 	bl	8004c9c <decamutexon>
 8004a80:	6038      	str	r0, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 8004a82:	2200      	movs	r2, #0
 8004a84:	2100      	movs	r1, #0
 8004a86:	200e      	movs	r0, #14
 8004a88:	f7ff fdef 	bl	800466a <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 8004a8c:	2240      	movs	r2, #64	@ 0x40
 8004a8e:	2100      	movs	r1, #0
 8004a90:	200d      	movs	r0, #13
 8004a92:	f7ff fdbb 	bl	800460c <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 8004a96:	4a0b      	ldr	r2, [pc, #44]	@ (8004ac4 <dwt_forcetrxoff+0x58>)
 8004a98:	2100      	movs	r1, #0
 8004a9a:	200f      	movs	r0, #15
 8004a9c:	f7ff fde5 	bl	800466a <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 8004aa0:	f000 f814 	bl	8004acc <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	200e      	movs	r0, #14
 8004aaa:	f7ff fdde 	bl	800466a <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 8004aae:	6838      	ldr	r0, [r7, #0]
 8004ab0:	f000 f905 	bl	8004cbe <decamutexoff>
    pdw1000local->wait4resp = 0;
 8004ab4:	4b04      	ldr	r3, [pc, #16]	@ (8004ac8 <dwt_forcetrxoff+0x5c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 8004abc:	bf00      	nop
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	2427fff8 	.word	0x2427fff8
 8004ac8:	2000000c 	.word	0x2000000c

08004acc <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8004ad2:	2103      	movs	r1, #3
 8004ad4:	200f      	movs	r0, #15
 8004ad6:	f7ff fd86 	bl	80045e6 <dwt_read8bitoffsetreg>
 8004ada:	4603      	mov	r3, r0
 8004adc:	71fb      	strb	r3, [r7, #7]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8004ade:	79fa      	ldrb	r2, [r7, #7]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8004ae0:	79fb      	ldrb	r3, [r7, #7]
 8004ae2:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8004ae4:	4053      	eors	r3, r2
 8004ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d004      	beq.n	8004af8 <dwt_syncrxbufptrs+0x2c>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8004aee:	2201      	movs	r2, #1
 8004af0:	2103      	movs	r1, #3
 8004af2:	200d      	movs	r0, #13
 8004af4:	f7ff fd8a 	bl	800460c <dwt_write8bitoffsetreg>
    }
}
 8004af8:	bf00      	nop
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f003 0304 	and.w	r3, r3, #4
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <dwt_rxenable+0x16>
    {
        dwt_syncrxbufptrs();
 8004b12:	f7ff ffdb 	bl	8004acc <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 8004b16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b1a:	81fb      	strh	r3, [r7, #14]

    if (mode & DWT_START_RX_DELAYED)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <dwt_rxenable+0x2e>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 8004b26:	89fb      	ldrh	r3, [r7, #14]
 8004b28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b2c:	81fb      	strh	r3, [r7, #14]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8004b2e:	89fb      	ldrh	r3, [r7, #14]
 8004b30:	461a      	mov	r2, r3
 8004b32:	2100      	movs	r1, #0
 8004b34:	200d      	movs	r0, #13
 8004b36:	f7ff fd7c 	bl	8004632 <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d01a      	beq.n	8004b7a <dwt_rxenable+0x7a>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8004b44:	2103      	movs	r1, #3
 8004b46:	200f      	movs	r0, #15
 8004b48:	f7ff fd4d 	bl	80045e6 <dwt_read8bitoffsetreg>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	737b      	strb	r3, [r7, #13]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 8004b50:	7b7b      	ldrb	r3, [r7, #13]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00f      	beq.n	8004b7a <dwt_rxenable+0x7a>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 8004b5a:	f7ff ff87 	bl	8004a6c <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d105      	bne.n	8004b74 <dwt_rxenable+0x74>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 8004b68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	200d      	movs	r0, #13
 8004b70:	f7ff fd5f 	bl	8004632 <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 8004b74:	f04f 33ff 	mov.w	r3, #4294967295
 8004b78:	e000      	b.n	8004b7c <dwt_rxenable+0x7c>
        }
    }

    return DWT_SUCCESS;
 8004b7a:	2300      	movs	r3, #0
} // end dwt_rxenable()
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	80fb      	strh	r3, [r7, #6]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 8004b8e:	2103      	movs	r1, #3
 8004b90:	2004      	movs	r0, #4
 8004b92:	f7ff fd28 	bl	80045e6 <dwt_read8bitoffsetreg>
 8004b96:	4603      	mov	r3, r0
 8004b98:	73fb      	strb	r3, [r7, #15]

    if(time > 0)
 8004b9a:	88fb      	ldrh	r3, [r7, #6]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d018      	beq.n	8004bd2 <dwt_setrxtimeout+0x4e>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 8004ba0:	88fb      	ldrh	r3, [r7, #6]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	200c      	movs	r0, #12
 8004ba8:	f7ff fd43 	bl	8004632 <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	f043 0310 	orr.w	r3, r3, #16
 8004bb2:	73fb      	strb	r3, [r7, #15]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 8004bb4:	4b12      	ldr	r3, [pc, #72]	@ (8004c00 <dwt_setrxtimeout+0x7c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	691a      	ldr	r2, [r3, #16]
 8004bba:	4b11      	ldr	r3, [pc, #68]	@ (8004c00 <dwt_setrxtimeout+0x7c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004bc2:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	2103      	movs	r1, #3
 8004bca:	2004      	movs	r0, #4
 8004bcc:	f7ff fd1e 	bl	800460c <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 8004bd0:	e011      	b.n	8004bf6 <dwt_setrxtimeout+0x72>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 8004bd2:	7bfb      	ldrb	r3, [r7, #15]
 8004bd4:	f023 0310 	bic.w	r3, r3, #16
 8004bd8:	73fb      	strb	r3, [r7, #15]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 8004bda:	4b09      	ldr	r3, [pc, #36]	@ (8004c00 <dwt_setrxtimeout+0x7c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	691a      	ldr	r2, [r3, #16]
 8004be0:	4b07      	ldr	r3, [pc, #28]	@ (8004c00 <dwt_setrxtimeout+0x7c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004be8:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
 8004bec:	461a      	mov	r2, r3
 8004bee:	2103      	movs	r1, #3
 8004bf0:	2004      	movs	r0, #4
 8004bf2:	f7ff fd0b 	bl	800460c <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 8004bf6:	bf00      	nop
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	2000000c 	.word	0x2000000c

08004c04 <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 8004c08:	22e0      	movs	r2, #224	@ 0xe0
 8004c0a:	2103      	movs	r1, #3
 8004c0c:	2036      	movs	r0, #54	@ 0x36
 8004c0e:	f7ff fcfd 	bl	800460c <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8004c12:	22f0      	movs	r2, #240	@ 0xf0
 8004c14:	2103      	movs	r1, #3
 8004c16:	2036      	movs	r0, #54	@ 0x36
 8004c18:	f7ff fcf8 	bl	800460c <dwt_write8bitoffsetreg>
}
 8004c1c:	bf00      	nop
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8004c24:	f7ff feba 	bl	800499c <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8004c28:	2200      	movs	r2, #0
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	202c      	movs	r0, #44	@ 0x2c
 8004c2e:	f7ff fd00 	bl	8004632 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8004c32:	2200      	movs	r2, #0
 8004c34:	2106      	movs	r1, #6
 8004c36:	202c      	movs	r0, #44	@ 0x2c
 8004c38:	f7ff fce8 	bl	800460c <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8004c3c:	f7ff fd5b 	bl	80046f6 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8004c40:	2200      	movs	r2, #0
 8004c42:	2103      	movs	r1, #3
 8004c44:	2036      	movs	r0, #54	@ 0x36
 8004c46:	f7ff fce1 	bl	800460c <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8004c4a:	2001      	movs	r0, #1
 8004c4c:	f000 f844 	bl	8004cd8 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8004c50:	22f0      	movs	r2, #240	@ 0xf0
 8004c52:	2103      	movs	r1, #3
 8004c54:	2036      	movs	r0, #54	@ 0x36
 8004c56:	f7ff fcd9 	bl	800460c <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8004c5a:	4b03      	ldr	r3, [pc, #12]	@ (8004c68 <dwt_softreset+0x48>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	755a      	strb	r2, [r3, #21]
}
 8004c62:	bf00      	nop
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	2000000c 	.word	0x2000000c

08004c6c <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	4603      	mov	r3, r0
 8004c74:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8004c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c7a:	f003 031f 	and.w	r3, r3, #31
 8004c7e:	b25b      	sxtb	r3, r3
 8004c80:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004c84:	b25b      	sxtb	r3, r3
 8004c86:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	210e      	movs	r1, #14
 8004c8e:	202b      	movs	r0, #43	@ 0x2b
 8004c90:	f7ff fcbc 	bl	800460c <dwt_write8bitoffsetreg>
}
 8004c94:	bf00      	nop
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 8004ca2:	f000 f9ef 	bl	8005084 <port_GetEXT_IRQStatus>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	607b      	str	r3, [r7, #4]

	if(s) {
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 8004cb0:	f000 f9da 	bl	8005068 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8004cb4:	687b      	ldr	r3, [r7, #4]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b082      	sub	sp, #8
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 8004ccc:	f000 f9d3 	bl	8005076 <port_EnableEXT_IRQ>
	}
}
 8004cd0:	bf00      	nop
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f8f3 	bl	8004ecc <Sleep>
}
 8004ce6:	bf00      	nop
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
	...

08004cf0 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 8004cf0:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8004cf4:	4683      	mov	fp, r0
 8004cf6:	468a      	mov	sl, r1
 8004cf8:	4690      	mov	r8, r2
 8004cfa:	4699      	mov	r9, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8004cfc:	f7ff ffce 	bl	8004c9c <decamutexon>
 8004d00:	4606      	mov	r6, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8004d02:	4d13      	ldr	r5, [pc, #76]	@ (8004d50 <writetospi+0x60>)
 8004d04:	4628      	mov	r0, r5
 8004d06:	f7fe f89d 	bl	8002e44 <HAL_SPI_GetState>
 8004d0a:	2801      	cmp	r0, #1
 8004d0c:	4604      	mov	r4, r0
 8004d0e:	d1f9      	bne.n	8004d04 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8004d10:	2200      	movs	r2, #0
 8004d12:	2110      	movs	r1, #16
 8004d14:	480f      	ldr	r0, [pc, #60]	@ (8004d54 <writetospi+0x64>)
 8004d16:	f7fc ffdb 	bl	8001cd0 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 8004d1a:	465a      	mov	r2, fp
 8004d1c:	4651      	mov	r1, sl
 8004d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d22:	480b      	ldr	r0, [pc, #44]	@ (8004d50 <writetospi+0x60>)
 8004d24:	f7fd ff3a 	bl	8002b9c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 8004d28:	f04f 33ff 	mov.w	r3, #4294967295
 8004d2c:	4649      	mov	r1, r9
 8004d2e:	fa1f f288 	uxth.w	r2, r8
 8004d32:	4807      	ldr	r0, [pc, #28]	@ (8004d50 <writetospi+0x60>)
 8004d34:	f7fd ff32 	bl	8002b9c <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8004d38:	4622      	mov	r2, r4
 8004d3a:	2110      	movs	r1, #16
 8004d3c:	4805      	ldr	r0, [pc, #20]	@ (8004d54 <writetospi+0x64>)
 8004d3e:	f7fc ffc7 	bl	8001cd0 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8004d42:	4630      	mov	r0, r6
 8004d44:	f7ff ffbb 	bl	8004cbe <decamutexoff>

    return 0;
} // end writetospi()
 8004d48:	2000      	movs	r0, #0
 8004d4a:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8004d4e:	bf00      	nop
 8004d50:	20000204 	.word	0x20000204
 8004d54:	40010800 	.word	0x40010800

08004d58 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 8004d58:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 8004d5c:	4681      	mov	r9, r0
 8004d5e:	460c      	mov	r4, r1
 8004d60:	4690      	mov	r8, r2
 8004d62:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8004d64:	f7ff ff9a 	bl	8004c9c <decamutexon>
 8004d68:	4606      	mov	r6, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8004d6a:	f8df a078 	ldr.w	sl, [pc, #120]	@ 8004de4 <readfromspi+0x8c>
 8004d6e:	4650      	mov	r0, sl
 8004d70:	f7fe f868 	bl	8002e44 <HAL_SPI_GetState>
 8004d74:	2801      	cmp	r0, #1
 8004d76:	d1fa      	bne.n	8004d6e <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2110      	movs	r1, #16
 8004d7c:	481a      	ldr	r0, [pc, #104]	@ (8004de8 <readfromspi+0x90>)
 8004d7e:	f7fc ffa7 	bl	8001cd0 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 8004d82:	f1b9 0f00 	cmp.w	r9, #0
 8004d86:	d00c      	beq.n	8004da2 <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8004d88:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004de4 <readfromspi+0x8c>
 8004d8c:	44a1      	add	r9, r4
 8004d8e:	2201      	movs	r2, #1
 8004d90:	4621      	mov	r1, r4
 8004d92:	f04f 33ff 	mov.w	r3, #4294967295
    for(i=0; i<headerLength; i++)
 8004d96:	4414      	add	r4, r2
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8004d98:	4650      	mov	r0, sl
 8004d9a:	f7fd feff 	bl	8002b9c <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 8004d9e:	45a1      	cmp	r9, r4
 8004da0:	d1f5      	bne.n	8004d8e <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 8004da2:	f1b8 0f00 	cmp.w	r8, #0
 8004da6:	d012      	beq.n	8004dce <readfromspi+0x76>
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8004da8:	2400      	movs	r4, #0
 8004daa:	f8df c038 	ldr.w	ip, [pc, #56]	@ 8004de4 <readfromspi+0x8c>
 8004dae:	eb05 0008 	add.w	r0, r5, r8
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 8004db2:	f8dc 1000 	ldr.w	r1, [ip]
 8004db6:	688a      	ldr	r2, [r1, #8]
 8004db8:	0792      	lsls	r2, r2, #30
 8004dba:	d5fc      	bpl.n	8004db6 <readfromspi+0x5e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8004dbc:	60cc      	str	r4, [r1, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 8004dbe:	688a      	ldr	r2, [r1, #8]
 8004dc0:	07d3      	lsls	r3, r2, #31
 8004dc2:	d5fc      	bpl.n	8004dbe <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 8004dc4:	68cb      	ldr	r3, [r1, #12]
 8004dc6:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 8004dca:	4285      	cmp	r5, r0
 8004dcc:	d1f1      	bne.n	8004db2 <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8004dce:	2201      	movs	r2, #1
 8004dd0:	2110      	movs	r1, #16
 8004dd2:	4805      	ldr	r0, [pc, #20]	@ (8004de8 <readfromspi+0x90>)
 8004dd4:	f7fc ff7c 	bl	8001cd0 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8004dd8:	4630      	mov	r0, r6
 8004dda:	f7ff ff70 	bl	8004cbe <decamutexoff>

    return 0;
} // end readfromspi()
 8004dde:	2000      	movs	r0, #0
 8004de0:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 8004de4:	20000204 	.word	0x20000204
 8004de8:	40010800 	.word	0x40010800

08004dec <__NVIC_EnableIRQ>:
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	4603      	mov	r3, r0
 8004df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	db0b      	blt.n	8004e16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dfe:	79fb      	ldrb	r3, [r7, #7]
 8004e00:	f003 021f 	and.w	r2, r3, #31
 8004e04:	4906      	ldr	r1, [pc, #24]	@ (8004e20 <__NVIC_EnableIRQ+0x34>)
 8004e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	2001      	movs	r0, #1
 8004e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bc80      	pop	{r7}
 8004e1e:	4770      	bx	lr
 8004e20:	e000e100 	.word	0xe000e100

08004e24 <__NVIC_DisableIRQ>:
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	db12      	blt.n	8004e5c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e36:	79fb      	ldrb	r3, [r7, #7]
 8004e38:	f003 021f 	and.w	r2, r3, #31
 8004e3c:	490a      	ldr	r1, [pc, #40]	@ (8004e68 <__NVIC_DisableIRQ+0x44>)
 8004e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e42:	095b      	lsrs	r3, r3, #5
 8004e44:	2001      	movs	r0, #1
 8004e46:	fa00 f202 	lsl.w	r2, r0, r2
 8004e4a:	3320      	adds	r3, #32
 8004e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004e50:	f3bf 8f4f 	dsb	sy
}
 8004e54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004e56:	f3bf 8f6f 	isb	sy
}
 8004e5a:	bf00      	nop
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bc80      	pop	{r7}
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	e000e100 	.word	0xe000e100

08004e6c <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(uint64_t usec)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	e9c7 0100 	strd	r0, r1, [r7]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 8004e76:	2100      	movs	r1, #0
 8004e78:	60f9      	str	r1, [r7, #12]
 8004e7a:	e012      	b.n	8004ea2 <usleep+0x36>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	60b9      	str	r1, [r7, #8]
 8004e80:	e004      	b.n	8004e8c <usleep+0x20>
        {
            __NOP();
 8004e82:	bf00      	nop
            __NOP();
 8004e84:	bf00      	nop
        for(j=0;j<2;j++)
 8004e86:	68b9      	ldr	r1, [r7, #8]
 8004e88:	3101      	adds	r1, #1
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	68b9      	ldr	r1, [r7, #8]
 8004e8e:	2901      	cmp	r1, #1
 8004e90:	bfd4      	ite	le
 8004e92:	2101      	movle	r1, #1
 8004e94:	2100      	movgt	r1, #0
 8004e96:	b2c9      	uxtb	r1, r1
 8004e98:	2900      	cmp	r1, #0
 8004e9a:	d1f2      	bne.n	8004e82 <usleep+0x16>
    for(i=0;i<usec;i++)
 8004e9c:	68f9      	ldr	r1, [r7, #12]
 8004e9e:	3101      	adds	r1, #1
 8004ea0:	60f9      	str	r1, [r7, #12]
 8004ea2:	68f9      	ldr	r1, [r7, #12]
 8004ea4:	17c8      	asrs	r0, r1, #31
 8004ea6:	460a      	mov	r2, r1
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004eae:	4282      	cmp	r2, r0
 8004eb0:	eb73 0101 	sbcs.w	r1, r3, r1
 8004eb4:	bf34      	ite	cc
 8004eb6:	2101      	movcc	r1, #1
 8004eb8:	2100      	movcs	r1, #0
 8004eba:	b2c9      	uxtb	r1, r1
 8004ebc:	2900      	cmp	r1, #0
 8004ebe:	d1dd      	bne.n	8004e7c <usleep+0x10>
        }
    }
    return 0;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr

08004ecc <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7fc fa1d 	bl	8001314 <HAL_Delay>
}
 8004eda:	bf00      	nop
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8004eec:	4a0a      	ldr	r2, [pc, #40]	@ (8004f18 <EXTI_GetITEnStatus+0x34>)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	095b      	lsrs	r3, r3, #5
 8004ef2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f003 031f 	and.w	r3, r3, #31
 8004efc:	fa22 f303 	lsr.w	r3, r2, r3
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	bf14      	ite	ne
 8004f08:	2301      	movne	r3, #1
 8004f0a:	2300      	moveq	r3, #0
 8004f0c:	b2db      	uxtb	r3, r3
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bc80      	pop	{r7}
 8004f16:	4770      	bx	lr
 8004f18:	e000e100 	.word	0xe000e100

08004f1c <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 8004f22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f26:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004f28:	2311      	movs	r3, #17
 8004f2a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8004f30:	463b      	mov	r3, r7
 8004f32:	4619      	mov	r1, r3
 8004f34:	480c      	ldr	r0, [pc, #48]	@ (8004f68 <reset_DW1000+0x4c>)
 8004f36:	f7fc fc3d 	bl	80017b4 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004f40:	4809      	ldr	r0, [pc, #36]	@ (8004f68 <reset_DW1000+0x4c>)
 8004f42:	f7fc fec5 	bl	8001cd0 <HAL_GPIO_WritePin>

    usleep(1);
 8004f46:	f04f 0001 	mov.w	r0, #1
 8004f4a:	f04f 0100 	mov.w	r1, #0
 8004f4e:	f7ff ff8d 	bl	8004e6c <usleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 8004f52:	2000      	movs	r0, #0
 8004f54:	f000 f80a 	bl	8004f6c <setup_DW1000RSTnIRQ>



    Sleep(2);
 8004f58:	2002      	movs	r0, #2
 8004f5a:	f7ff ffb7 	bl	8004ecc <Sleep>
}
 8004f5e:	bf00      	nop
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	40010c00 	.word	0x40010c00

08004f6c <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d015      	beq.n	8004fa6 <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8004f7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f7e:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f80:	4b17      	ldr	r3, [pc, #92]	@ (8004fe0 <setup_DW1000RSTnIRQ+0x74>)
 8004f82:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f84:	2300      	movs	r3, #0
 8004f86:	613b      	str	r3, [r7, #16]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8004f88:	f107 0308 	add.w	r3, r7, #8
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4815      	ldr	r0, [pc, #84]	@ (8004fe4 <setup_DW1000RSTnIRQ+0x78>)
 8004f90:	f7fc fc10 	bl	80017b4 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 8004f94:	2006      	movs	r0, #6
 8004f96:	f7fc fb1d 	bl	80015d4 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	2105      	movs	r1, #5
 8004f9e:	2006      	movs	r0, #6
 8004fa0:	f7fc faec 	bl	800157c <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 8004fa4:	e017      	b.n	8004fd6 <setup_DW1000RSTnIRQ+0x6a>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 8004fa6:	2006      	movs	r0, #6
 8004fa8:	f7fc fb2c 	bl	8001604 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8004fac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004fb0:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004fb2:	2311      	movs	r3, #17
 8004fb4:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8004fbe:	f107 0308 	add.w	r3, r7, #8
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	4807      	ldr	r0, [pc, #28]	@ (8004fe4 <setup_DW1000RSTnIRQ+0x78>)
 8004fc6:	f7fc fbf5 	bl	80017b4 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004fd0:	4804      	ldr	r0, [pc, #16]	@ (8004fe4 <setup_DW1000RSTnIRQ+0x78>)
 8004fd2:	f7fc fe7d 	bl	8001cd0 <HAL_GPIO_WritePin>
}
 8004fd6:	bf00      	nop
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	10110000 	.word	0x10110000
 8004fe4:	40010c00 	.word	0x40010c00

08004fe8 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004fec:	4b03      	ldr	r3, [pc, #12]	@ (8004ffc <port_set_dw1000_slowrate+0x14>)
 8004fee:	2220      	movs	r2, #32
 8004ff0:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8004ff2:	4802      	ldr	r0, [pc, #8]	@ (8004ffc <port_set_dw1000_slowrate+0x14>)
 8004ff4:	f7fd fc54 	bl	80028a0 <HAL_SPI_Init>
}
 8004ff8:	bf00      	nop
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	20000204 	.word	0x20000204

08005000 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005004:	4b03      	ldr	r3, [pc, #12]	@ (8005014 <port_set_dw1000_fastrate+0x14>)
 8005006:	2208      	movs	r2, #8
 8005008:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800500a:	4802      	ldr	r0, [pc, #8]	@ (8005014 <port_set_dw1000_fastrate+0x14>)
 800500c:	f7fd fc48 	bl	80028a0 <HAL_SPI_Init>
}
 8005010:	bf00      	nop
 8005012:	bd80      	pop	{r7, pc}
 8005014:	20000204 	.word	0x20000204

08005018 <HAL_GPIO_EXTI_Callback>:
/* @fn      HAL_GPIO_EXTI_Callback
 * @brief   IRQ HAL call-back for all EXTI configured lines
 *          i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	4603      	mov	r3, r0
 8005020:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == DW_RST_Pin)
 8005022:	88fb      	ldrh	r3, [r7, #6]
 8005024:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005028:	d103      	bne.n	8005032 <HAL_GPIO_EXTI_Callback+0x1a>
    {
        signalResetDone = 1;
 800502a:	4b06      	ldr	r3, [pc, #24]	@ (8005044 <HAL_GPIO_EXTI_Callback+0x2c>)
 800502c:	2201      	movs	r2, #1
 800502e:	601a      	str	r2, [r3, #0]
        process_deca_irq();
    }
    else
    {
    }
}
 8005030:	e004      	b.n	800503c <HAL_GPIO_EXTI_Callback+0x24>
    else if (GPIO_Pin == DW_IRQn_Pin)
 8005032:	88fb      	ldrh	r3, [r7, #6]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d101      	bne.n	800503c <HAL_GPIO_EXTI_Callback+0x24>
        process_deca_irq();
 8005038:	f000 f806 	bl	8005048 <process_deca_irq>
}
 800503c:	bf00      	nop
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	200002e4 	.word	0x200002e4

08005048 <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
    while(port_CheckEXT_IRQ() != 0)
 800504c:	e002      	b.n	8005054 <process_deca_irq+0xc>
    {

        port_deca_isr();
 800504e:	4b05      	ldr	r3, [pc, #20]	@ (8005064 <process_deca_irq+0x1c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4798      	blx	r3
    while(port_CheckEXT_IRQ() != 0)
 8005054:	f000 f81e 	bl	8005094 <port_CheckEXT_IRQ>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1f7      	bne.n	800504e <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 800505e:	bf00      	nop
 8005060:	bf00      	nop
 8005062:	bd80      	pop	{r7, pc}
 8005064:	200002e8 	.word	0x200002e8

08005068 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 800506c:	2017      	movs	r0, #23
 800506e:	f7ff fed9 	bl	8004e24 <__NVIC_DisableIRQ>
}
 8005072:	bf00      	nop
 8005074:	bd80      	pop	{r7, pc}

08005076 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 800507a:	2017      	movs	r0, #23
 800507c:	f7ff feb6 	bl	8004dec <__NVIC_EnableIRQ>
}
 8005080:	bf00      	nop
 8005082:	bd80      	pop	{r7, pc}

08005084 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8005088:	2017      	movs	r0, #23
 800508a:	f7ff ff2b 	bl	8004ee4 <EXTI_GetITEnStatus>
 800508e:	4603      	mov	r3, r0
}
 8005090:	4618      	mov	r0, r3
 8005092:	bd80      	pop	{r7, pc}

08005094 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DECAIRQ_GPIO, DW_IRQn_Pin);
 8005098:	2101      	movs	r1, #1
 800509a:	4803      	ldr	r0, [pc, #12]	@ (80050a8 <port_CheckEXT_IRQ+0x14>)
 800509c:	f7fc fdf8 	bl	8001c90 <HAL_GPIO_ReadPin>
 80050a0:	4603      	mov	r3, r0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	40010c00 	.word	0x40010c00

080050ac <get_tx_timestamp_u64>:
/**
 * \brief Получение временной метки TX в 64-битной переменной. Эта функция предполагает, что длина временных меток равна 40 битам, как для TX, так и для RX!
 * \return 64-битное значение считанной временной метки.
 */
uint64
get_tx_timestamp_u64(void) {
 80050ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80050b0:	b086      	sub	sp, #24
 80050b2:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 80050b4:	f04f 0200 	mov.w	r2, #0
 80050b8:	f04f 0300 	mov.w	r3, #0
 80050bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int i;
    dwt_readtxtimestamp(ts_tab);
 80050c0:	1d3b      	adds	r3, r7, #4
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7ff f986 	bl	80043d4 <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--) {
 80050c8:	2304      	movs	r3, #4
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	e01e      	b.n	800510c <get_tx_timestamp_u64+0x60>
        ts <<= 8;
 80050ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80050d2:	f04f 0200 	mov.w	r2, #0
 80050d6:	f04f 0300 	mov.w	r3, #0
 80050da:	020b      	lsls	r3, r1, #8
 80050dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80050e0:	0202      	lsls	r2, r0, #8
 80050e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ts |= ts_tab[i];
 80050e6:	1d3a      	adds	r2, r7, #4
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4413      	add	r3, r2
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2200      	movs	r2, #0
 80050f2:	461c      	mov	r4, r3
 80050f4:	4615      	mov	r5, r2
 80050f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050fa:	ea42 0804 	orr.w	r8, r2, r4
 80050fe:	ea43 0905 	orr.w	r9, r3, r5
 8005102:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for (i = 4; i >= 0; i--) {
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3b01      	subs	r3, #1
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b00      	cmp	r3, #0
 8005110:	dadd      	bge.n	80050ce <get_tx_timestamp_u64+0x22>
    }
    return ts;
 8005112:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8005116:	4610      	mov	r0, r2
 8005118:	4619      	mov	r1, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08005122 <get_rx_timestamp_u64>:
/**
 * \brief Получение временной метки RX в 64-битной переменной. Эта функция предполагает, что длина временных меток равна 40 битам, как для TX, так и для RX!
 * \return 64-битное значение считанной временной метки.
 */
uint64
get_rx_timestamp_u64(void) {
 8005122:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	f04f 0300 	mov.w	r3, #0
 8005132:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int i;
    dwt_readrxtimestamp(ts_tab);
 8005136:	1d3b      	adds	r3, r7, #4
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff f959 	bl	80043f0 <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--) {
 800513e:	2304      	movs	r3, #4
 8005140:	60fb      	str	r3, [r7, #12]
 8005142:	e01e      	b.n	8005182 <get_rx_timestamp_u64+0x60>
        ts <<= 8;
 8005144:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005148:	f04f 0200 	mov.w	r2, #0
 800514c:	f04f 0300 	mov.w	r3, #0
 8005150:	020b      	lsls	r3, r1, #8
 8005152:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005156:	0202      	lsls	r2, r0, #8
 8005158:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ts |= ts_tab[i];
 800515c:	1d3a      	adds	r2, r7, #4
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4413      	add	r3, r2
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2200      	movs	r2, #0
 8005168:	461c      	mov	r4, r3
 800516a:	4615      	mov	r5, r2
 800516c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005170:	ea42 0804 	orr.w	r8, r2, r4
 8005174:	ea43 0905 	orr.w	r9, r3, r5
 8005178:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for (i = 4; i >= 0; i--) {
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	3b01      	subs	r3, #1
 8005180:	60fb      	str	r3, [r7, #12]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	dadd      	bge.n	8005144 <get_rx_timestamp_u64+0x22>
    }
    return ts;
 8005188:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800518c:	4610      	mov	r0, r2
 800518e:	4619      	mov	r1, r3
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08005198 <initialise_dw1000>:
/**
 * \brief Функция для инициализации DW1000
 * \return TRUE: инициализация успешна
 */
uint8_t
initialise_dw1000(void) {
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
    reset_DW1000();
 800519c:	f7ff febe 	bl	8004f1c <reset_DW1000>

    port_set_dw1000_slowrate();
 80051a0:	f7ff ff22 	bl	8004fe8 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR) {
 80051a4:	2001      	movs	r0, #1
 80051a6:	f7fe fde5 	bl	8003d74 <dwt_initialise>
 80051aa:	4603      	mov	r3, r0
 80051ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b0:	d105      	bne.n	80051be <initialise_dw1000+0x26>
        terminal_print("Initialise dw1000 failed\r\n", strlen("Initialise dw1000 failed\r\n"));
 80051b2:	211a      	movs	r1, #26
 80051b4:	4804      	ldr	r0, [pc, #16]	@ (80051c8 <initialise_dw1000+0x30>)
 80051b6:	f000 fced 	bl	8005b94 <terminal_print>
        while (1) {};
 80051ba:	bf00      	nop
 80051bc:	e7fd      	b.n	80051ba <initialise_dw1000+0x22>
    }
    port_set_dw1000_fastrate();
 80051be:	f7ff ff1f 	bl	8005000 <port_set_dw1000_fastrate>

    return TRUE;
 80051c2:	2301      	movs	r3, #1
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	08008d74 	.word	0x08008d74

080051cc <configure_dw1000>:
/**
 * \brief Функция для конфигурирования DW1000
 * \return TRUE: конфигурирование успешно
 */
uint8_t
configure_dw1000(void) {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
    dwt_configure(&config);
 80051d0:	4804      	ldr	r0, [pc, #16]	@ (80051e4 <configure_dw1000+0x18>)
 80051d2:	f7fe ff25 	bl	8004020 <dwt_configure>
    dwt_setleds(1); /* Включить системные светодиоды (RX - красный, TX - синий) */
 80051d6:	2001      	movs	r0, #1
 80051d8:	f7ff faea 	bl	80047b0 <dwt_setleds>

    /* Возможно придется восстанавливать предыдущий panid, так как у tag и anchor он разный */
    //dwt_setpanid(0);
    //dwt_enableframefilter(DWT_FF_DATA_EN);

    return TRUE;
 80051dc:	2301      	movs	r3, #1
}
 80051de:	4618      	mov	r0, r3
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	20000010 	.word	0x20000010

080051e8 <uwb_receive_data>:
 * \param data_size  указатель на размер массива
 * \param rx_timeout таймаут ожидания приема (0 - без ожидания)
 * \return TRUE: данные получены успешно, FALSE: при приеме данных возникла ошибка
 */
uint8_t
uwb_receive_data(uint8_t rx_started, uint8_t *data, size_t *data_size, uint32_t rx_timeout) {
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60b9      	str	r1, [r7, #8]
 80051f0:	607a      	str	r2, [r7, #4]
 80051f2:	603b      	str	r3, [r7, #0]
 80051f4:	4603      	mov	r3, r0
 80051f6:	73fb      	strb	r3, [r7, #15]
    assert_param(data != NULL);
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d103      	bne.n	8005206 <uwb_receive_data+0x1e>
 80051fe:	2174      	movs	r1, #116	@ 0x74
 8005200:	4848      	ldr	r0, [pc, #288]	@ (8005324 <uwb_receive_data+0x13c>)
 8005202:	f7fb fd93 	bl	8000d2c <assert_failed>
    assert_param(data_size != NULL);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d103      	bne.n	8005214 <uwb_receive_data+0x2c>
 800520c:	2175      	movs	r1, #117	@ 0x75
 800520e:	4845      	ldr	r0, [pc, #276]	@ (8005324 <uwb_receive_data+0x13c>)
 8005210:	f7fb fd8c 	bl	8000d2c <assert_failed>

    if (rx_timeout != 0) {
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d004      	beq.n	8005224 <uwb_receive_data+0x3c>
        dwt_setrxtimeout(rx_timeout);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	b29b      	uxth	r3, r3
 800521e:	4618      	mov	r0, r3
 8005220:	f7ff fcb0 	bl	8004b84 <dwt_setrxtimeout>
    }

    if (rx_started == FALSE) {
 8005224:	7bfb      	ldrb	r3, [r7, #15]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d107      	bne.n	800523a <uwb_receive_data+0x52>
        if (dwt_rxenable(DWT_START_RX_IMMEDIATE) != DWT_SUCCESS) {
 800522a:	2000      	movs	r0, #0
 800522c:	f7ff fc68 	bl	8004b00 <dwt_rxenable>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <uwb_receive_data+0x52>
            return FALSE;
 8005236:	2300      	movs	r3, #0
 8005238:	e070      	b.n	800531c <uwb_receive_data+0x134>
        };
    }

    uint8_t result = FALSE;
 800523a:	2300      	movs	r3, #0
 800523c:	75fb      	strb	r3, [r7, #23]
    uint32_t status_reg = 0;
 800523e:	2300      	movs	r3, #0
 8005240:	613b      	str	r3, [r7, #16]

    while (1) {
        status_reg = dwt_read32bitreg(SYS_STATUS_ID);
 8005242:	2100      	movs	r1, #0
 8005244:	200f      	movs	r0, #15
 8005246:	f7ff f98c 	bl	8004562 <dwt_read32bitoffsetreg>
 800524a:	6138      	str	r0, [r7, #16]

        if (status_reg & SYS_STATUS_RXFCG) {
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d128      	bne.n	80052a8 <uwb_receive_data+0xc0>
            /* Прием успешен */
            break;
        }

        if (status_reg & SYS_STATUS_RXPTO) {
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d125      	bne.n	80052ac <uwb_receive_data+0xc4>
            /* Preamble detection timeout */
            break;
        }

        if (status_reg & SYS_STATUS_RXSFDTO) {
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d122      	bne.n	80052b0 <uwb_receive_data+0xc8>
            /* Receive SFD timeout */
            break;
        }

        if (status_reg & SYS_STATUS_RXRFTO) {
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d11f      	bne.n	80052b4 <uwb_receive_data+0xcc>
            /* Receive Frame Wait Timeout */
            break;
        }

        if (status_reg & SYS_STATUS_RXPHE) {
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d11c      	bne.n	80052b8 <uwb_receive_data+0xd0>
            /* Receiver PHY Header Error */
            break;
        }

        if (status_reg & SYS_STATUS_RXFCE) {
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d119      	bne.n	80052bc <uwb_receive_data+0xd4>
            /* Receiver FCS Error */
            break;
        }

        if (status_reg & SYS_STATUS_RXRFSL) {
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d116      	bne.n	80052c0 <uwb_receive_data+0xd8>
            /* Receiver Reed Solomon Frame Sync Loss */
            break;
        }

        if (status_reg & SYS_STATUS_AFFREJ) {
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d113      	bne.n	80052c4 <uwb_receive_data+0xdc>
            /* Automatic Frame Filtering rejection */
            break;
        }

        if (status_reg & SYS_STATUS_LDEERR) {
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d110      	bne.n	80052c8 <uwb_receive_data+0xe0>
        status_reg = dwt_read32bitreg(SYS_STATUS_ID);
 80052a6:	e7cc      	b.n	8005242 <uwb_receive_data+0x5a>
            break;
 80052a8:	bf00      	nop
 80052aa:	e00e      	b.n	80052ca <uwb_receive_data+0xe2>
            break;
 80052ac:	bf00      	nop
 80052ae:	e00c      	b.n	80052ca <uwb_receive_data+0xe2>
            break;
 80052b0:	bf00      	nop
 80052b2:	e00a      	b.n	80052ca <uwb_receive_data+0xe2>
            break;
 80052b4:	bf00      	nop
 80052b6:	e008      	b.n	80052ca <uwb_receive_data+0xe2>
            break;
 80052b8:	bf00      	nop
 80052ba:	e006      	b.n	80052ca <uwb_receive_data+0xe2>
            break;
 80052bc:	bf00      	nop
 80052be:	e004      	b.n	80052ca <uwb_receive_data+0xe2>
            break;
 80052c0:	bf00      	nop
 80052c2:	e002      	b.n	80052ca <uwb_receive_data+0xe2>
            break;
 80052c4:	bf00      	nop
 80052c6:	e000      	b.n	80052ca <uwb_receive_data+0xe2>
            /* Leading edge detection processing error */
            break;
 80052c8:	bf00      	nop
        }
    }

    if (status_reg & SYS_STATUS_RXFCG) {
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d019      	beq.n	8005308 <uwb_receive_data+0x120>
        *data_size = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 80052d4:	2100      	movs	r1, #0
 80052d6:	2010      	movs	r0, #16
 80052d8:	f7ff f943 	bl	8004562 <dwt_read32bitoffsetreg>
 80052dc:	4603      	mov	r3, r0
 80052de:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	601a      	str	r2, [r3, #0]

        dwt_readrxdata(data, *data_size, 0);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	2200      	movs	r2, #0
 80052ee:	4619      	mov	r1, r3
 80052f0:	68b8      	ldr	r0, [r7, #8]
 80052f2:	f7ff f85d 	bl	80043b0 <dwt_readrxdata>

        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 80052f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80052fa:	2100      	movs	r1, #0
 80052fc:	200f      	movs	r0, #15
 80052fe:	f7ff f9b4 	bl	800466a <dwt_write32bitoffsetreg>

        result = TRUE;
 8005302:	2301      	movs	r3, #1
 8005304:	75fb      	strb	r3, [r7, #23]
 8005306:	e008      	b.n	800531a <uwb_receive_data+0x132>
    } else {
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8005308:	4a07      	ldr	r2, [pc, #28]	@ (8005328 <uwb_receive_data+0x140>)
 800530a:	2100      	movs	r1, #0
 800530c:	200f      	movs	r0, #15
 800530e:	f7ff f9ac 	bl	800466a <dwt_write32bitoffsetreg>

        dwt_rxreset();
 8005312:	f7ff fc77 	bl	8004c04 <dwt_rxreset>

        result = FALSE;
 8005316:	2300      	movs	r3, #0
 8005318:	75fb      	strb	r3, [r7, #23]
    }

    return result;
 800531a:	7dfb      	ldrb	r3, [r7, #23]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	08008d90 	.word	0x08008d90
 8005328:	24279000 	.word	0x24279000

0800532c <uwb_transmit_data>:
 * \param response_expected включить режим RX, после передачи данных? (TRUE: да, FALSE: нет)
 * \return TRUE: данные получены успешно, FALSE: при приеме данных возникла ошибка
 */
uint8_t
uwb_transmit_data(uint8_t *data, size_t data_size, uint32_t tx_delay, uint32_t rx_delay,
                  uint8_t response_expected) {
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	603b      	str	r3, [r7, #0]
    assert_param(data != NULL);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d103      	bne.n	8005348 <uwb_transmit_data+0x1c>
 8005340:	21d4      	movs	r1, #212	@ 0xd4
 8005342:	482a      	ldr	r0, [pc, #168]	@ (80053ec <uwb_transmit_data+0xc0>)
 8005344:	f7fb fcf2 	bl	8000d2c <assert_failed>

    uint8_t result = FALSE;
 8005348:	2300      	movs	r3, #0
 800534a:	75fb      	strb	r3, [r7, #23]
    uint8_t tx_mode = 0;
 800534c:	2300      	movs	r3, #0
 800534e:	75bb      	strb	r3, [r7, #22]

    if (response_expected == TRUE) {
 8005350:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d102      	bne.n	800535e <uwb_transmit_data+0x32>
        dwt_setrxaftertxdelay(rx_delay);
 8005358:	6838      	ldr	r0, [r7, #0]
 800535a:	f7ff fa0d 	bl	8004778 <dwt_setrxaftertxdelay>
    }

    do {
        if (dwt_writetxdata(data_size, data, 0) != DWT_SUCCESS) {
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	b29b      	uxth	r3, r3
 8005362:	2200      	movs	r2, #0
 8005364:	68f9      	ldr	r1, [r7, #12]
 8005366:	4618      	mov	r0, r3
 8005368:	f7fe ffe3 	bl	8004332 <dwt_writetxdata>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d122      	bne.n	80053b8 <uwb_transmit_data+0x8c>
            break;
        }

        dwt_writetxfctrl(data_size, 0, 0);
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	b29b      	uxth	r3, r3
 8005376:	2200      	movs	r2, #0
 8005378:	2100      	movs	r1, #0
 800537a:	4618      	mov	r0, r3
 800537c:	f7fe fff8 	bl	8004370 <dwt_writetxfctrl>

        if (tx_delay > 0) {
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d006      	beq.n	8005394 <uwb_transmit_data+0x68>
            dwt_setdelayedtrxtime(tx_delay);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7ff fb14 	bl	80049b4 <dwt_setdelayedtrxtime>
            tx_mode |= DWT_START_TX_DELAYED;
 800538c:	7dbb      	ldrb	r3, [r7, #22]
 800538e:	f043 0301 	orr.w	r3, r3, #1
 8005392:	75bb      	strb	r3, [r7, #22]
        } else {
            tx_mode |= DWT_START_TX_IMMEDIATE;
        }

        if (response_expected == TRUE) {
 8005394:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d103      	bne.n	80053a4 <uwb_transmit_data+0x78>
            tx_mode |= DWT_RESPONSE_EXPECTED;
 800539c:	7dbb      	ldrb	r3, [r7, #22]
 800539e:	f043 0302 	orr.w	r3, r3, #2
 80053a2:	75bb      	strb	r3, [r7, #22]
        }

        if (dwt_starttx(tx_mode) != DWT_SUCCESS) {
 80053a4:	7dbb      	ldrb	r3, [r7, #22]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff fb12 	bl	80049d0 <dwt_starttx>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d104      	bne.n	80053bc <uwb_transmit_data+0x90>
            break;
        }

        result = TRUE;
 80053b2:	2301      	movs	r3, #1
 80053b4:	75fb      	strb	r3, [r7, #23]
 80053b6:	e002      	b.n	80053be <uwb_transmit_data+0x92>
            break;
 80053b8:	bf00      	nop
 80053ba:	e000      	b.n	80053be <uwb_transmit_data+0x92>
            break;
 80053bc:	bf00      	nop
    } while (0);

    if (result == TRUE) {
 80053be:	7dfb      	ldrb	r3, [r7, #23]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d10e      	bne.n	80053e2 <uwb_transmit_data+0xb6>
        while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS)) {};
 80053c4:	bf00      	nop
 80053c6:	2100      	movs	r1, #0
 80053c8:	200f      	movs	r0, #15
 80053ca:	f7ff f8ca 	bl	8004562 <dwt_read32bitoffsetreg>
 80053ce:	4603      	mov	r3, r0
 80053d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0f6      	beq.n	80053c6 <uwb_transmit_data+0x9a>

        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 80053d8:	2280      	movs	r2, #128	@ 0x80
 80053da:	2100      	movs	r1, #0
 80053dc:	200f      	movs	r0, #15
 80053de:	f7ff f944 	bl	800466a <dwt_write32bitoffsetreg>
    }

    return result;
 80053e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3718      	adds	r7, #24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	08008d90 	.word	0x08008d90

080053f0 <poll_frame_parser>:
 * \param data указатель на массив данных
 * \param size размер массива
 * \return TRUE: преобразование успешно, FALSE: преобразование неудачно
 */
uint8_t
poll_frame_parser(const uint8_t *data, size_t size) {
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
    assert_param(data != NULL);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d103      	bne.n	8005408 <poll_frame_parser+0x18>
 8005400:	2160      	movs	r1, #96	@ 0x60
 8005402:	483a      	ldr	r0, [pc, #232]	@ (80054ec <poll_frame_parser+0xfc>)
 8005404:	f7fb fc92 	bl	8000d2c <assert_failed>

    if (size != POLL_FRAME_SIZE) {
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b0c      	cmp	r3, #12
 800540c:	d001      	beq.n	8005412 <poll_frame_parser+0x22>
        return FALSE;
 800540e:	2300      	movs	r3, #0
 8005410:	e068      	b.n	80054e4 <poll_frame_parser+0xf4>
    }

    uint16_t data_crc = bytes_to_uint16(data + 10);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	330a      	adds	r3, #10
 8005416:	4618      	mov	r0, r3
 8005418:	f000 fc92 	bl	8005d40 <bytes_to_uint16>
 800541c:	4603      	mov	r3, r0
 800541e:	81fb      	strh	r3, [r7, #14]
    uint16_t calculated_crc = crc16_kermit(data, size - 2);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	3b02      	subs	r3, #2
 8005424:	4619      	mov	r1, r3
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fd5c 	bl	8005ee4 <crc16_kermit>
 800542c:	4603      	mov	r3, r0
 800542e:	81bb      	strh	r3, [r7, #12]

    global_poll_frame.frame_control = swap_endian16(bytes_to_uint16(data));
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 fc85 	bl	8005d40 <bytes_to_uint16>
 8005436:	4603      	mov	r3, r0
 8005438:	4618      	mov	r0, r3
 800543a:	f000 fd3e 	bl	8005eba <swap_endian16>
 800543e:	4603      	mov	r3, r0
 8005440:	461a      	mov	r2, r3
 8005442:	4b2b      	ldr	r3, [pc, #172]	@ (80054f0 <poll_frame_parser+0x100>)
 8005444:	801a      	strh	r2, [r3, #0]
    global_poll_frame.sequence_number = data[2];
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	3302      	adds	r3, #2
 800544a:	781a      	ldrb	r2, [r3, #0]
 800544c:	4b28      	ldr	r3, [pc, #160]	@ (80054f0 <poll_frame_parser+0x100>)
 800544e:	709a      	strb	r2, [r3, #2]
    global_poll_frame.pan_id = swap_endian16(bytes_to_uint16(data + 3));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3303      	adds	r3, #3
 8005454:	4618      	mov	r0, r3
 8005456:	f000 fc73 	bl	8005d40 <bytes_to_uint16>
 800545a:	4603      	mov	r3, r0
 800545c:	4618      	mov	r0, r3
 800545e:	f000 fd2c 	bl	8005eba <swap_endian16>
 8005462:	4603      	mov	r3, r0
 8005464:	461a      	mov	r2, r3
 8005466:	4b22      	ldr	r3, [pc, #136]	@ (80054f0 <poll_frame_parser+0x100>)
 8005468:	809a      	strh	r2, [r3, #4]
    global_poll_frame.destination_address = bytes_to_uint16(data + 5);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	3305      	adds	r3, #5
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fc66 	bl	8005d40 <bytes_to_uint16>
 8005474:	4603      	mov	r3, r0
 8005476:	461a      	mov	r2, r3
 8005478:	4b1d      	ldr	r3, [pc, #116]	@ (80054f0 <poll_frame_parser+0x100>)
 800547a:	80da      	strh	r2, [r3, #6]
    global_poll_frame.source_address = bytes_to_uint16(data + 7);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3307      	adds	r3, #7
 8005480:	4618      	mov	r0, r3
 8005482:	f000 fc5d 	bl	8005d40 <bytes_to_uint16>
 8005486:	4603      	mov	r3, r0
 8005488:	461a      	mov	r2, r3
 800548a:	4b19      	ldr	r3, [pc, #100]	@ (80054f0 <poll_frame_parser+0x100>)
 800548c:	811a      	strh	r2, [r3, #8]
    global_poll_frame.function_code = data[9];
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	3309      	adds	r3, #9
 8005492:	781a      	ldrb	r2, [r3, #0]
 8005494:	4b16      	ldr	r3, [pc, #88]	@ (80054f0 <poll_frame_parser+0x100>)
 8005496:	729a      	strb	r2, [r3, #10]
    global_poll_frame.frame_checksum = swap_endian16(data_crc);
 8005498:	89fb      	ldrh	r3, [r7, #14]
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fd0d 	bl	8005eba <swap_endian16>
 80054a0:	4603      	mov	r3, r0
 80054a2:	461a      	mov	r2, r3
 80054a4:	4b12      	ldr	r3, [pc, #72]	@ (80054f0 <poll_frame_parser+0x100>)
 80054a6:	819a      	strh	r2, [r3, #12]

    if (global_poll_frame.frame_control != POLL_RESPONSE_FINAL_FRAME_CONTROL) {
 80054a8:	4b11      	ldr	r3, [pc, #68]	@ (80054f0 <poll_frame_parser+0x100>)
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	f648 0241 	movw	r2, #34881	@ 0x8841
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d001      	beq.n	80054b8 <poll_frame_parser+0xc8>
        return FALSE;
 80054b4:	2300      	movs	r3, #0
 80054b6:	e015      	b.n	80054e4 <poll_frame_parser+0xf4>
    }

    if (global_poll_frame.pan_id != PAN_ID) {
 80054b8:	4b0d      	ldr	r3, [pc, #52]	@ (80054f0 <poll_frame_parser+0x100>)
 80054ba:	889b      	ldrh	r3, [r3, #4]
 80054bc:	f64d 62ca 	movw	r2, #57034	@ 0xdeca
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d001      	beq.n	80054c8 <poll_frame_parser+0xd8>
        return FALSE;
 80054c4:	2300      	movs	r3, #0
 80054c6:	e00d      	b.n	80054e4 <poll_frame_parser+0xf4>
    }

    if (global_poll_frame.function_code != POLL_FUNCTION_CODE) {
 80054c8:	4b09      	ldr	r3, [pc, #36]	@ (80054f0 <poll_frame_parser+0x100>)
 80054ca:	7a9b      	ldrb	r3, [r3, #10]
 80054cc:	2b61      	cmp	r3, #97	@ 0x61
 80054ce:	d001      	beq.n	80054d4 <poll_frame_parser+0xe4>
        return FALSE;
 80054d0:	2300      	movs	r3, #0
 80054d2:	e007      	b.n	80054e4 <poll_frame_parser+0xf4>
    }

    if (global_poll_frame.frame_checksum != calculated_crc) {
 80054d4:	4b06      	ldr	r3, [pc, #24]	@ (80054f0 <poll_frame_parser+0x100>)
 80054d6:	899b      	ldrh	r3, [r3, #12]
 80054d8:	89ba      	ldrh	r2, [r7, #12]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d001      	beq.n	80054e2 <poll_frame_parser+0xf2>
        return FALSE;
 80054de:	2300      	movs	r3, #0
 80054e0:	e000      	b.n	80054e4 <poll_frame_parser+0xf4>
    }

    return TRUE;
 80054e2:	2301      	movs	r3, #1
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	08008db0 	.word	0x08008db0
 80054f0:	200002ec 	.word	0x200002ec

080054f4 <final_frame_parser>:
 * \param data указатель на массив данных
 * \param size размер массива
 * \return TRUE: преобразование успешно, FALSE: преобразование неудачно
 */
uint8_t
final_frame_parser(const uint8_t *data, size_t size) {
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
    assert_param(data != NULL);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d103      	bne.n	800550c <final_frame_parser+0x18>
 8005504:	21ba      	movs	r1, #186	@ 0xba
 8005506:	4844      	ldr	r0, [pc, #272]	@ (8005618 <final_frame_parser+0x124>)
 8005508:	f7fb fc10 	bl	8000d2c <assert_failed>

    if (size != FINAL_FRAME_SIZE) {
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	2b1c      	cmp	r3, #28
 8005510:	d001      	beq.n	8005516 <final_frame_parser+0x22>
        return FALSE;
 8005512:	2300      	movs	r3, #0
 8005514:	e07c      	b.n	8005610 <final_frame_parser+0x11c>
    }

    uint16_t data_crc = bytes_to_uint16(data + 26);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	331a      	adds	r3, #26
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fc10 	bl	8005d40 <bytes_to_uint16>
 8005520:	4603      	mov	r3, r0
 8005522:	81fb      	strh	r3, [r7, #14]
    uint16_t calculated_crc = crc16_kermit(data, size - 2);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	3b02      	subs	r3, #2
 8005528:	4619      	mov	r1, r3
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fcda 	bl	8005ee4 <crc16_kermit>
 8005530:	4603      	mov	r3, r0
 8005532:	81bb      	strh	r3, [r7, #12]

    global_final_frame.frame_control = swap_endian16(bytes_to_uint16(data));
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 fc03 	bl	8005d40 <bytes_to_uint16>
 800553a:	4603      	mov	r3, r0
 800553c:	4618      	mov	r0, r3
 800553e:	f000 fcbc 	bl	8005eba <swap_endian16>
 8005542:	4603      	mov	r3, r0
 8005544:	461a      	mov	r2, r3
 8005546:	4b35      	ldr	r3, [pc, #212]	@ (800561c <final_frame_parser+0x128>)
 8005548:	801a      	strh	r2, [r3, #0]
    global_final_frame.sequence_number = data[2];
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	3302      	adds	r3, #2
 800554e:	781a      	ldrb	r2, [r3, #0]
 8005550:	4b32      	ldr	r3, [pc, #200]	@ (800561c <final_frame_parser+0x128>)
 8005552:	709a      	strb	r2, [r3, #2]
    global_final_frame.pan_id = swap_endian16(bytes_to_uint16(data + 3));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3303      	adds	r3, #3
 8005558:	4618      	mov	r0, r3
 800555a:	f000 fbf1 	bl	8005d40 <bytes_to_uint16>
 800555e:	4603      	mov	r3, r0
 8005560:	4618      	mov	r0, r3
 8005562:	f000 fcaa 	bl	8005eba <swap_endian16>
 8005566:	4603      	mov	r3, r0
 8005568:	461a      	mov	r2, r3
 800556a:	4b2c      	ldr	r3, [pc, #176]	@ (800561c <final_frame_parser+0x128>)
 800556c:	809a      	strh	r2, [r3, #4]
    global_final_frame.destination_address = bytes_to_uint16(data + 5);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3305      	adds	r3, #5
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fbe4 	bl	8005d40 <bytes_to_uint16>
 8005578:	4603      	mov	r3, r0
 800557a:	461a      	mov	r2, r3
 800557c:	4b27      	ldr	r3, [pc, #156]	@ (800561c <final_frame_parser+0x128>)
 800557e:	80da      	strh	r2, [r3, #6]
    global_final_frame.source_address = bytes_to_uint16(data + 7);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3307      	adds	r3, #7
 8005584:	4618      	mov	r0, r3
 8005586:	f000 fbdb 	bl	8005d40 <bytes_to_uint16>
 800558a:	4603      	mov	r3, r0
 800558c:	461a      	mov	r2, r3
 800558e:	4b23      	ldr	r3, [pc, #140]	@ (800561c <final_frame_parser+0x128>)
 8005590:	811a      	strh	r2, [r3, #8]
    global_final_frame.function_code = data[9];
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	3309      	adds	r3, #9
 8005596:	781a      	ldrb	r2, [r3, #0]
 8005598:	4b20      	ldr	r3, [pc, #128]	@ (800561c <final_frame_parser+0x128>)
 800559a:	729a      	strb	r2, [r3, #10]
    global_final_frame.resp_rx_time_minus_poll_tx_time = bytes_to_uint64(data + 10);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	330a      	adds	r3, #10
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 fbf2 	bl	8005d8a <bytes_to_uint64>
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	491c      	ldr	r1, [pc, #112]	@ (800561c <final_frame_parser+0x128>)
 80055ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
    global_final_frame.final_tx_time_minus_resp_rx_time = bytes_to_uint64(data + 18);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3312      	adds	r3, #18
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fbe8 	bl	8005d8a <bytes_to_uint64>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	4917      	ldr	r1, [pc, #92]	@ (800561c <final_frame_parser+0x128>)
 80055c0:	e9c1 2306 	strd	r2, r3, [r1, #24]

    global_final_frame.frame_checksum = swap_endian16(data_crc);
 80055c4:	89fb      	ldrh	r3, [r7, #14]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fc77 	bl	8005eba <swap_endian16>
 80055cc:	4603      	mov	r3, r0
 80055ce:	461a      	mov	r2, r3
 80055d0:	4b12      	ldr	r3, [pc, #72]	@ (800561c <final_frame_parser+0x128>)
 80055d2:	841a      	strh	r2, [r3, #32]

    if (global_final_frame.frame_control != POLL_RESPONSE_FINAL_FRAME_CONTROL) {
 80055d4:	4b11      	ldr	r3, [pc, #68]	@ (800561c <final_frame_parser+0x128>)
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	f648 0241 	movw	r2, #34881	@ 0x8841
 80055dc:	4293      	cmp	r3, r2
 80055de:	d001      	beq.n	80055e4 <final_frame_parser+0xf0>
        return FALSE;
 80055e0:	2300      	movs	r3, #0
 80055e2:	e015      	b.n	8005610 <final_frame_parser+0x11c>
    }

    if (global_final_frame.pan_id != PAN_ID) {
 80055e4:	4b0d      	ldr	r3, [pc, #52]	@ (800561c <final_frame_parser+0x128>)
 80055e6:	889b      	ldrh	r3, [r3, #4]
 80055e8:	f64d 62ca 	movw	r2, #57034	@ 0xdeca
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d001      	beq.n	80055f4 <final_frame_parser+0x100>
        return FALSE;
 80055f0:	2300      	movs	r3, #0
 80055f2:	e00d      	b.n	8005610 <final_frame_parser+0x11c>
    }

    if (global_final_frame.function_code != FINAL_FUNCTION_CODE) {
 80055f4:	4b09      	ldr	r3, [pc, #36]	@ (800561c <final_frame_parser+0x128>)
 80055f6:	7a9b      	ldrb	r3, [r3, #10]
 80055f8:	2b69      	cmp	r3, #105	@ 0x69
 80055fa:	d001      	beq.n	8005600 <final_frame_parser+0x10c>
        return FALSE;
 80055fc:	2300      	movs	r3, #0
 80055fe:	e007      	b.n	8005610 <final_frame_parser+0x11c>
    }

    if (global_final_frame.frame_checksum != calculated_crc) {
 8005600:	4b06      	ldr	r3, [pc, #24]	@ (800561c <final_frame_parser+0x128>)
 8005602:	8c1b      	ldrh	r3, [r3, #32]
 8005604:	89ba      	ldrh	r2, [r7, #12]
 8005606:	429a      	cmp	r2, r3
 8005608:	d001      	beq.n	800560e <final_frame_parser+0x11a>
        return FALSE;
 800560a:	2300      	movs	r3, #0
 800560c:	e000      	b.n	8005610 <final_frame_parser+0x11c>
    }

    return TRUE;
 800560e:	2301      	movs	r3, #1
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	08008db0 	.word	0x08008db0
 800561c:	20000320 	.word	0x20000320

08005620 <response_frame_builder>:
 * \param data указатель на массив данных
 * \param size указатель на размер массива
 * \return TRUE: преобразование успешно
 */
uint8_t
response_frame_builder(uint8_t *data, size_t *size) {
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
    assert_param(data != NULL);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d104      	bne.n	800563a <response_frame_builder+0x1a>
 8005630:	f240 112d 	movw	r1, #301	@ 0x12d
 8005634:	4825      	ldr	r0, [pc, #148]	@ (80056cc <response_frame_builder+0xac>)
 8005636:	f7fb fb79 	bl	8000d2c <assert_failed>
    assert_param(size != NULL);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d104      	bne.n	800564a <response_frame_builder+0x2a>
 8005640:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8005644:	4821      	ldr	r0, [pc, #132]	@ (80056cc <response_frame_builder+0xac>)
 8005646:	f7fb fb71 	bl	8000d2c <assert_failed>

    uint16_to_bytes(swap_endian16(global_response_frame.frame_control), data);   /* 2 байта */
 800564a:	4b21      	ldr	r3, [pc, #132]	@ (80056d0 <response_frame_builder+0xb0>)
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fc33 	bl	8005eba <swap_endian16>
 8005654:	4603      	mov	r3, r0
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	4618      	mov	r0, r3
 800565a:	f000 fbd3 	bl	8005e04 <uint16_to_bytes>
    data[2] = global_response_frame.sequence_number;                             /* 1 байт */
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	3302      	adds	r3, #2
 8005662:	4a1b      	ldr	r2, [pc, #108]	@ (80056d0 <response_frame_builder+0xb0>)
 8005664:	7892      	ldrb	r2, [r2, #2]
 8005666:	701a      	strb	r2, [r3, #0]
    uint16_to_bytes(swap_endian16(global_response_frame.pan_id), data + 3);      /* 2 байта */
 8005668:	4b19      	ldr	r3, [pc, #100]	@ (80056d0 <response_frame_builder+0xb0>)
 800566a:	889b      	ldrh	r3, [r3, #4]
 800566c:	4618      	mov	r0, r3
 800566e:	f000 fc24 	bl	8005eba <swap_endian16>
 8005672:	4603      	mov	r3, r0
 8005674:	461a      	mov	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	3303      	adds	r3, #3
 800567a:	4619      	mov	r1, r3
 800567c:	4610      	mov	r0, r2
 800567e:	f000 fbc1 	bl	8005e04 <uint16_to_bytes>
    uint16_to_bytes(global_response_frame.destination_address, data + 5);        /* 2 байта */
 8005682:	4b13      	ldr	r3, [pc, #76]	@ (80056d0 <response_frame_builder+0xb0>)
 8005684:	88da      	ldrh	r2, [r3, #6]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	3305      	adds	r3, #5
 800568a:	4619      	mov	r1, r3
 800568c:	4610      	mov	r0, r2
 800568e:	f000 fbb9 	bl	8005e04 <uint16_to_bytes>
    uint16_to_bytes(global_response_frame.source_address, data + 7);             /* 2 байта */
 8005692:	4b0f      	ldr	r3, [pc, #60]	@ (80056d0 <response_frame_builder+0xb0>)
 8005694:	891a      	ldrh	r2, [r3, #8]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	3307      	adds	r3, #7
 800569a:	4619      	mov	r1, r3
 800569c:	4610      	mov	r0, r2
 800569e:	f000 fbb1 	bl	8005e04 <uint16_to_bytes>
    data[9] = global_response_frame.function_code;                               /* 1 байт */
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	3309      	adds	r3, #9
 80056a6:	4a0a      	ldr	r2, [pc, #40]	@ (80056d0 <response_frame_builder+0xb0>)
 80056a8:	7a92      	ldrb	r2, [r2, #10]
 80056aa:	701a      	strb	r2, [r3, #0]
    uint64_to_bytes(global_response_frame.calculated_time_of_flight, data + 10); /* 8 байт */
 80056ac:	4b08      	ldr	r3, [pc, #32]	@ (80056d0 <response_frame_builder+0xb0>)
 80056ae:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	330a      	adds	r3, #10
 80056b6:	461a      	mov	r2, r3
 80056b8:	f000 fbcb 	bl	8005e52 <uint64_to_bytes>

    *size = RESPONSE_FRAME_SIZE;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2214      	movs	r2, #20
 80056c0:	601a      	str	r2, [r3, #0]

    return TRUE;
 80056c2:	2301      	movs	r3, #1
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	08008db0 	.word	0x08008db0
 80056d0:	20000300 	.word	0x20000300
 80056d4:	00000000 	.word	0x00000000

080056d8 <anchor_loop>:
#include "fsm.h"

uint8_t
anchor_loop(void) {
 80056d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056dc:	b0c0      	sub	sp, #256	@ 0x100
 80056de:	af02      	add	r7, sp, #8
    terminal_print("Device type: ANCHOR\r\n", strlen("Device type: ANCHOR\r\n"));
 80056e0:	2115      	movs	r1, #21
 80056e2:	486a      	ldr	r0, [pc, #424]	@ (800588c <anchor_loop+0x1b4>)
 80056e4:	f000 fa56 	bl	8005b94 <terminal_print>

    uint8_t tx_buffer[TX_RX_BUFFER_SIZE] = {0};
 80056e8:	2300      	movs	r3, #0
 80056ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80056ec:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	605a      	str	r2, [r3, #4]
 80056f6:	609a      	str	r2, [r3, #8]
 80056f8:	60da      	str	r2, [r3, #12]
 80056fa:	611a      	str	r2, [r3, #16]
 80056fc:	615a      	str	r2, [r3, #20]
 80056fe:	619a      	str	r2, [r3, #24]
    size_t tx_buffer_size = 0;
 8005700:	2300      	movs	r3, #0
 8005702:	66fb      	str	r3, [r7, #108]	@ 0x6c

    uint8_t rx_buffer[TX_RX_BUFFER_SIZE] = {0};
 8005704:	2300      	movs	r3, #0
 8005706:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005708:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800570c:	2200      	movs	r2, #0
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	605a      	str	r2, [r3, #4]
 8005712:	609a      	str	r2, [r3, #8]
 8005714:	60da      	str	r2, [r3, #12]
 8005716:	611a      	str	r2, [r3, #16]
 8005718:	615a      	str	r2, [r3, #20]
 800571a:	619a      	str	r2, [r3, #24]
    size_t rx_buffer_size = 0;
 800571c:	2300      	movs	r3, #0
 800571e:	64bb      	str	r3, [r7, #72]	@ 0x48

    uint8_t sequence_number = 0;
 8005720:	2300      	movs	r3, #0
 8005722:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7

    anchor_fsm_state_t anchor_fsm_state = ANCHOR_FSM_IDLE;
 8005726:	2300      	movs	r3, #0
 8005728:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7

    uint64_t poll_rx_ts, response_tx_time, response_tx_ts, final_rx_ts;
    double tof, distance;

    while (1) {
        switch (anchor_fsm_state) {
 800572c:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 8005730:	2b06      	cmp	r3, #6
 8005732:	f200 8198 	bhi.w	8005a66 <anchor_loop+0x38e>
 8005736:	a201      	add	r2, pc, #4	@ (adr r2, 800573c <anchor_loop+0x64>)
 8005738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573c:	08005759 	.word	0x08005759
 8005740:	08005761 	.word	0x08005761
 8005744:	08005769 	.word	0x08005769
 8005748:	08005771 	.word	0x08005771
 800574c:	080057bd 	.word	0x080057bd
 8005750:	0800584f 	.word	0x0800584f
 8005754:	08005a5f 	.word	0x08005a5f
            case ANCHOR_FSM_IDLE: {
                anchor_fsm_state = ANCHOR_FSM_WAIT_BLINK;
 8005758:	2301      	movs	r3, #1
 800575a:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
                break;
 800575e:	e186      	b.n	8005a6e <anchor_loop+0x396>
            };
            case ANCHOR_FSM_WAIT_BLINK: {
                anchor_fsm_state = ANCHOR_FSM_SEND_RANGING_INIT;
 8005760:	2302      	movs	r3, #2
 8005762:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
                break;
 8005766:	e182      	b.n	8005a6e <anchor_loop+0x396>
            };
            case ANCHOR_FSM_SEND_RANGING_INIT: {
                anchor_fsm_state = ANCHOR_FSM_WAIT_POLL;
 8005768:	2303      	movs	r3, #3
 800576a:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
                break;
 800576e:	e17e      	b.n	8005a6e <anchor_loop+0x396>
            };
            case ANCHOR_FSM_WAIT_POLL: {
                if (uwb_receive_data(FALSE, rx_buffer, &rx_buffer_size, RESPONSE_RX_TIMEOUT_UUS) == FALSE) {
 8005770:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8005774:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8005778:	f242 7310 	movw	r3, #10000	@ 0x2710
 800577c:	2000      	movs	r0, #0
 800577e:	f7ff fd33 	bl	80051e8 <uwb_receive_data>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d103      	bne.n	8005790 <anchor_loop+0xb8>
                    anchor_fsm_state = ANCHOR_FSM_IDLE;
 8005788:	2300      	movs	r3, #0
 800578a:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
                    break;
 800578e:	e16e      	b.n	8005a6e <anchor_loop+0x396>
                }

                if (poll_frame_parser(rx_buffer, rx_buffer_size) == FALSE) {
 8005790:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005792:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005796:	4611      	mov	r1, r2
 8005798:	4618      	mov	r0, r3
 800579a:	f7ff fe29 	bl	80053f0 <poll_frame_parser>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d103      	bne.n	80057ac <anchor_loop+0xd4>
                    anchor_fsm_state = ANCHOR_FSM_IDLE;
 80057a4:	2300      	movs	r3, #0
 80057a6:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
                    break;
 80057aa:	e160      	b.n	8005a6e <anchor_loop+0x396>
                }

                poll_rx_ts = get_rx_timestamp_u64();
 80057ac:	f7ff fcb9 	bl	8005122 <get_rx_timestamp_u64>
 80057b0:	e9c7 013a 	strd	r0, r1, [r7, #232]	@ 0xe8

                anchor_fsm_state = ANCHOR_FSM_SEND_RESPONSE;
 80057b4:	2304      	movs	r3, #4
 80057b6:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
                break;
 80057ba:	e158      	b.n	8005a6e <anchor_loop+0x396>
            };
            case ANCHOR_FSM_SEND_RESPONSE: {
                global_response_frame.frame_control = POLL_RESPONSE_FINAL_FRAME_CONTROL;
 80057bc:	4b34      	ldr	r3, [pc, #208]	@ (8005890 <anchor_loop+0x1b8>)
 80057be:	f648 0241 	movw	r2, #34881	@ 0x8841
 80057c2:	801a      	strh	r2, [r3, #0]
                global_response_frame.sequence_number = sequence_number;
 80057c4:	4a32      	ldr	r2, [pc, #200]	@ (8005890 <anchor_loop+0x1b8>)
 80057c6:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 80057ca:	7093      	strb	r3, [r2, #2]
                global_response_frame.pan_id = PAN_ID;
 80057cc:	4b30      	ldr	r3, [pc, #192]	@ (8005890 <anchor_loop+0x1b8>)
 80057ce:	f64d 62ca 	movw	r2, #57034	@ 0xdeca
 80057d2:	809a      	strh	r2, [r3, #4]
                global_response_frame.destination_address = 1;
 80057d4:	4b2e      	ldr	r3, [pc, #184]	@ (8005890 <anchor_loop+0x1b8>)
 80057d6:	2201      	movs	r2, #1
 80057d8:	80da      	strh	r2, [r3, #6]
                global_response_frame.source_address = 2;
 80057da:	4b2d      	ldr	r3, [pc, #180]	@ (8005890 <anchor_loop+0x1b8>)
 80057dc:	2202      	movs	r2, #2
 80057de:	811a      	strh	r2, [r3, #8]
                global_response_frame.function_code = RESPONSE_FUNCTION_CODE;
 80057e0:	4b2b      	ldr	r3, [pc, #172]	@ (8005890 <anchor_loop+0x1b8>)
 80057e2:	2250      	movs	r2, #80	@ 0x50
 80057e4:	729a      	strb	r2, [r3, #10]
                global_response_frame.calculated_time_of_flight = 0;
 80057e6:	492a      	ldr	r1, [pc, #168]	@ (8005890 <anchor_loop+0x1b8>)
 80057e8:	f04f 0200 	mov.w	r2, #0
 80057ec:	f04f 0300 	mov.w	r3, #0
 80057f0:	e9c1 2304 	strd	r2, r3, [r1, #16]

                response_frame_builder(tx_buffer, &tx_buffer_size);
 80057f4:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80057f8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80057fc:	4611      	mov	r1, r2
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff ff0e 	bl	8005620 <response_frame_builder>

                response_tx_time = (poll_rx_ts + (POLL_RX_TO_RESPONSE_TX_DLY_UUS * UUS_TO_DWU)) >> 8;
 8005804:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8005808:	4922      	ldr	r1, [pc, #136]	@ (8005894 <anchor_loop+0x1bc>)
 800580a:	1854      	adds	r4, r2, r1
 800580c:	f143 0500 	adc.w	r5, r3, #0
 8005810:	f04f 0200 	mov.w	r2, #0
 8005814:	f04f 0300 	mov.w	r3, #0
 8005818:	0a22      	lsrs	r2, r4, #8
 800581a:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 800581e:	0a2b      	lsrs	r3, r5, #8
 8005820:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

                if (uwb_transmit_data(tx_buffer, tx_buffer_size, response_tx_time, RESPONSE_TX_TO_FINAL_RX_DLY_UUS,
 8005824:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8005826:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800582a:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 800582e:	2301      	movs	r3, #1
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	2364      	movs	r3, #100	@ 0x64
 8005834:	f7ff fd7a 	bl	800532c <uwb_transmit_data>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d103      	bne.n	8005846 <anchor_loop+0x16e>
                                      TRUE) == FALSE) {
                    anchor_fsm_state = ANCHOR_FSM_IDLE;
 800583e:	2300      	movs	r3, #0
 8005840:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
                    break;
 8005844:	e113      	b.n	8005a6e <anchor_loop+0x396>
                }

                anchor_fsm_state = ANCHOR_FSM_WAIT_FINAL;
 8005846:	2305      	movs	r3, #5
 8005848:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
                break;
 800584c:	e10f      	b.n	8005a6e <anchor_loop+0x396>
            };
            case ANCHOR_FSM_WAIT_FINAL: {
                if (uwb_receive_data(TRUE, rx_buffer, &rx_buffer_size, FINAL_RX_TIMEOUT_UUS) == FALSE) {
 800584e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8005852:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8005856:	f242 7310 	movw	r3, #10000	@ 0x2710
 800585a:	2001      	movs	r0, #1
 800585c:	f7ff fcc4 	bl	80051e8 <uwb_receive_data>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d103      	bne.n	800586e <anchor_loop+0x196>
                    anchor_fsm_state = ANCHOR_FSM_IDLE;
 8005866:	2300      	movs	r3, #0
 8005868:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
                    break;
 800586c:	e0ff      	b.n	8005a6e <anchor_loop+0x396>
                }

                if (final_frame_parser(rx_buffer, rx_buffer_size) == FALSE) {
 800586e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005870:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005874:	4611      	mov	r1, r2
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff fe3c 	bl	80054f4 <final_frame_parser>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10a      	bne.n	8005898 <anchor_loop+0x1c0>
                    anchor_fsm_state = ANCHOR_FSM_IDLE;
 8005882:	2300      	movs	r3, #0
 8005884:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
                    break;
 8005888:	e0f1      	b.n	8005a6e <anchor_loop+0x396>
 800588a:	bf00      	nop
 800588c:	08008dd0 	.word	0x08008dd0
 8005890:	20000300 	.word	0x20000300
 8005894:	11940000 	.word	0x11940000
                }

                double Ra, Rb, Da, Db;
                int64 tof_dtu;

                response_tx_ts = get_tx_timestamp_u64();
 8005898:	f7ff fc08 	bl	80050ac <get_tx_timestamp_u64>
 800589c:	e9c7 0136 	strd	r0, r1, [r7, #216]	@ 0xd8
                final_rx_ts = get_rx_timestamp_u64();
 80058a0:	f7ff fc3f 	bl	8005122 <get_rx_timestamp_u64>
 80058a4:	e9c7 0134 	strd	r0, r1, [r7, #208]	@ 0xd0

                Ra = (double) (global_final_frame.resp_rx_time_minus_poll_tx_time);
 80058a8:	4b75      	ldr	r3, [pc, #468]	@ (8005a80 <anchor_loop+0x3a8>)
 80058aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80058ae:	4610      	mov	r0, r2
 80058b0:	4619      	mov	r1, r3
 80058b2:	f7fa fddb 	bl	800046c <__aeabi_ul2d>
 80058b6:	4602      	mov	r2, r0
 80058b8:	460b      	mov	r3, r1
 80058ba:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
                Rb = (double) (final_rx_ts - response_tx_ts);
 80058be:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80058c2:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 80058c6:	ebb0 0a02 	subs.w	sl, r0, r2
 80058ca:	eb61 0b03 	sbc.w	fp, r1, r3
 80058ce:	4650      	mov	r0, sl
 80058d0:	4659      	mov	r1, fp
 80058d2:	f7fa fdcb 	bl	800046c <__aeabi_ul2d>
 80058d6:	4602      	mov	r2, r0
 80058d8:	460b      	mov	r3, r1
 80058da:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
                Da = (double) (global_final_frame.final_tx_time_minus_resp_rx_time);
 80058de:	4b68      	ldr	r3, [pc, #416]	@ (8005a80 <anchor_loop+0x3a8>)
 80058e0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80058e4:	4610      	mov	r0, r2
 80058e6:	4619      	mov	r1, r3
 80058e8:	f7fa fdc0 	bl	800046c <__aeabi_ul2d>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
                Db = (double) (response_tx_ts - poll_rx_ts);
 80058f4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 80058f8:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 80058fc:	ebb0 0c02 	subs.w	ip, r0, r2
 8005900:	f8c7 c000 	str.w	ip, [r7]
 8005904:	eb61 0303 	sbc.w	r3, r1, r3
 8005908:	607b      	str	r3, [r7, #4]
 800590a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800590e:	f7fa fdad 	bl	800046c <__aeabi_ul2d>
 8005912:	4602      	mov	r2, r0
 8005914:	460b      	mov	r3, r1
 8005916:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
                tof_dtu = (int64) ((Ra * Rb - Da * Db) / (Ra + Rb + Da + Db));
 800591a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800591e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005922:	f7fa fdd9 	bl	80004d8 <__aeabi_dmul>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	4690      	mov	r8, r2
 800592c:	4699      	mov	r9, r3
 800592e:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8005932:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8005936:	f7fa fdcf 	bl	80004d8 <__aeabi_dmul>
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	4640      	mov	r0, r8
 8005940:	4649      	mov	r1, r9
 8005942:	f7fa fc11 	bl	8000168 <__aeabi_dsub>
 8005946:	4602      	mov	r2, r0
 8005948:	460b      	mov	r3, r1
 800594a:	4690      	mov	r8, r2
 800594c:	4699      	mov	r9, r3
 800594e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8005952:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005956:	f7fa fc09 	bl	800016c <__adddf3>
 800595a:	4602      	mov	r2, r0
 800595c:	460b      	mov	r3, r1
 800595e:	4610      	mov	r0, r2
 8005960:	4619      	mov	r1, r3
 8005962:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8005966:	f7fa fc01 	bl	800016c <__adddf3>
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	4610      	mov	r0, r2
 8005970:	4619      	mov	r1, r3
 8005972:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8005976:	f7fa fbf9 	bl	800016c <__adddf3>
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	4640      	mov	r0, r8
 8005980:	4649      	mov	r1, r9
 8005982:	f7fa fed3 	bl	800072c <__aeabi_ddiv>
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	4610      	mov	r0, r2
 800598c:	4619      	mov	r1, r3
 800598e:	f7fb f89b 	bl	8000ac8 <__aeabi_d2lz>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

                tof = tof_dtu * DWT_TIME_UNITS;
 800599a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 800599e:	f7fa fd6d 	bl	800047c <__aeabi_l2d>
 80059a2:	a333      	add	r3, pc, #204	@ (adr r3, 8005a70 <anchor_loop+0x398>)
 80059a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a8:	f7fa fd96 	bl	80004d8 <__aeabi_dmul>
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
                distance = tof * SPEED_OF_LIGHT;
 80059b4:	a330      	add	r3, pc, #192	@ (adr r3, 8005a78 <anchor_loop+0x3a0>)
 80059b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ba:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80059be:	f7fa fd8b 	bl	80004d8 <__aeabi_dmul>
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98

                char dist_str[64] = {0};
 80059ca:	2300      	movs	r3, #0
 80059cc:	60bb      	str	r3, [r7, #8]
 80059ce:	f107 030c 	add.w	r3, r7, #12
 80059d2:	223c      	movs	r2, #60	@ 0x3c
 80059d4:	2100      	movs	r1, #0
 80059d6:	4618      	mov	r0, r3
 80059d8:	f001 f843 	bl	8006a62 <memset>

                static uint8_t anc_i = 0;
                static double sum = 0.0;

                if (anc_i < 100) {
 80059dc:	4b29      	ldr	r3, [pc, #164]	@ (8005a84 <anchor_loop+0x3ac>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	2b63      	cmp	r3, #99	@ 0x63
 80059e2:	d812      	bhi.n	8005a0a <anchor_loop+0x332>
                    sum += distance;
 80059e4:	4b28      	ldr	r3, [pc, #160]	@ (8005a88 <anchor_loop+0x3b0>)
 80059e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059ea:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80059ee:	f7fa fbbd 	bl	800016c <__adddf3>
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	4924      	ldr	r1, [pc, #144]	@ (8005a88 <anchor_loop+0x3b0>)
 80059f8:	e9c1 2300 	strd	r2, r3, [r1]
//                    } else if (sum < 0) {
//                        sum = 0.0;
//                        anc_i = 0;
//                    }

                    anc_i++;
 80059fc:	4b21      	ldr	r3, [pc, #132]	@ (8005a84 <anchor_loop+0x3ac>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	3301      	adds	r3, #1
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	4b1f      	ldr	r3, [pc, #124]	@ (8005a84 <anchor_loop+0x3ac>)
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	e025      	b.n	8005a56 <anchor_loop+0x37e>
                } else {
                    sprintf(dist_str, "DIST: %4.4f m\r\n", sum / 100.0);
 8005a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8005a88 <anchor_loop+0x3b0>)
 8005a0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a10:	f04f 0200 	mov.w	r2, #0
 8005a14:	4b1d      	ldr	r3, [pc, #116]	@ (8005a8c <anchor_loop+0x3b4>)
 8005a16:	f7fa fe89 	bl	800072c <__aeabi_ddiv>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	f107 0008 	add.w	r0, r7, #8
 8005a22:	491b      	ldr	r1, [pc, #108]	@ (8005a90 <anchor_loop+0x3b8>)
 8005a24:	f000 ffba 	bl	800699c <siprintf>
                    terminal_print(dist_str, strlen(dist_str));
 8005a28:	f107 0308 	add.w	r3, r7, #8
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fa fb8f 	bl	8000150 <strlen>
 8005a32:	4603      	mov	r3, r0
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	f107 0308 	add.w	r3, r7, #8
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f000 f8a9 	bl	8005b94 <terminal_print>

                    //calibrate_anchor_antenna_delay(sum / 100.0);
                    sum = 0.0;
 8005a42:	4911      	ldr	r1, [pc, #68]	@ (8005a88 <anchor_loop+0x3b0>)
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	f04f 0300 	mov.w	r3, #0
 8005a4c:	e9c1 2300 	strd	r2, r3, [r1]
                    anc_i = 0;
 8005a50:	4b0c      	ldr	r3, [pc, #48]	@ (8005a84 <anchor_loop+0x3ac>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	701a      	strb	r2, [r3, #0]
                }

                anchor_fsm_state = ANCHOR_FSM_CALCULATE_TOF;
 8005a56:	2306      	movs	r3, #6
 8005a58:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
                break;
 8005a5c:	e007      	b.n	8005a6e <anchor_loop+0x396>
            };
            case ANCHOR_FSM_CALCULATE_TOF: {
                anchor_fsm_state = ANCHOR_FSM_IDLE;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
                break;
 8005a64:	e003      	b.n	8005a6e <anchor_loop+0x396>
            }
            default: {
                anchor_fsm_state = ANCHOR_FSM_IDLE;
 8005a66:	2300      	movs	r3, #0
 8005a68:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
                break;
 8005a6c:	bf00      	nop
        switch (anchor_fsm_state) {
 8005a6e:	e65d      	b.n	800572c <anchor_loop+0x54>
 8005a70:	3bce48fa 	.word	0x3bce48fa
 8005a74:	3db13518 	.word	0x3db13518
 8005a78:	13000000 	.word	0x13000000
 8005a7c:	41b1dd19 	.word	0x41b1dd19
 8005a80:	20000320 	.word	0x20000320
 8005a84:	20000348 	.word	0x20000348
 8005a88:	20000350 	.word	0x20000350
 8005a8c:	40590000 	.word	0x40590000
 8005a90:	08008de8 	.word	0x08008de8

08005a94 <lwshell_init_ex>:
 * \brief           Initialize shell interface
 * \param[in]       lwobj: LwSHELL object instance. Set to `NULL` to use default one
 * \return          \ref lwshellOK on success, member of \ref lwshellr_t otherwise
 */
lwshellr_t
lwshell_init_ex(lwshell_t* lwobj) {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
    lwobj = LWSHELL_GET_LWOBJ(NULL);
 8005a9c:	4b06      	ldr	r3, [pc, #24]	@ (8005ab8 <lwshell_init_ex+0x24>)
 8005a9e:	607b      	str	r3, [r7, #4]
    LWSHELL_MEMSET(lwobj, 0x00, sizeof(*lwobj));
 8005aa0:	f44f 728a 	mov.w	r2, #276	@ 0x114
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 ffdb 	bl	8006a62 <memset>
    return lwshellOK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	20000358 	.word	0x20000358

08005abc <lwshell_set_output_fn_ex>:
 * \param[in]       out_fn: Output function to print library data.
 *                      Set to `NULL` to disable the feature
 * \return          \ref lwshellOK on success, member of \ref lwshellr_t otherwise
 */
lwshellr_t
lwshell_set_output_fn_ex(lwshell_t* lwobj, lwshell_output_fn out_fn) {
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
    lwobj = LWSHELL_GET_LWOBJ(lwobj);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <lwshell_set_output_fn_ex+0x14>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	e000      	b.n	8005ad2 <lwshell_set_output_fn_ex+0x16>
 8005ad0:	4b05      	ldr	r3, [pc, #20]	@ (8005ae8 <lwshell_set_output_fn_ex+0x2c>)
 8005ad2:	607b      	str	r3, [r7, #4]
    lwobj->out_fn = out_fn;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	601a      	str	r2, [r3, #0]
    return lwshellOK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bc80      	pop	{r7}
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	20000358 	.word	0x20000358

08005aec <lwshell_register_cmd_ex>:
 * \param[in]       desc: Custom command description
 * \return          \ref lwshellOK on success, member of \ref lwshellr_t otherwise
 * \note            Available only when \ref LWSHELL_CFG_USE_DYNAMIC_COMMANDS is enabled
 */
lwshellr_t
lwshell_register_cmd_ex(lwshell_t* lwobj, const char* cmd_name, lwshell_cmd_fn cmd_fn, const char* desc) {
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
 8005af8:	603b      	str	r3, [r7, #0]
    lwobj = LWSHELL_GET_LWOBJ(lwobj);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <lwshell_register_cmd_ex+0x18>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	e000      	b.n	8005b06 <lwshell_register_cmd_ex+0x1a>
 8005b04:	4b22      	ldr	r3, [pc, #136]	@ (8005b90 <lwshell_register_cmd_ex+0xa4>)
 8005b06:	60fb      	str	r3, [r7, #12]

    if (cmd_name == NULL || cmd_fn == NULL || strlen(cmd_name) == 0) {
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d006      	beq.n	8005b1c <lwshell_register_cmd_ex+0x30>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d003      	beq.n	8005b1c <lwshell_register_cmd_ex+0x30>
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <lwshell_register_cmd_ex+0x34>
        return lwshellERRPAR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e032      	b.n	8005b86 <lwshell_register_cmd_ex+0x9a>
    }

    /* Check for memory available */
    if (lwobj->dynamic_cmds_cnt < LWSHELL_ARRAYSIZE(lwobj->dynamic_cmds)) {
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005b26:	2b07      	cmp	r3, #7
 8005b28:	d82c      	bhi.n	8005b84 <lwshell_register_cmd_ex+0x98>
        lwobj->dynamic_cmds[lwobj->dynamic_cmds_cnt].name = cmd_name;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8005b30:	68f9      	ldr	r1, [r7, #12]
 8005b32:	4613      	mov	r3, r2
 8005b34:	005b      	lsls	r3, r3, #1
 8005b36:	4413      	add	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	440b      	add	r3, r1
 8005b3c:	33b4      	adds	r3, #180	@ 0xb4
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	601a      	str	r2, [r3, #0]
        lwobj->dynamic_cmds[lwobj->dynamic_cmds_cnt].fn = cmd_fn;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8005b48:	68f9      	ldr	r1, [r7, #12]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	440b      	add	r3, r1
 8005b54:	33b0      	adds	r3, #176	@ 0xb0
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	601a      	str	r2, [r3, #0]
        lwobj->dynamic_cmds[lwobj->dynamic_cmds_cnt].desc = desc;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8005b60:	68f9      	ldr	r1, [r7, #12]
 8005b62:	4613      	mov	r3, r2
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	4413      	add	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	440b      	add	r3, r1
 8005b6c:	33b8      	adds	r3, #184	@ 0xb8
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	601a      	str	r2, [r3, #0]

        ++lwobj->dynamic_cmds_cnt;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        return lwshellOK;
 8005b80:	2300      	movs	r3, #0
 8005b82:	e000      	b.n	8005b86 <lwshell_register_cmd_ex+0x9a>
    }
    return lwshellERRMEM;
 8005b84:	2302      	movs	r3, #2
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bc80      	pop	{r7}
 8005b8e:	4770      	bx	lr
 8005b90:	20000358 	.word	0x20000358

08005b94 <terminal_print>:
 * \param str Строка для вывода
 * \param len Размер строки для вывода
 * \return Статус завершения
 */
terminal_driver_status_t
terminal_print(uint8_t *str, uint16_t len) {
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	807b      	strh	r3, [r7, #2]
    if (str == NULL || len == 0) {
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d002      	beq.n	8005bac <terminal_print+0x18>
 8005ba6:	887b      	ldrh	r3, [r7, #2]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <terminal_print+0x1c>
        return TERMINAL_DRIVER_NULL_ARGUMENT;
 8005bac:	2304      	movs	r3, #4
 8005bae:	e025      	b.n	8005bfc <terminal_print+0x68>
    }

    HAL_StatusTypeDef hal_status = HAL_UART_Transmit(&huart1, str, len, 100);
 8005bb0:	887a      	ldrh	r2, [r7, #2]
 8005bb2:	2364      	movs	r3, #100	@ 0x64
 8005bb4:	6879      	ldr	r1, [r7, #4]
 8005bb6:	4813      	ldr	r0, [pc, #76]	@ (8005c04 <terminal_print+0x70>)
 8005bb8:	f7fd fab8 	bl	800312c <HAL_UART_Transmit>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	73fb      	strb	r3, [r7, #15]

    while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY) {};
 8005bc0:	bf00      	nop
 8005bc2:	4810      	ldr	r0, [pc, #64]	@ (8005c04 <terminal_print+0x70>)
 8005bc4:	f7fd fdf6 	bl	80037b4 <HAL_UART_GetState>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b20      	cmp	r3, #32
 8005bcc:	d1f9      	bne.n	8005bc2 <terminal_print+0x2e>

    switch (hal_status) {
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
 8005bd0:	2b03      	cmp	r3, #3
 8005bd2:	d813      	bhi.n	8005bfc <terminal_print+0x68>
 8005bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bdc <terminal_print+0x48>)
 8005bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bda:	bf00      	nop
 8005bdc:	08005bed 	.word	0x08005bed
 8005be0:	08005bf1 	.word	0x08005bf1
 8005be4:	08005bf5 	.word	0x08005bf5
 8005be8:	08005bf9 	.word	0x08005bf9
        case HAL_OK:
            return TERMINAL_DRIVER_OK;
 8005bec:	2300      	movs	r3, #0
 8005bee:	e005      	b.n	8005bfc <terminal_print+0x68>
        case HAL_ERROR:
            return TERMINAL_DRIVER_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e003      	b.n	8005bfc <terminal_print+0x68>
        case HAL_BUSY:
            return TERMINAL_DRIVER_BUSY;
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e001      	b.n	8005bfc <terminal_print+0x68>
        case HAL_TIMEOUT:
            return TERMINAL_DRIVER_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e7ff      	b.n	8005bfc <terminal_print+0x68>
    }
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	20000260 	.word	0x20000260

08005c08 <terminal_settings_init>:

/**
 * \brief Инициализация настроек терминала
 */
void
terminal_settings_init(void) {
 8005c08:	b480      	push	{r7}
 8005c0a:	af00      	add	r7, sp, #0
    terminal_settings.terminal_echo = false;
 8005c0c:	4b03      	ldr	r3, [pc, #12]	@ (8005c1c <terminal_settings_init+0x14>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	701a      	strb	r2, [r3, #0]
}
 8005c12:	bf00      	nop
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bc80      	pop	{r7}
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	2000046c 	.word	0x2000046c

08005c20 <terminal_function_output>:
 * \brief Функция вывода, которая будет использоваться для печати данных из библиотеки LWSHELL пользователю
 * \param str Строка для вывода
 * \param lwobj LwSHELL объект
 */
void
terminal_function_output(const char *str, struct lwshell *lwobj) {
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
    terminal_print((uint8_t *) str, strlen(str));
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7fa fa90 	bl	8000150 <strlen>
 8005c30:	4603      	mov	r3, r0
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	4619      	mov	r1, r3
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7ff ffac 	bl	8005b94 <terminal_print>
}
 8005c3c:	bf00      	nop
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <terminal_echo>:

/**
 * \brief Функция включения/выключения эхо терминала
 */
long int
terminal_echo(long int argc, char** argv) {
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
    if (terminal_settings.terminal_echo) {
 8005c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c80 <terminal_echo+0x3c>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d007      	beq.n	8005c66 <terminal_echo+0x22>
        terminal_settings.terminal_echo = false;
 8005c56:	4b0a      	ldr	r3, [pc, #40]	@ (8005c80 <terminal_echo+0x3c>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	701a      	strb	r2, [r3, #0]
        terminal_print(TERMINAL_ECHO_OFF, strlen(TERMINAL_ECHO_OFF));
 8005c5c:	2111      	movs	r1, #17
 8005c5e:	4809      	ldr	r0, [pc, #36]	@ (8005c84 <terminal_echo+0x40>)
 8005c60:	f7ff ff98 	bl	8005b94 <terminal_print>
 8005c64:	e006      	b.n	8005c74 <terminal_echo+0x30>
    } else {
        terminal_settings.terminal_echo = true;
 8005c66:	4b06      	ldr	r3, [pc, #24]	@ (8005c80 <terminal_echo+0x3c>)
 8005c68:	2201      	movs	r2, #1
 8005c6a:	701a      	strb	r2, [r3, #0]
        terminal_print(TERMINAL_ECHO_ON, strlen(TERMINAL_ECHO_ON));
 8005c6c:	2110      	movs	r1, #16
 8005c6e:	4806      	ldr	r0, [pc, #24]	@ (8005c88 <terminal_echo+0x44>)
 8005c70:	f7ff ff90 	bl	8005b94 <terminal_print>
    }

    return 0;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	2000046c 	.word	0x2000046c
 8005c84:	08008e0c 	.word	0x08008e0c
 8005c88:	08008e20 	.word	0x08008e20

08005c8c <terminal_clear>:

/**
 * \brief Функция очистки терминала
 */
long int
terminal_clear(long int argc, char** argv) {
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
    terminal_print(TERMINAL_DISPLAY_CLEAR, strlen(TERMINAL_DISPLAY_CLEAR));
 8005c96:	2104      	movs	r1, #4
 8005c98:	4805      	ldr	r0, [pc, #20]	@ (8005cb0 <terminal_clear+0x24>)
 8005c9a:	f7ff ff7b 	bl	8005b94 <terminal_print>
    terminal_print(TERMINAL_RESET_CURSOR, strlen(TERMINAL_RESET_CURSOR));
 8005c9e:	2103      	movs	r1, #3
 8005ca0:	4804      	ldr	r0, [pc, #16]	@ (8005cb4 <terminal_clear+0x28>)
 8005ca2:	f7ff ff77 	bl	8005b94 <terminal_print>

    return 0;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	08008e34 	.word	0x08008e34
 8005cb4:	08008e3c 	.word	0x08008e3c

08005cb8 <terminal_test>:

/**
 * \brief Функция выводящая "Terminal test!" в консоль
 */
long int
terminal_test(long int argc, char** argv) {
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
    terminal_print("Terminal test!\r\n", strlen("Terminal test!\r\n"));
 8005cc2:	2110      	movs	r1, #16
 8005cc4:	4803      	ldr	r0, [pc, #12]	@ (8005cd4 <terminal_test+0x1c>)
 8005cc6:	f7ff ff65 	bl	8005b94 <terminal_print>

    return 0;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3708      	adds	r7, #8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	08008e40 	.word	0x08008e40

08005cd8 <terminal_init>:

/**
 * \brief Функция инициализации терминала
 */
void
terminal_init(void) {
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0
    terminal_settings_init();
 8005cdc:	f7ff ff94 	bl	8005c08 <terminal_settings_init>

    lwshell_init();
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	f7ff fed7 	bl	8005a94 <lwshell_init_ex>

    lwshell_set_output_fn_ex(NULL, terminal_function_output);
 8005ce6:	490c      	ldr	r1, [pc, #48]	@ (8005d18 <terminal_init+0x40>)
 8005ce8:	2000      	movs	r0, #0
 8005cea:	f7ff fee7 	bl	8005abc <lwshell_set_output_fn_ex>

    // Регистрируем команды, которые должны быть в терминале
    lwshell_register_cmd(TERMINAL_ECHO_CMD, terminal_echo, TERMINAL_ECHO_CMD_DESCRIPTION);
 8005cee:	4b0b      	ldr	r3, [pc, #44]	@ (8005d1c <terminal_init+0x44>)
 8005cf0:	4a0b      	ldr	r2, [pc, #44]	@ (8005d20 <terminal_init+0x48>)
 8005cf2:	490c      	ldr	r1, [pc, #48]	@ (8005d24 <terminal_init+0x4c>)
 8005cf4:	2000      	movs	r0, #0
 8005cf6:	f7ff fef9 	bl	8005aec <lwshell_register_cmd_ex>
    lwshell_register_cmd(TERMINAL_CLEAR_CMD, terminal_clear, TERMINAL_CLEAR_CMD_DESCRIPTION);
 8005cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8005d28 <terminal_init+0x50>)
 8005cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8005d2c <terminal_init+0x54>)
 8005cfe:	490c      	ldr	r1, [pc, #48]	@ (8005d30 <terminal_init+0x58>)
 8005d00:	2000      	movs	r0, #0
 8005d02:	f7ff fef3 	bl	8005aec <lwshell_register_cmd_ex>
    lwshell_register_cmd(TERMINAL_TEST_CMD, terminal_test, TERMINAL_TEST_CMD_DESCRIPTION);
 8005d06:	4b0b      	ldr	r3, [pc, #44]	@ (8005d34 <terminal_init+0x5c>)
 8005d08:	4a0b      	ldr	r2, [pc, #44]	@ (8005d38 <terminal_init+0x60>)
 8005d0a:	490c      	ldr	r1, [pc, #48]	@ (8005d3c <terminal_init+0x64>)
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	f7ff feed 	bl	8005aec <lwshell_register_cmd_ex>
}
 8005d12:	bf00      	nop
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	08005c21 	.word	0x08005c21
 8005d1c:	08008e54 	.word	0x08008e54
 8005d20:	08005c45 	.word	0x08005c45
 8005d24:	08008e6c 	.word	0x08008e6c
 8005d28:	08008e74 	.word	0x08008e74
 8005d2c:	08005c8d 	.word	0x08005c8d
 8005d30:	08008e84 	.word	0x08008e84
 8005d34:	08008e8c 	.word	0x08008e8c
 8005d38:	08005cb9 	.word	0x08005cb9
 8005d3c:	08008ea4 	.word	0x08008ea4

08005d40 <bytes_to_uint16>:
/**
 * \brief Перевести массив байт в uint16_t
 * \param bytes указатель на массив байт
 * \return uint16_t число
 */
uint16_t bytes_to_uint16(const uint8_t bytes[2]) {
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
    if (bytes == NULL) {
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <bytes_to_uint16+0x12>
        return 0;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	e016      	b.n	8005d80 <bytes_to_uint16+0x40>
    }

    uint16_t result = 0;
 8005d52:	2300      	movs	r3, #0
 8005d54:	81fb      	strh	r3, [r7, #14]

    for (int i = 0; i < 2; i++) {
 8005d56:	2300      	movs	r3, #0
 8005d58:	60bb      	str	r3, [r7, #8]
 8005d5a:	e00d      	b.n	8005d78 <bytes_to_uint16+0x38>
        result = (result << 8) | bytes[i];
 8005d5c:	89fb      	ldrh	r3, [r7, #14]
 8005d5e:	021b      	lsls	r3, r3, #8
 8005d60:	b21a      	sxth	r2, r3
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	6879      	ldr	r1, [r7, #4]
 8005d66:	440b      	add	r3, r1
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	b21b      	sxth	r3, r3
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	b21b      	sxth	r3, r3
 8005d70:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 2; i++) {
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	3301      	adds	r3, #1
 8005d76:	60bb      	str	r3, [r7, #8]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	ddee      	ble.n	8005d5c <bytes_to_uint16+0x1c>
    }

    return result;
 8005d7e:	89fb      	ldrh	r3, [r7, #14]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bc80      	pop	{r7}
 8005d88:	4770      	bx	lr

08005d8a <bytes_to_uint64>:
/**
 * \brief Перевести массив байт в uint64_t
 * \param bytes указатель на массив байт
 * \return uint64_t число
 */
uint64_t bytes_to_uint64(const uint8_t bytes[8]) {
 8005d8a:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
    if (bytes == NULL) {
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d104      	bne.n	8005da4 <bytes_to_uint64+0x1a>
        return 0;
 8005d9a:	f04f 0200 	mov.w	r2, #0
 8005d9e:	f04f 0300 	mov.w	r3, #0
 8005da2:	e028      	b.n	8005df6 <bytes_to_uint64+0x6c>
    }

    uint64_t result = 0;
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	f04f 0300 	mov.w	r3, #0
 8005dac:	e9c7 2304 	strd	r2, r3, [r7, #16]

    for (int i = 0; i < 8; i++) {
 8005db0:	2300      	movs	r3, #0
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	e01a      	b.n	8005dec <bytes_to_uint64+0x62>
        result = (result << 8) | bytes[i];
 8005db6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005dba:	f04f 0200 	mov.w	r2, #0
 8005dbe:	f04f 0300 	mov.w	r3, #0
 8005dc2:	020b      	lsls	r3, r1, #8
 8005dc4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005dc8:	0202      	lsls	r2, r0, #8
 8005dca:	68f9      	ldr	r1, [r7, #12]
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	4401      	add	r1, r0
 8005dd0:	7809      	ldrb	r1, [r1, #0]
 8005dd2:	b2c9      	uxtb	r1, r1
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	4605      	mov	r5, r0
 8005dda:	ea42 0804 	orr.w	r8, r2, r4
 8005dde:	ea43 0905 	orr.w	r9, r3, r5
 8005de2:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for (int i = 0; i < 8; i++) {
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	3301      	adds	r3, #1
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2b07      	cmp	r3, #7
 8005df0:	dde1      	ble.n	8005db6 <bytes_to_uint64+0x2c>
    }

    return result;
 8005df2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8005df6:	4610      	mov	r0, r2
 8005df8:	4619      	mov	r1, r3
 8005dfa:	371c      	adds	r7, #28
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8005e02:	4770      	bx	lr

08005e04 <uint16_to_bytes>:
/**
 * \brief Перевести число uint16_t в массив байт
 * \param value uint16_t число
 * \param bytes указатель на массив байт
 */
void uint16_to_bytes(uint16_t value, uint8_t *bytes) {
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	6039      	str	r1, [r7, #0]
 8005e0e:	80fb      	strh	r3, [r7, #6]
    do {
        if (bytes == NULL) {
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d017      	beq.n	8005e46 <uint16_to_bytes+0x42>
            break;
        }

        uint8_t digits = 8;
 8005e16:	2308      	movs	r3, #8
 8005e18:	73fb      	strb	r3, [r7, #15]

        for (int i = 0; i < 2; i++) {
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60bb      	str	r3, [r7, #8]
 8005e1e:	e00e      	b.n	8005e3e <uint16_to_bytes+0x3a>
            bytes[i] = (value >> digits) & 0xFF;
 8005e20:	88fa      	ldrh	r2, [r7, #6]
 8005e22:	7bfb      	ldrb	r3, [r7, #15]
 8005e24:	fa42 f103 	asr.w	r1, r2, r3
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	b2ca      	uxtb	r2, r1
 8005e30:	701a      	strb	r2, [r3, #0]
            digits -= 8;
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
 8005e34:	3b08      	subs	r3, #8
 8005e36:	73fb      	strb	r3, [r7, #15]
        for (int i = 0; i < 2; i++) {
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	60bb      	str	r3, [r7, #8]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	dded      	ble.n	8005e20 <uint16_to_bytes+0x1c>
        }
    } while (0);

}
 8005e44:	e000      	b.n	8005e48 <uint16_to_bytes+0x44>
            break;
 8005e46:	bf00      	nop
}
 8005e48:	bf00      	nop
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bc80      	pop	{r7}
 8005e50:	4770      	bx	lr

08005e52 <uint64_to_bytes>:
/**
 * \brief Перевести число uint64_t в массив байт
 * \param value uint64_t число
 * \param bytes указатель на массив байт
 */
void uint64_to_bytes(uint64_t value, uint8_t *bytes) {
 8005e52:	b4f0      	push	{r4, r5, r6, r7}
 8005e54:	b086      	sub	sp, #24
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005e5c:	607a      	str	r2, [r7, #4]
    do {
        if (bytes == NULL) {
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d024      	beq.n	8005eae <uint64_to_bytes+0x5c>
            break;
        }

        uint8_t digits = 56;
 8005e64:	2338      	movs	r3, #56	@ 0x38
 8005e66:	75fb      	strb	r3, [r7, #23]

        for (int i = 0; i < 8; i++) {
 8005e68:	2300      	movs	r3, #0
 8005e6a:	613b      	str	r3, [r7, #16]
 8005e6c:	e01b      	b.n	8005ea6 <uint64_to_bytes+0x54>
            bytes[i] = (value >> digits) & 0xFF;
 8005e6e:	7df9      	ldrb	r1, [r7, #23]
 8005e70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e74:	f1c1 0620 	rsb	r6, r1, #32
 8005e78:	f1a1 0020 	sub.w	r0, r1, #32
 8005e7c:	fa22 f401 	lsr.w	r4, r2, r1
 8005e80:	fa03 f606 	lsl.w	r6, r3, r6
 8005e84:	4334      	orrs	r4, r6
 8005e86:	fa23 f000 	lsr.w	r0, r3, r0
 8005e8a:	4304      	orrs	r4, r0
 8005e8c:	fa23 f501 	lsr.w	r5, r3, r1
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	4413      	add	r3, r2
 8005e96:	b2e2      	uxtb	r2, r4
 8005e98:	701a      	strb	r2, [r3, #0]
            digits -= 8;
 8005e9a:	7dfb      	ldrb	r3, [r7, #23]
 8005e9c:	3b08      	subs	r3, #8
 8005e9e:	75fb      	strb	r3, [r7, #23]
        for (int i = 0; i < 8; i++) {
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	613b      	str	r3, [r7, #16]
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	2b07      	cmp	r3, #7
 8005eaa:	dde0      	ble.n	8005e6e <uint64_to_bytes+0x1c>
        }
    } while (0);
}
 8005eac:	e000      	b.n	8005eb0 <uint64_to_bytes+0x5e>
            break;
 8005eae:	bf00      	nop
}
 8005eb0:	bf00      	nop
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bcf0      	pop	{r4, r5, r6, r7}
 8005eb8:	4770      	bx	lr

08005eba <swap_endian16>:
/**
 * \brief Изменить порядок байт в uint16_t числе
 * \param value число
 * \return число с измененным порядком байт
 */
uint16_t swap_endian16(uint16_t value) {
 8005eba:	b480      	push	{r7}
 8005ebc:	b083      	sub	sp, #12
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	80fb      	strh	r3, [r7, #6]
    return (value >> 8) | (value << 8);
 8005ec4:	88fb      	ldrh	r3, [r7, #6]
 8005ec6:	0a1b      	lsrs	r3, r3, #8
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	b21a      	sxth	r2, r3
 8005ecc:	88fb      	ldrh	r3, [r7, #6]
 8005ece:	021b      	lsls	r3, r3, #8
 8005ed0:	b21b      	sxth	r3, r3
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	b21b      	sxth	r3, r3
 8005ed6:	b29b      	uxth	r3, r3
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bc80      	pop	{r7}
 8005ee0:	4770      	bx	lr
	...

08005ee4 <crc16_kermit>:
 * \brief Вычислить контрольную сумму для массива, по алгоритму CRC-16/KERMIT
 * \param data указатель на массив
 * \param length размер массива
 * \return контрольная сумма
 */
uint16_t crc16_kermit(const uint8_t *data, size_t length) {
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
    if (data == NULL) {
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <crc16_kermit+0x14>
        return 0;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	e02c      	b.n	8005f52 <crc16_kermit+0x6e>
    }

    uint16_t crc = 0x0000;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	82fb      	strh	r3, [r7, #22]

    for (size_t i = 0; i < length; i++) {
 8005efc:	2300      	movs	r3, #0
 8005efe:	613b      	str	r3, [r7, #16]
 8005f00:	e022      	b.n	8005f48 <crc16_kermit+0x64>
        crc ^= data[i];
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	4413      	add	r3, r2
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	8afb      	ldrh	r3, [r7, #22]
 8005f0e:	4053      	eors	r3, r2
 8005f10:	82fb      	strh	r3, [r7, #22]

        for (int j = 0; j < 8; j++) {
 8005f12:	2300      	movs	r3, #0
 8005f14:	60fb      	str	r3, [r7, #12]
 8005f16:	e011      	b.n	8005f3c <crc16_kermit+0x58>
            if (crc & 0x0001) {
 8005f18:	8afb      	ldrh	r3, [r7, #22]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d006      	beq.n	8005f30 <crc16_kermit+0x4c>
                crc = (crc >> 1) ^ 0x8408;
 8005f22:	8afb      	ldrh	r3, [r7, #22]
 8005f24:	085b      	lsrs	r3, r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	4b0c      	ldr	r3, [pc, #48]	@ (8005f5c <crc16_kermit+0x78>)
 8005f2a:	4053      	eors	r3, r2
 8005f2c:	82fb      	strh	r3, [r7, #22]
 8005f2e:	e002      	b.n	8005f36 <crc16_kermit+0x52>
            } else {
                crc >>= 1;
 8005f30:	8afb      	ldrh	r3, [r7, #22]
 8005f32:	085b      	lsrs	r3, r3, #1
 8005f34:	82fb      	strh	r3, [r7, #22]
        for (int j = 0; j < 8; j++) {
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2b07      	cmp	r3, #7
 8005f40:	ddea      	ble.n	8005f18 <crc16_kermit+0x34>
    for (size_t i = 0; i < length; i++) {
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	3301      	adds	r3, #1
 8005f46:	613b      	str	r3, [r7, #16]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d3d8      	bcc.n	8005f02 <crc16_kermit+0x1e>
            }
        }
    }

    return crc;
 8005f50:	8afb      	ldrh	r3, [r7, #22]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bc80      	pop	{r7}
 8005f5a:	4770      	bx	lr
 8005f5c:	ffff8408 	.word	0xffff8408

08005f60 <__cvt>:
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f66:	461d      	mov	r5, r3
 8005f68:	bfbb      	ittet	lt
 8005f6a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005f6e:	461d      	movlt	r5, r3
 8005f70:	2300      	movge	r3, #0
 8005f72:	232d      	movlt	r3, #45	@ 0x2d
 8005f74:	b088      	sub	sp, #32
 8005f76:	4614      	mov	r4, r2
 8005f78:	bfb8      	it	lt
 8005f7a:	4614      	movlt	r4, r2
 8005f7c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005f7e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005f80:	7013      	strb	r3, [r2, #0]
 8005f82:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f84:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005f88:	f023 0820 	bic.w	r8, r3, #32
 8005f8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f90:	d005      	beq.n	8005f9e <__cvt+0x3e>
 8005f92:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005f96:	d100      	bne.n	8005f9a <__cvt+0x3a>
 8005f98:	3601      	adds	r6, #1
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	e000      	b.n	8005fa0 <__cvt+0x40>
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	aa07      	add	r2, sp, #28
 8005fa2:	9204      	str	r2, [sp, #16]
 8005fa4:	aa06      	add	r2, sp, #24
 8005fa6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005faa:	e9cd 3600 	strd	r3, r6, [sp]
 8005fae:	4622      	mov	r2, r4
 8005fb0:	462b      	mov	r3, r5
 8005fb2:	f000 fe6d 	bl	8006c90 <_dtoa_r>
 8005fb6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005fba:	4607      	mov	r7, r0
 8005fbc:	d119      	bne.n	8005ff2 <__cvt+0x92>
 8005fbe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005fc0:	07db      	lsls	r3, r3, #31
 8005fc2:	d50e      	bpl.n	8005fe2 <__cvt+0x82>
 8005fc4:	eb00 0906 	add.w	r9, r0, r6
 8005fc8:	2200      	movs	r2, #0
 8005fca:	2300      	movs	r3, #0
 8005fcc:	4620      	mov	r0, r4
 8005fce:	4629      	mov	r1, r5
 8005fd0:	f7fa fcea 	bl	80009a8 <__aeabi_dcmpeq>
 8005fd4:	b108      	cbz	r0, 8005fda <__cvt+0x7a>
 8005fd6:	f8cd 901c 	str.w	r9, [sp, #28]
 8005fda:	2230      	movs	r2, #48	@ 0x30
 8005fdc:	9b07      	ldr	r3, [sp, #28]
 8005fde:	454b      	cmp	r3, r9
 8005fe0:	d31e      	bcc.n	8006020 <__cvt+0xc0>
 8005fe2:	4638      	mov	r0, r7
 8005fe4:	9b07      	ldr	r3, [sp, #28]
 8005fe6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005fe8:	1bdb      	subs	r3, r3, r7
 8005fea:	6013      	str	r3, [r2, #0]
 8005fec:	b008      	add	sp, #32
 8005fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ff2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005ff6:	eb00 0906 	add.w	r9, r0, r6
 8005ffa:	d1e5      	bne.n	8005fc8 <__cvt+0x68>
 8005ffc:	7803      	ldrb	r3, [r0, #0]
 8005ffe:	2b30      	cmp	r3, #48	@ 0x30
 8006000:	d10a      	bne.n	8006018 <__cvt+0xb8>
 8006002:	2200      	movs	r2, #0
 8006004:	2300      	movs	r3, #0
 8006006:	4620      	mov	r0, r4
 8006008:	4629      	mov	r1, r5
 800600a:	f7fa fccd 	bl	80009a8 <__aeabi_dcmpeq>
 800600e:	b918      	cbnz	r0, 8006018 <__cvt+0xb8>
 8006010:	f1c6 0601 	rsb	r6, r6, #1
 8006014:	f8ca 6000 	str.w	r6, [sl]
 8006018:	f8da 3000 	ldr.w	r3, [sl]
 800601c:	4499      	add	r9, r3
 800601e:	e7d3      	b.n	8005fc8 <__cvt+0x68>
 8006020:	1c59      	adds	r1, r3, #1
 8006022:	9107      	str	r1, [sp, #28]
 8006024:	701a      	strb	r2, [r3, #0]
 8006026:	e7d9      	b.n	8005fdc <__cvt+0x7c>

08006028 <__exponent>:
 8006028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800602a:	2900      	cmp	r1, #0
 800602c:	bfb6      	itet	lt
 800602e:	232d      	movlt	r3, #45	@ 0x2d
 8006030:	232b      	movge	r3, #43	@ 0x2b
 8006032:	4249      	neglt	r1, r1
 8006034:	2909      	cmp	r1, #9
 8006036:	7002      	strb	r2, [r0, #0]
 8006038:	7043      	strb	r3, [r0, #1]
 800603a:	dd29      	ble.n	8006090 <__exponent+0x68>
 800603c:	f10d 0307 	add.w	r3, sp, #7
 8006040:	461d      	mov	r5, r3
 8006042:	270a      	movs	r7, #10
 8006044:	fbb1 f6f7 	udiv	r6, r1, r7
 8006048:	461a      	mov	r2, r3
 800604a:	fb07 1416 	mls	r4, r7, r6, r1
 800604e:	3430      	adds	r4, #48	@ 0x30
 8006050:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006054:	460c      	mov	r4, r1
 8006056:	2c63      	cmp	r4, #99	@ 0x63
 8006058:	4631      	mov	r1, r6
 800605a:	f103 33ff 	add.w	r3, r3, #4294967295
 800605e:	dcf1      	bgt.n	8006044 <__exponent+0x1c>
 8006060:	3130      	adds	r1, #48	@ 0x30
 8006062:	1e94      	subs	r4, r2, #2
 8006064:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006068:	4623      	mov	r3, r4
 800606a:	1c41      	adds	r1, r0, #1
 800606c:	42ab      	cmp	r3, r5
 800606e:	d30a      	bcc.n	8006086 <__exponent+0x5e>
 8006070:	f10d 0309 	add.w	r3, sp, #9
 8006074:	1a9b      	subs	r3, r3, r2
 8006076:	42ac      	cmp	r4, r5
 8006078:	bf88      	it	hi
 800607a:	2300      	movhi	r3, #0
 800607c:	3302      	adds	r3, #2
 800607e:	4403      	add	r3, r0
 8006080:	1a18      	subs	r0, r3, r0
 8006082:	b003      	add	sp, #12
 8006084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006086:	f813 6b01 	ldrb.w	r6, [r3], #1
 800608a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800608e:	e7ed      	b.n	800606c <__exponent+0x44>
 8006090:	2330      	movs	r3, #48	@ 0x30
 8006092:	3130      	adds	r1, #48	@ 0x30
 8006094:	7083      	strb	r3, [r0, #2]
 8006096:	70c1      	strb	r1, [r0, #3]
 8006098:	1d03      	adds	r3, r0, #4
 800609a:	e7f1      	b.n	8006080 <__exponent+0x58>

0800609c <_printf_float>:
 800609c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a0:	b091      	sub	sp, #68	@ 0x44
 80060a2:	460c      	mov	r4, r1
 80060a4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80060a8:	4616      	mov	r6, r2
 80060aa:	461f      	mov	r7, r3
 80060ac:	4605      	mov	r5, r0
 80060ae:	f000 fce1 	bl	8006a74 <_localeconv_r>
 80060b2:	6803      	ldr	r3, [r0, #0]
 80060b4:	4618      	mov	r0, r3
 80060b6:	9308      	str	r3, [sp, #32]
 80060b8:	f7fa f84a 	bl	8000150 <strlen>
 80060bc:	2300      	movs	r3, #0
 80060be:	930e      	str	r3, [sp, #56]	@ 0x38
 80060c0:	f8d8 3000 	ldr.w	r3, [r8]
 80060c4:	9009      	str	r0, [sp, #36]	@ 0x24
 80060c6:	3307      	adds	r3, #7
 80060c8:	f023 0307 	bic.w	r3, r3, #7
 80060cc:	f103 0208 	add.w	r2, r3, #8
 80060d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80060d4:	f8d4 b000 	ldr.w	fp, [r4]
 80060d8:	f8c8 2000 	str.w	r2, [r8]
 80060dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80060e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060e6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80060ea:	f04f 32ff 	mov.w	r2, #4294967295
 80060ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80060f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80060f6:	4b9c      	ldr	r3, [pc, #624]	@ (8006368 <_printf_float+0x2cc>)
 80060f8:	f7fa fc88 	bl	8000a0c <__aeabi_dcmpun>
 80060fc:	bb70      	cbnz	r0, 800615c <_printf_float+0xc0>
 80060fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006102:	f04f 32ff 	mov.w	r2, #4294967295
 8006106:	4b98      	ldr	r3, [pc, #608]	@ (8006368 <_printf_float+0x2cc>)
 8006108:	f7fa fc62 	bl	80009d0 <__aeabi_dcmple>
 800610c:	bb30      	cbnz	r0, 800615c <_printf_float+0xc0>
 800610e:	2200      	movs	r2, #0
 8006110:	2300      	movs	r3, #0
 8006112:	4640      	mov	r0, r8
 8006114:	4649      	mov	r1, r9
 8006116:	f7fa fc51 	bl	80009bc <__aeabi_dcmplt>
 800611a:	b110      	cbz	r0, 8006122 <_printf_float+0x86>
 800611c:	232d      	movs	r3, #45	@ 0x2d
 800611e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006122:	4a92      	ldr	r2, [pc, #584]	@ (800636c <_printf_float+0x2d0>)
 8006124:	4b92      	ldr	r3, [pc, #584]	@ (8006370 <_printf_float+0x2d4>)
 8006126:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800612a:	bf94      	ite	ls
 800612c:	4690      	movls	r8, r2
 800612e:	4698      	movhi	r8, r3
 8006130:	2303      	movs	r3, #3
 8006132:	f04f 0900 	mov.w	r9, #0
 8006136:	6123      	str	r3, [r4, #16]
 8006138:	f02b 0304 	bic.w	r3, fp, #4
 800613c:	6023      	str	r3, [r4, #0]
 800613e:	4633      	mov	r3, r6
 8006140:	4621      	mov	r1, r4
 8006142:	4628      	mov	r0, r5
 8006144:	9700      	str	r7, [sp, #0]
 8006146:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006148:	f000 f9d4 	bl	80064f4 <_printf_common>
 800614c:	3001      	adds	r0, #1
 800614e:	f040 8090 	bne.w	8006272 <_printf_float+0x1d6>
 8006152:	f04f 30ff 	mov.w	r0, #4294967295
 8006156:	b011      	add	sp, #68	@ 0x44
 8006158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800615c:	4642      	mov	r2, r8
 800615e:	464b      	mov	r3, r9
 8006160:	4640      	mov	r0, r8
 8006162:	4649      	mov	r1, r9
 8006164:	f7fa fc52 	bl	8000a0c <__aeabi_dcmpun>
 8006168:	b148      	cbz	r0, 800617e <_printf_float+0xe2>
 800616a:	464b      	mov	r3, r9
 800616c:	2b00      	cmp	r3, #0
 800616e:	bfb8      	it	lt
 8006170:	232d      	movlt	r3, #45	@ 0x2d
 8006172:	4a80      	ldr	r2, [pc, #512]	@ (8006374 <_printf_float+0x2d8>)
 8006174:	bfb8      	it	lt
 8006176:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800617a:	4b7f      	ldr	r3, [pc, #508]	@ (8006378 <_printf_float+0x2dc>)
 800617c:	e7d3      	b.n	8006126 <_printf_float+0x8a>
 800617e:	6863      	ldr	r3, [r4, #4]
 8006180:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006184:	1c5a      	adds	r2, r3, #1
 8006186:	d13f      	bne.n	8006208 <_printf_float+0x16c>
 8006188:	2306      	movs	r3, #6
 800618a:	6063      	str	r3, [r4, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006192:	6023      	str	r3, [r4, #0]
 8006194:	9206      	str	r2, [sp, #24]
 8006196:	aa0e      	add	r2, sp, #56	@ 0x38
 8006198:	e9cd a204 	strd	sl, r2, [sp, #16]
 800619c:	aa0d      	add	r2, sp, #52	@ 0x34
 800619e:	9203      	str	r2, [sp, #12]
 80061a0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80061a4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80061a8:	6863      	ldr	r3, [r4, #4]
 80061aa:	4642      	mov	r2, r8
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	4628      	mov	r0, r5
 80061b0:	464b      	mov	r3, r9
 80061b2:	910a      	str	r1, [sp, #40]	@ 0x28
 80061b4:	f7ff fed4 	bl	8005f60 <__cvt>
 80061b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061ba:	4680      	mov	r8, r0
 80061bc:	2947      	cmp	r1, #71	@ 0x47
 80061be:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80061c0:	d128      	bne.n	8006214 <_printf_float+0x178>
 80061c2:	1cc8      	adds	r0, r1, #3
 80061c4:	db02      	blt.n	80061cc <_printf_float+0x130>
 80061c6:	6863      	ldr	r3, [r4, #4]
 80061c8:	4299      	cmp	r1, r3
 80061ca:	dd40      	ble.n	800624e <_printf_float+0x1b2>
 80061cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80061d0:	fa5f fa8a 	uxtb.w	sl, sl
 80061d4:	4652      	mov	r2, sl
 80061d6:	3901      	subs	r1, #1
 80061d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80061dc:	910d      	str	r1, [sp, #52]	@ 0x34
 80061de:	f7ff ff23 	bl	8006028 <__exponent>
 80061e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80061e4:	4681      	mov	r9, r0
 80061e6:	1813      	adds	r3, r2, r0
 80061e8:	2a01      	cmp	r2, #1
 80061ea:	6123      	str	r3, [r4, #16]
 80061ec:	dc02      	bgt.n	80061f4 <_printf_float+0x158>
 80061ee:	6822      	ldr	r2, [r4, #0]
 80061f0:	07d2      	lsls	r2, r2, #31
 80061f2:	d501      	bpl.n	80061f8 <_printf_float+0x15c>
 80061f4:	3301      	adds	r3, #1
 80061f6:	6123      	str	r3, [r4, #16]
 80061f8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d09e      	beq.n	800613e <_printf_float+0xa2>
 8006200:	232d      	movs	r3, #45	@ 0x2d
 8006202:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006206:	e79a      	b.n	800613e <_printf_float+0xa2>
 8006208:	2947      	cmp	r1, #71	@ 0x47
 800620a:	d1bf      	bne.n	800618c <_printf_float+0xf0>
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1bd      	bne.n	800618c <_printf_float+0xf0>
 8006210:	2301      	movs	r3, #1
 8006212:	e7ba      	b.n	800618a <_printf_float+0xee>
 8006214:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006218:	d9dc      	bls.n	80061d4 <_printf_float+0x138>
 800621a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800621e:	d118      	bne.n	8006252 <_printf_float+0x1b6>
 8006220:	2900      	cmp	r1, #0
 8006222:	6863      	ldr	r3, [r4, #4]
 8006224:	dd0b      	ble.n	800623e <_printf_float+0x1a2>
 8006226:	6121      	str	r1, [r4, #16]
 8006228:	b913      	cbnz	r3, 8006230 <_printf_float+0x194>
 800622a:	6822      	ldr	r2, [r4, #0]
 800622c:	07d0      	lsls	r0, r2, #31
 800622e:	d502      	bpl.n	8006236 <_printf_float+0x19a>
 8006230:	3301      	adds	r3, #1
 8006232:	440b      	add	r3, r1
 8006234:	6123      	str	r3, [r4, #16]
 8006236:	f04f 0900 	mov.w	r9, #0
 800623a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800623c:	e7dc      	b.n	80061f8 <_printf_float+0x15c>
 800623e:	b913      	cbnz	r3, 8006246 <_printf_float+0x1aa>
 8006240:	6822      	ldr	r2, [r4, #0]
 8006242:	07d2      	lsls	r2, r2, #31
 8006244:	d501      	bpl.n	800624a <_printf_float+0x1ae>
 8006246:	3302      	adds	r3, #2
 8006248:	e7f4      	b.n	8006234 <_printf_float+0x198>
 800624a:	2301      	movs	r3, #1
 800624c:	e7f2      	b.n	8006234 <_printf_float+0x198>
 800624e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006252:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006254:	4299      	cmp	r1, r3
 8006256:	db05      	blt.n	8006264 <_printf_float+0x1c8>
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	6121      	str	r1, [r4, #16]
 800625c:	07d8      	lsls	r0, r3, #31
 800625e:	d5ea      	bpl.n	8006236 <_printf_float+0x19a>
 8006260:	1c4b      	adds	r3, r1, #1
 8006262:	e7e7      	b.n	8006234 <_printf_float+0x198>
 8006264:	2900      	cmp	r1, #0
 8006266:	bfcc      	ite	gt
 8006268:	2201      	movgt	r2, #1
 800626a:	f1c1 0202 	rsble	r2, r1, #2
 800626e:	4413      	add	r3, r2
 8006270:	e7e0      	b.n	8006234 <_printf_float+0x198>
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	055a      	lsls	r2, r3, #21
 8006276:	d407      	bmi.n	8006288 <_printf_float+0x1ec>
 8006278:	6923      	ldr	r3, [r4, #16]
 800627a:	4642      	mov	r2, r8
 800627c:	4631      	mov	r1, r6
 800627e:	4628      	mov	r0, r5
 8006280:	47b8      	blx	r7
 8006282:	3001      	adds	r0, #1
 8006284:	d12b      	bne.n	80062de <_printf_float+0x242>
 8006286:	e764      	b.n	8006152 <_printf_float+0xb6>
 8006288:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800628c:	f240 80dc 	bls.w	8006448 <_printf_float+0x3ac>
 8006290:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006294:	2200      	movs	r2, #0
 8006296:	2300      	movs	r3, #0
 8006298:	f7fa fb86 	bl	80009a8 <__aeabi_dcmpeq>
 800629c:	2800      	cmp	r0, #0
 800629e:	d033      	beq.n	8006308 <_printf_float+0x26c>
 80062a0:	2301      	movs	r3, #1
 80062a2:	4631      	mov	r1, r6
 80062a4:	4628      	mov	r0, r5
 80062a6:	4a35      	ldr	r2, [pc, #212]	@ (800637c <_printf_float+0x2e0>)
 80062a8:	47b8      	blx	r7
 80062aa:	3001      	adds	r0, #1
 80062ac:	f43f af51 	beq.w	8006152 <_printf_float+0xb6>
 80062b0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80062b4:	4543      	cmp	r3, r8
 80062b6:	db02      	blt.n	80062be <_printf_float+0x222>
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	07d8      	lsls	r0, r3, #31
 80062bc:	d50f      	bpl.n	80062de <_printf_float+0x242>
 80062be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80062c2:	4631      	mov	r1, r6
 80062c4:	4628      	mov	r0, r5
 80062c6:	47b8      	blx	r7
 80062c8:	3001      	adds	r0, #1
 80062ca:	f43f af42 	beq.w	8006152 <_printf_float+0xb6>
 80062ce:	f04f 0900 	mov.w	r9, #0
 80062d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80062d6:	f104 0a1a 	add.w	sl, r4, #26
 80062da:	45c8      	cmp	r8, r9
 80062dc:	dc09      	bgt.n	80062f2 <_printf_float+0x256>
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	079b      	lsls	r3, r3, #30
 80062e2:	f100 8102 	bmi.w	80064ea <_printf_float+0x44e>
 80062e6:	68e0      	ldr	r0, [r4, #12]
 80062e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062ea:	4298      	cmp	r0, r3
 80062ec:	bfb8      	it	lt
 80062ee:	4618      	movlt	r0, r3
 80062f0:	e731      	b.n	8006156 <_printf_float+0xba>
 80062f2:	2301      	movs	r3, #1
 80062f4:	4652      	mov	r2, sl
 80062f6:	4631      	mov	r1, r6
 80062f8:	4628      	mov	r0, r5
 80062fa:	47b8      	blx	r7
 80062fc:	3001      	adds	r0, #1
 80062fe:	f43f af28 	beq.w	8006152 <_printf_float+0xb6>
 8006302:	f109 0901 	add.w	r9, r9, #1
 8006306:	e7e8      	b.n	80062da <_printf_float+0x23e>
 8006308:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800630a:	2b00      	cmp	r3, #0
 800630c:	dc38      	bgt.n	8006380 <_printf_float+0x2e4>
 800630e:	2301      	movs	r3, #1
 8006310:	4631      	mov	r1, r6
 8006312:	4628      	mov	r0, r5
 8006314:	4a19      	ldr	r2, [pc, #100]	@ (800637c <_printf_float+0x2e0>)
 8006316:	47b8      	blx	r7
 8006318:	3001      	adds	r0, #1
 800631a:	f43f af1a 	beq.w	8006152 <_printf_float+0xb6>
 800631e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006322:	ea59 0303 	orrs.w	r3, r9, r3
 8006326:	d102      	bne.n	800632e <_printf_float+0x292>
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	07d9      	lsls	r1, r3, #31
 800632c:	d5d7      	bpl.n	80062de <_printf_float+0x242>
 800632e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006332:	4631      	mov	r1, r6
 8006334:	4628      	mov	r0, r5
 8006336:	47b8      	blx	r7
 8006338:	3001      	adds	r0, #1
 800633a:	f43f af0a 	beq.w	8006152 <_printf_float+0xb6>
 800633e:	f04f 0a00 	mov.w	sl, #0
 8006342:	f104 0b1a 	add.w	fp, r4, #26
 8006346:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006348:	425b      	negs	r3, r3
 800634a:	4553      	cmp	r3, sl
 800634c:	dc01      	bgt.n	8006352 <_printf_float+0x2b6>
 800634e:	464b      	mov	r3, r9
 8006350:	e793      	b.n	800627a <_printf_float+0x1de>
 8006352:	2301      	movs	r3, #1
 8006354:	465a      	mov	r2, fp
 8006356:	4631      	mov	r1, r6
 8006358:	4628      	mov	r0, r5
 800635a:	47b8      	blx	r7
 800635c:	3001      	adds	r0, #1
 800635e:	f43f aef8 	beq.w	8006152 <_printf_float+0xb6>
 8006362:	f10a 0a01 	add.w	sl, sl, #1
 8006366:	e7ee      	b.n	8006346 <_printf_float+0x2aa>
 8006368:	7fefffff 	.word	0x7fefffff
 800636c:	08008f8a 	.word	0x08008f8a
 8006370:	08008f8e 	.word	0x08008f8e
 8006374:	08008f92 	.word	0x08008f92
 8006378:	08008f96 	.word	0x08008f96
 800637c:	08008f9a 	.word	0x08008f9a
 8006380:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006382:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006386:	4553      	cmp	r3, sl
 8006388:	bfa8      	it	ge
 800638a:	4653      	movge	r3, sl
 800638c:	2b00      	cmp	r3, #0
 800638e:	4699      	mov	r9, r3
 8006390:	dc36      	bgt.n	8006400 <_printf_float+0x364>
 8006392:	f04f 0b00 	mov.w	fp, #0
 8006396:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800639a:	f104 021a 	add.w	r2, r4, #26
 800639e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80063a2:	eba3 0309 	sub.w	r3, r3, r9
 80063a6:	455b      	cmp	r3, fp
 80063a8:	dc31      	bgt.n	800640e <_printf_float+0x372>
 80063aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063ac:	459a      	cmp	sl, r3
 80063ae:	dc3a      	bgt.n	8006426 <_printf_float+0x38a>
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	07da      	lsls	r2, r3, #31
 80063b4:	d437      	bmi.n	8006426 <_printf_float+0x38a>
 80063b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063b8:	ebaa 0903 	sub.w	r9, sl, r3
 80063bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063be:	ebaa 0303 	sub.w	r3, sl, r3
 80063c2:	4599      	cmp	r9, r3
 80063c4:	bfa8      	it	ge
 80063c6:	4699      	movge	r9, r3
 80063c8:	f1b9 0f00 	cmp.w	r9, #0
 80063cc:	dc33      	bgt.n	8006436 <_printf_float+0x39a>
 80063ce:	f04f 0800 	mov.w	r8, #0
 80063d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063d6:	f104 0b1a 	add.w	fp, r4, #26
 80063da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063dc:	ebaa 0303 	sub.w	r3, sl, r3
 80063e0:	eba3 0309 	sub.w	r3, r3, r9
 80063e4:	4543      	cmp	r3, r8
 80063e6:	f77f af7a 	ble.w	80062de <_printf_float+0x242>
 80063ea:	2301      	movs	r3, #1
 80063ec:	465a      	mov	r2, fp
 80063ee:	4631      	mov	r1, r6
 80063f0:	4628      	mov	r0, r5
 80063f2:	47b8      	blx	r7
 80063f4:	3001      	adds	r0, #1
 80063f6:	f43f aeac 	beq.w	8006152 <_printf_float+0xb6>
 80063fa:	f108 0801 	add.w	r8, r8, #1
 80063fe:	e7ec      	b.n	80063da <_printf_float+0x33e>
 8006400:	4642      	mov	r2, r8
 8006402:	4631      	mov	r1, r6
 8006404:	4628      	mov	r0, r5
 8006406:	47b8      	blx	r7
 8006408:	3001      	adds	r0, #1
 800640a:	d1c2      	bne.n	8006392 <_printf_float+0x2f6>
 800640c:	e6a1      	b.n	8006152 <_printf_float+0xb6>
 800640e:	2301      	movs	r3, #1
 8006410:	4631      	mov	r1, r6
 8006412:	4628      	mov	r0, r5
 8006414:	920a      	str	r2, [sp, #40]	@ 0x28
 8006416:	47b8      	blx	r7
 8006418:	3001      	adds	r0, #1
 800641a:	f43f ae9a 	beq.w	8006152 <_printf_float+0xb6>
 800641e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006420:	f10b 0b01 	add.w	fp, fp, #1
 8006424:	e7bb      	b.n	800639e <_printf_float+0x302>
 8006426:	4631      	mov	r1, r6
 8006428:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800642c:	4628      	mov	r0, r5
 800642e:	47b8      	blx	r7
 8006430:	3001      	adds	r0, #1
 8006432:	d1c0      	bne.n	80063b6 <_printf_float+0x31a>
 8006434:	e68d      	b.n	8006152 <_printf_float+0xb6>
 8006436:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006438:	464b      	mov	r3, r9
 800643a:	4631      	mov	r1, r6
 800643c:	4628      	mov	r0, r5
 800643e:	4442      	add	r2, r8
 8006440:	47b8      	blx	r7
 8006442:	3001      	adds	r0, #1
 8006444:	d1c3      	bne.n	80063ce <_printf_float+0x332>
 8006446:	e684      	b.n	8006152 <_printf_float+0xb6>
 8006448:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800644c:	f1ba 0f01 	cmp.w	sl, #1
 8006450:	dc01      	bgt.n	8006456 <_printf_float+0x3ba>
 8006452:	07db      	lsls	r3, r3, #31
 8006454:	d536      	bpl.n	80064c4 <_printf_float+0x428>
 8006456:	2301      	movs	r3, #1
 8006458:	4642      	mov	r2, r8
 800645a:	4631      	mov	r1, r6
 800645c:	4628      	mov	r0, r5
 800645e:	47b8      	blx	r7
 8006460:	3001      	adds	r0, #1
 8006462:	f43f ae76 	beq.w	8006152 <_printf_float+0xb6>
 8006466:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800646a:	4631      	mov	r1, r6
 800646c:	4628      	mov	r0, r5
 800646e:	47b8      	blx	r7
 8006470:	3001      	adds	r0, #1
 8006472:	f43f ae6e 	beq.w	8006152 <_printf_float+0xb6>
 8006476:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800647a:	2200      	movs	r2, #0
 800647c:	2300      	movs	r3, #0
 800647e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006482:	f7fa fa91 	bl	80009a8 <__aeabi_dcmpeq>
 8006486:	b9c0      	cbnz	r0, 80064ba <_printf_float+0x41e>
 8006488:	4653      	mov	r3, sl
 800648a:	f108 0201 	add.w	r2, r8, #1
 800648e:	4631      	mov	r1, r6
 8006490:	4628      	mov	r0, r5
 8006492:	47b8      	blx	r7
 8006494:	3001      	adds	r0, #1
 8006496:	d10c      	bne.n	80064b2 <_printf_float+0x416>
 8006498:	e65b      	b.n	8006152 <_printf_float+0xb6>
 800649a:	2301      	movs	r3, #1
 800649c:	465a      	mov	r2, fp
 800649e:	4631      	mov	r1, r6
 80064a0:	4628      	mov	r0, r5
 80064a2:	47b8      	blx	r7
 80064a4:	3001      	adds	r0, #1
 80064a6:	f43f ae54 	beq.w	8006152 <_printf_float+0xb6>
 80064aa:	f108 0801 	add.w	r8, r8, #1
 80064ae:	45d0      	cmp	r8, sl
 80064b0:	dbf3      	blt.n	800649a <_printf_float+0x3fe>
 80064b2:	464b      	mov	r3, r9
 80064b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80064b8:	e6e0      	b.n	800627c <_printf_float+0x1e0>
 80064ba:	f04f 0800 	mov.w	r8, #0
 80064be:	f104 0b1a 	add.w	fp, r4, #26
 80064c2:	e7f4      	b.n	80064ae <_printf_float+0x412>
 80064c4:	2301      	movs	r3, #1
 80064c6:	4642      	mov	r2, r8
 80064c8:	e7e1      	b.n	800648e <_printf_float+0x3f2>
 80064ca:	2301      	movs	r3, #1
 80064cc:	464a      	mov	r2, r9
 80064ce:	4631      	mov	r1, r6
 80064d0:	4628      	mov	r0, r5
 80064d2:	47b8      	blx	r7
 80064d4:	3001      	adds	r0, #1
 80064d6:	f43f ae3c 	beq.w	8006152 <_printf_float+0xb6>
 80064da:	f108 0801 	add.w	r8, r8, #1
 80064de:	68e3      	ldr	r3, [r4, #12]
 80064e0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80064e2:	1a5b      	subs	r3, r3, r1
 80064e4:	4543      	cmp	r3, r8
 80064e6:	dcf0      	bgt.n	80064ca <_printf_float+0x42e>
 80064e8:	e6fd      	b.n	80062e6 <_printf_float+0x24a>
 80064ea:	f04f 0800 	mov.w	r8, #0
 80064ee:	f104 0919 	add.w	r9, r4, #25
 80064f2:	e7f4      	b.n	80064de <_printf_float+0x442>

080064f4 <_printf_common>:
 80064f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064f8:	4616      	mov	r6, r2
 80064fa:	4698      	mov	r8, r3
 80064fc:	688a      	ldr	r2, [r1, #8]
 80064fe:	690b      	ldr	r3, [r1, #16]
 8006500:	4607      	mov	r7, r0
 8006502:	4293      	cmp	r3, r2
 8006504:	bfb8      	it	lt
 8006506:	4613      	movlt	r3, r2
 8006508:	6033      	str	r3, [r6, #0]
 800650a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800650e:	460c      	mov	r4, r1
 8006510:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006514:	b10a      	cbz	r2, 800651a <_printf_common+0x26>
 8006516:	3301      	adds	r3, #1
 8006518:	6033      	str	r3, [r6, #0]
 800651a:	6823      	ldr	r3, [r4, #0]
 800651c:	0699      	lsls	r1, r3, #26
 800651e:	bf42      	ittt	mi
 8006520:	6833      	ldrmi	r3, [r6, #0]
 8006522:	3302      	addmi	r3, #2
 8006524:	6033      	strmi	r3, [r6, #0]
 8006526:	6825      	ldr	r5, [r4, #0]
 8006528:	f015 0506 	ands.w	r5, r5, #6
 800652c:	d106      	bne.n	800653c <_printf_common+0x48>
 800652e:	f104 0a19 	add.w	sl, r4, #25
 8006532:	68e3      	ldr	r3, [r4, #12]
 8006534:	6832      	ldr	r2, [r6, #0]
 8006536:	1a9b      	subs	r3, r3, r2
 8006538:	42ab      	cmp	r3, r5
 800653a:	dc2b      	bgt.n	8006594 <_printf_common+0xa0>
 800653c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006540:	6822      	ldr	r2, [r4, #0]
 8006542:	3b00      	subs	r3, #0
 8006544:	bf18      	it	ne
 8006546:	2301      	movne	r3, #1
 8006548:	0692      	lsls	r2, r2, #26
 800654a:	d430      	bmi.n	80065ae <_printf_common+0xba>
 800654c:	4641      	mov	r1, r8
 800654e:	4638      	mov	r0, r7
 8006550:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006554:	47c8      	blx	r9
 8006556:	3001      	adds	r0, #1
 8006558:	d023      	beq.n	80065a2 <_printf_common+0xae>
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	6922      	ldr	r2, [r4, #16]
 800655e:	f003 0306 	and.w	r3, r3, #6
 8006562:	2b04      	cmp	r3, #4
 8006564:	bf14      	ite	ne
 8006566:	2500      	movne	r5, #0
 8006568:	6833      	ldreq	r3, [r6, #0]
 800656a:	f04f 0600 	mov.w	r6, #0
 800656e:	bf08      	it	eq
 8006570:	68e5      	ldreq	r5, [r4, #12]
 8006572:	f104 041a 	add.w	r4, r4, #26
 8006576:	bf08      	it	eq
 8006578:	1aed      	subeq	r5, r5, r3
 800657a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800657e:	bf08      	it	eq
 8006580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006584:	4293      	cmp	r3, r2
 8006586:	bfc4      	itt	gt
 8006588:	1a9b      	subgt	r3, r3, r2
 800658a:	18ed      	addgt	r5, r5, r3
 800658c:	42b5      	cmp	r5, r6
 800658e:	d11a      	bne.n	80065c6 <_printf_common+0xd2>
 8006590:	2000      	movs	r0, #0
 8006592:	e008      	b.n	80065a6 <_printf_common+0xb2>
 8006594:	2301      	movs	r3, #1
 8006596:	4652      	mov	r2, sl
 8006598:	4641      	mov	r1, r8
 800659a:	4638      	mov	r0, r7
 800659c:	47c8      	blx	r9
 800659e:	3001      	adds	r0, #1
 80065a0:	d103      	bne.n	80065aa <_printf_common+0xb6>
 80065a2:	f04f 30ff 	mov.w	r0, #4294967295
 80065a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065aa:	3501      	adds	r5, #1
 80065ac:	e7c1      	b.n	8006532 <_printf_common+0x3e>
 80065ae:	2030      	movs	r0, #48	@ 0x30
 80065b0:	18e1      	adds	r1, r4, r3
 80065b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065b6:	1c5a      	adds	r2, r3, #1
 80065b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065bc:	4422      	add	r2, r4
 80065be:	3302      	adds	r3, #2
 80065c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065c4:	e7c2      	b.n	800654c <_printf_common+0x58>
 80065c6:	2301      	movs	r3, #1
 80065c8:	4622      	mov	r2, r4
 80065ca:	4641      	mov	r1, r8
 80065cc:	4638      	mov	r0, r7
 80065ce:	47c8      	blx	r9
 80065d0:	3001      	adds	r0, #1
 80065d2:	d0e6      	beq.n	80065a2 <_printf_common+0xae>
 80065d4:	3601      	adds	r6, #1
 80065d6:	e7d9      	b.n	800658c <_printf_common+0x98>

080065d8 <_printf_i>:
 80065d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065dc:	7e0f      	ldrb	r7, [r1, #24]
 80065de:	4691      	mov	r9, r2
 80065e0:	2f78      	cmp	r7, #120	@ 0x78
 80065e2:	4680      	mov	r8, r0
 80065e4:	460c      	mov	r4, r1
 80065e6:	469a      	mov	sl, r3
 80065e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80065ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80065ee:	d807      	bhi.n	8006600 <_printf_i+0x28>
 80065f0:	2f62      	cmp	r7, #98	@ 0x62
 80065f2:	d80a      	bhi.n	800660a <_printf_i+0x32>
 80065f4:	2f00      	cmp	r7, #0
 80065f6:	f000 80d3 	beq.w	80067a0 <_printf_i+0x1c8>
 80065fa:	2f58      	cmp	r7, #88	@ 0x58
 80065fc:	f000 80ba 	beq.w	8006774 <_printf_i+0x19c>
 8006600:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006604:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006608:	e03a      	b.n	8006680 <_printf_i+0xa8>
 800660a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800660e:	2b15      	cmp	r3, #21
 8006610:	d8f6      	bhi.n	8006600 <_printf_i+0x28>
 8006612:	a101      	add	r1, pc, #4	@ (adr r1, 8006618 <_printf_i+0x40>)
 8006614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006618:	08006671 	.word	0x08006671
 800661c:	08006685 	.word	0x08006685
 8006620:	08006601 	.word	0x08006601
 8006624:	08006601 	.word	0x08006601
 8006628:	08006601 	.word	0x08006601
 800662c:	08006601 	.word	0x08006601
 8006630:	08006685 	.word	0x08006685
 8006634:	08006601 	.word	0x08006601
 8006638:	08006601 	.word	0x08006601
 800663c:	08006601 	.word	0x08006601
 8006640:	08006601 	.word	0x08006601
 8006644:	08006787 	.word	0x08006787
 8006648:	080066af 	.word	0x080066af
 800664c:	08006741 	.word	0x08006741
 8006650:	08006601 	.word	0x08006601
 8006654:	08006601 	.word	0x08006601
 8006658:	080067a9 	.word	0x080067a9
 800665c:	08006601 	.word	0x08006601
 8006660:	080066af 	.word	0x080066af
 8006664:	08006601 	.word	0x08006601
 8006668:	08006601 	.word	0x08006601
 800666c:	08006749 	.word	0x08006749
 8006670:	6833      	ldr	r3, [r6, #0]
 8006672:	1d1a      	adds	r2, r3, #4
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6032      	str	r2, [r6, #0]
 8006678:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800667c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006680:	2301      	movs	r3, #1
 8006682:	e09e      	b.n	80067c2 <_printf_i+0x1ea>
 8006684:	6833      	ldr	r3, [r6, #0]
 8006686:	6820      	ldr	r0, [r4, #0]
 8006688:	1d19      	adds	r1, r3, #4
 800668a:	6031      	str	r1, [r6, #0]
 800668c:	0606      	lsls	r6, r0, #24
 800668e:	d501      	bpl.n	8006694 <_printf_i+0xbc>
 8006690:	681d      	ldr	r5, [r3, #0]
 8006692:	e003      	b.n	800669c <_printf_i+0xc4>
 8006694:	0645      	lsls	r5, r0, #25
 8006696:	d5fb      	bpl.n	8006690 <_printf_i+0xb8>
 8006698:	f9b3 5000 	ldrsh.w	r5, [r3]
 800669c:	2d00      	cmp	r5, #0
 800669e:	da03      	bge.n	80066a8 <_printf_i+0xd0>
 80066a0:	232d      	movs	r3, #45	@ 0x2d
 80066a2:	426d      	negs	r5, r5
 80066a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066a8:	230a      	movs	r3, #10
 80066aa:	4859      	ldr	r0, [pc, #356]	@ (8006810 <_printf_i+0x238>)
 80066ac:	e011      	b.n	80066d2 <_printf_i+0xfa>
 80066ae:	6821      	ldr	r1, [r4, #0]
 80066b0:	6833      	ldr	r3, [r6, #0]
 80066b2:	0608      	lsls	r0, r1, #24
 80066b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80066b8:	d402      	bmi.n	80066c0 <_printf_i+0xe8>
 80066ba:	0649      	lsls	r1, r1, #25
 80066bc:	bf48      	it	mi
 80066be:	b2ad      	uxthmi	r5, r5
 80066c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80066c2:	6033      	str	r3, [r6, #0]
 80066c4:	bf14      	ite	ne
 80066c6:	230a      	movne	r3, #10
 80066c8:	2308      	moveq	r3, #8
 80066ca:	4851      	ldr	r0, [pc, #324]	@ (8006810 <_printf_i+0x238>)
 80066cc:	2100      	movs	r1, #0
 80066ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066d2:	6866      	ldr	r6, [r4, #4]
 80066d4:	2e00      	cmp	r6, #0
 80066d6:	bfa8      	it	ge
 80066d8:	6821      	ldrge	r1, [r4, #0]
 80066da:	60a6      	str	r6, [r4, #8]
 80066dc:	bfa4      	itt	ge
 80066de:	f021 0104 	bicge.w	r1, r1, #4
 80066e2:	6021      	strge	r1, [r4, #0]
 80066e4:	b90d      	cbnz	r5, 80066ea <_printf_i+0x112>
 80066e6:	2e00      	cmp	r6, #0
 80066e8:	d04b      	beq.n	8006782 <_printf_i+0x1aa>
 80066ea:	4616      	mov	r6, r2
 80066ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80066f0:	fb03 5711 	mls	r7, r3, r1, r5
 80066f4:	5dc7      	ldrb	r7, [r0, r7]
 80066f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066fa:	462f      	mov	r7, r5
 80066fc:	42bb      	cmp	r3, r7
 80066fe:	460d      	mov	r5, r1
 8006700:	d9f4      	bls.n	80066ec <_printf_i+0x114>
 8006702:	2b08      	cmp	r3, #8
 8006704:	d10b      	bne.n	800671e <_printf_i+0x146>
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	07df      	lsls	r7, r3, #31
 800670a:	d508      	bpl.n	800671e <_printf_i+0x146>
 800670c:	6923      	ldr	r3, [r4, #16]
 800670e:	6861      	ldr	r1, [r4, #4]
 8006710:	4299      	cmp	r1, r3
 8006712:	bfde      	ittt	le
 8006714:	2330      	movle	r3, #48	@ 0x30
 8006716:	f806 3c01 	strble.w	r3, [r6, #-1]
 800671a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800671e:	1b92      	subs	r2, r2, r6
 8006720:	6122      	str	r2, [r4, #16]
 8006722:	464b      	mov	r3, r9
 8006724:	4621      	mov	r1, r4
 8006726:	4640      	mov	r0, r8
 8006728:	f8cd a000 	str.w	sl, [sp]
 800672c:	aa03      	add	r2, sp, #12
 800672e:	f7ff fee1 	bl	80064f4 <_printf_common>
 8006732:	3001      	adds	r0, #1
 8006734:	d14a      	bne.n	80067cc <_printf_i+0x1f4>
 8006736:	f04f 30ff 	mov.w	r0, #4294967295
 800673a:	b004      	add	sp, #16
 800673c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	f043 0320 	orr.w	r3, r3, #32
 8006746:	6023      	str	r3, [r4, #0]
 8006748:	2778      	movs	r7, #120	@ 0x78
 800674a:	4832      	ldr	r0, [pc, #200]	@ (8006814 <_printf_i+0x23c>)
 800674c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	6831      	ldr	r1, [r6, #0]
 8006754:	061f      	lsls	r7, r3, #24
 8006756:	f851 5b04 	ldr.w	r5, [r1], #4
 800675a:	d402      	bmi.n	8006762 <_printf_i+0x18a>
 800675c:	065f      	lsls	r7, r3, #25
 800675e:	bf48      	it	mi
 8006760:	b2ad      	uxthmi	r5, r5
 8006762:	6031      	str	r1, [r6, #0]
 8006764:	07d9      	lsls	r1, r3, #31
 8006766:	bf44      	itt	mi
 8006768:	f043 0320 	orrmi.w	r3, r3, #32
 800676c:	6023      	strmi	r3, [r4, #0]
 800676e:	b11d      	cbz	r5, 8006778 <_printf_i+0x1a0>
 8006770:	2310      	movs	r3, #16
 8006772:	e7ab      	b.n	80066cc <_printf_i+0xf4>
 8006774:	4826      	ldr	r0, [pc, #152]	@ (8006810 <_printf_i+0x238>)
 8006776:	e7e9      	b.n	800674c <_printf_i+0x174>
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	f023 0320 	bic.w	r3, r3, #32
 800677e:	6023      	str	r3, [r4, #0]
 8006780:	e7f6      	b.n	8006770 <_printf_i+0x198>
 8006782:	4616      	mov	r6, r2
 8006784:	e7bd      	b.n	8006702 <_printf_i+0x12a>
 8006786:	6833      	ldr	r3, [r6, #0]
 8006788:	6825      	ldr	r5, [r4, #0]
 800678a:	1d18      	adds	r0, r3, #4
 800678c:	6961      	ldr	r1, [r4, #20]
 800678e:	6030      	str	r0, [r6, #0]
 8006790:	062e      	lsls	r6, r5, #24
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	d501      	bpl.n	800679a <_printf_i+0x1c2>
 8006796:	6019      	str	r1, [r3, #0]
 8006798:	e002      	b.n	80067a0 <_printf_i+0x1c8>
 800679a:	0668      	lsls	r0, r5, #25
 800679c:	d5fb      	bpl.n	8006796 <_printf_i+0x1be>
 800679e:	8019      	strh	r1, [r3, #0]
 80067a0:	2300      	movs	r3, #0
 80067a2:	4616      	mov	r6, r2
 80067a4:	6123      	str	r3, [r4, #16]
 80067a6:	e7bc      	b.n	8006722 <_printf_i+0x14a>
 80067a8:	6833      	ldr	r3, [r6, #0]
 80067aa:	2100      	movs	r1, #0
 80067ac:	1d1a      	adds	r2, r3, #4
 80067ae:	6032      	str	r2, [r6, #0]
 80067b0:	681e      	ldr	r6, [r3, #0]
 80067b2:	6862      	ldr	r2, [r4, #4]
 80067b4:	4630      	mov	r0, r6
 80067b6:	f000 f9d4 	bl	8006b62 <memchr>
 80067ba:	b108      	cbz	r0, 80067c0 <_printf_i+0x1e8>
 80067bc:	1b80      	subs	r0, r0, r6
 80067be:	6060      	str	r0, [r4, #4]
 80067c0:	6863      	ldr	r3, [r4, #4]
 80067c2:	6123      	str	r3, [r4, #16]
 80067c4:	2300      	movs	r3, #0
 80067c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067ca:	e7aa      	b.n	8006722 <_printf_i+0x14a>
 80067cc:	4632      	mov	r2, r6
 80067ce:	4649      	mov	r1, r9
 80067d0:	4640      	mov	r0, r8
 80067d2:	6923      	ldr	r3, [r4, #16]
 80067d4:	47d0      	blx	sl
 80067d6:	3001      	adds	r0, #1
 80067d8:	d0ad      	beq.n	8006736 <_printf_i+0x15e>
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	079b      	lsls	r3, r3, #30
 80067de:	d413      	bmi.n	8006808 <_printf_i+0x230>
 80067e0:	68e0      	ldr	r0, [r4, #12]
 80067e2:	9b03      	ldr	r3, [sp, #12]
 80067e4:	4298      	cmp	r0, r3
 80067e6:	bfb8      	it	lt
 80067e8:	4618      	movlt	r0, r3
 80067ea:	e7a6      	b.n	800673a <_printf_i+0x162>
 80067ec:	2301      	movs	r3, #1
 80067ee:	4632      	mov	r2, r6
 80067f0:	4649      	mov	r1, r9
 80067f2:	4640      	mov	r0, r8
 80067f4:	47d0      	blx	sl
 80067f6:	3001      	adds	r0, #1
 80067f8:	d09d      	beq.n	8006736 <_printf_i+0x15e>
 80067fa:	3501      	adds	r5, #1
 80067fc:	68e3      	ldr	r3, [r4, #12]
 80067fe:	9903      	ldr	r1, [sp, #12]
 8006800:	1a5b      	subs	r3, r3, r1
 8006802:	42ab      	cmp	r3, r5
 8006804:	dcf2      	bgt.n	80067ec <_printf_i+0x214>
 8006806:	e7eb      	b.n	80067e0 <_printf_i+0x208>
 8006808:	2500      	movs	r5, #0
 800680a:	f104 0619 	add.w	r6, r4, #25
 800680e:	e7f5      	b.n	80067fc <_printf_i+0x224>
 8006810:	08008f9c 	.word	0x08008f9c
 8006814:	08008fad 	.word	0x08008fad

08006818 <std>:
 8006818:	2300      	movs	r3, #0
 800681a:	b510      	push	{r4, lr}
 800681c:	4604      	mov	r4, r0
 800681e:	e9c0 3300 	strd	r3, r3, [r0]
 8006822:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006826:	6083      	str	r3, [r0, #8]
 8006828:	8181      	strh	r1, [r0, #12]
 800682a:	6643      	str	r3, [r0, #100]	@ 0x64
 800682c:	81c2      	strh	r2, [r0, #14]
 800682e:	6183      	str	r3, [r0, #24]
 8006830:	4619      	mov	r1, r3
 8006832:	2208      	movs	r2, #8
 8006834:	305c      	adds	r0, #92	@ 0x5c
 8006836:	f000 f914 	bl	8006a62 <memset>
 800683a:	4b0d      	ldr	r3, [pc, #52]	@ (8006870 <std+0x58>)
 800683c:	6224      	str	r4, [r4, #32]
 800683e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006840:	4b0c      	ldr	r3, [pc, #48]	@ (8006874 <std+0x5c>)
 8006842:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006844:	4b0c      	ldr	r3, [pc, #48]	@ (8006878 <std+0x60>)
 8006846:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006848:	4b0c      	ldr	r3, [pc, #48]	@ (800687c <std+0x64>)
 800684a:	6323      	str	r3, [r4, #48]	@ 0x30
 800684c:	4b0c      	ldr	r3, [pc, #48]	@ (8006880 <std+0x68>)
 800684e:	429c      	cmp	r4, r3
 8006850:	d006      	beq.n	8006860 <std+0x48>
 8006852:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006856:	4294      	cmp	r4, r2
 8006858:	d002      	beq.n	8006860 <std+0x48>
 800685a:	33d0      	adds	r3, #208	@ 0xd0
 800685c:	429c      	cmp	r4, r3
 800685e:	d105      	bne.n	800686c <std+0x54>
 8006860:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006868:	f000 b978 	b.w	8006b5c <__retarget_lock_init_recursive>
 800686c:	bd10      	pop	{r4, pc}
 800686e:	bf00      	nop
 8006870:	080069dd 	.word	0x080069dd
 8006874:	080069ff 	.word	0x080069ff
 8006878:	08006a37 	.word	0x08006a37
 800687c:	08006a5b 	.word	0x08006a5b
 8006880:	20000470 	.word	0x20000470

08006884 <stdio_exit_handler>:
 8006884:	4a02      	ldr	r2, [pc, #8]	@ (8006890 <stdio_exit_handler+0xc>)
 8006886:	4903      	ldr	r1, [pc, #12]	@ (8006894 <stdio_exit_handler+0x10>)
 8006888:	4803      	ldr	r0, [pc, #12]	@ (8006898 <stdio_exit_handler+0x14>)
 800688a:	f000 b869 	b.w	8006960 <_fwalk_sglue>
 800688e:	bf00      	nop
 8006890:	2000001c 	.word	0x2000001c
 8006894:	080084cd 	.word	0x080084cd
 8006898:	2000002c 	.word	0x2000002c

0800689c <cleanup_stdio>:
 800689c:	6841      	ldr	r1, [r0, #4]
 800689e:	4b0c      	ldr	r3, [pc, #48]	@ (80068d0 <cleanup_stdio+0x34>)
 80068a0:	b510      	push	{r4, lr}
 80068a2:	4299      	cmp	r1, r3
 80068a4:	4604      	mov	r4, r0
 80068a6:	d001      	beq.n	80068ac <cleanup_stdio+0x10>
 80068a8:	f001 fe10 	bl	80084cc <_fflush_r>
 80068ac:	68a1      	ldr	r1, [r4, #8]
 80068ae:	4b09      	ldr	r3, [pc, #36]	@ (80068d4 <cleanup_stdio+0x38>)
 80068b0:	4299      	cmp	r1, r3
 80068b2:	d002      	beq.n	80068ba <cleanup_stdio+0x1e>
 80068b4:	4620      	mov	r0, r4
 80068b6:	f001 fe09 	bl	80084cc <_fflush_r>
 80068ba:	68e1      	ldr	r1, [r4, #12]
 80068bc:	4b06      	ldr	r3, [pc, #24]	@ (80068d8 <cleanup_stdio+0x3c>)
 80068be:	4299      	cmp	r1, r3
 80068c0:	d004      	beq.n	80068cc <cleanup_stdio+0x30>
 80068c2:	4620      	mov	r0, r4
 80068c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068c8:	f001 be00 	b.w	80084cc <_fflush_r>
 80068cc:	bd10      	pop	{r4, pc}
 80068ce:	bf00      	nop
 80068d0:	20000470 	.word	0x20000470
 80068d4:	200004d8 	.word	0x200004d8
 80068d8:	20000540 	.word	0x20000540

080068dc <global_stdio_init.part.0>:
 80068dc:	b510      	push	{r4, lr}
 80068de:	4b0b      	ldr	r3, [pc, #44]	@ (800690c <global_stdio_init.part.0+0x30>)
 80068e0:	4c0b      	ldr	r4, [pc, #44]	@ (8006910 <global_stdio_init.part.0+0x34>)
 80068e2:	4a0c      	ldr	r2, [pc, #48]	@ (8006914 <global_stdio_init.part.0+0x38>)
 80068e4:	4620      	mov	r0, r4
 80068e6:	601a      	str	r2, [r3, #0]
 80068e8:	2104      	movs	r1, #4
 80068ea:	2200      	movs	r2, #0
 80068ec:	f7ff ff94 	bl	8006818 <std>
 80068f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80068f4:	2201      	movs	r2, #1
 80068f6:	2109      	movs	r1, #9
 80068f8:	f7ff ff8e 	bl	8006818 <std>
 80068fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006900:	2202      	movs	r2, #2
 8006902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006906:	2112      	movs	r1, #18
 8006908:	f7ff bf86 	b.w	8006818 <std>
 800690c:	200005a8 	.word	0x200005a8
 8006910:	20000470 	.word	0x20000470
 8006914:	08006885 	.word	0x08006885

08006918 <__sfp_lock_acquire>:
 8006918:	4801      	ldr	r0, [pc, #4]	@ (8006920 <__sfp_lock_acquire+0x8>)
 800691a:	f000 b920 	b.w	8006b5e <__retarget_lock_acquire_recursive>
 800691e:	bf00      	nop
 8006920:	200005b1 	.word	0x200005b1

08006924 <__sfp_lock_release>:
 8006924:	4801      	ldr	r0, [pc, #4]	@ (800692c <__sfp_lock_release+0x8>)
 8006926:	f000 b91b 	b.w	8006b60 <__retarget_lock_release_recursive>
 800692a:	bf00      	nop
 800692c:	200005b1 	.word	0x200005b1

08006930 <__sinit>:
 8006930:	b510      	push	{r4, lr}
 8006932:	4604      	mov	r4, r0
 8006934:	f7ff fff0 	bl	8006918 <__sfp_lock_acquire>
 8006938:	6a23      	ldr	r3, [r4, #32]
 800693a:	b11b      	cbz	r3, 8006944 <__sinit+0x14>
 800693c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006940:	f7ff bff0 	b.w	8006924 <__sfp_lock_release>
 8006944:	4b04      	ldr	r3, [pc, #16]	@ (8006958 <__sinit+0x28>)
 8006946:	6223      	str	r3, [r4, #32]
 8006948:	4b04      	ldr	r3, [pc, #16]	@ (800695c <__sinit+0x2c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1f5      	bne.n	800693c <__sinit+0xc>
 8006950:	f7ff ffc4 	bl	80068dc <global_stdio_init.part.0>
 8006954:	e7f2      	b.n	800693c <__sinit+0xc>
 8006956:	bf00      	nop
 8006958:	0800689d 	.word	0x0800689d
 800695c:	200005a8 	.word	0x200005a8

08006960 <_fwalk_sglue>:
 8006960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006964:	4607      	mov	r7, r0
 8006966:	4688      	mov	r8, r1
 8006968:	4614      	mov	r4, r2
 800696a:	2600      	movs	r6, #0
 800696c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006970:	f1b9 0901 	subs.w	r9, r9, #1
 8006974:	d505      	bpl.n	8006982 <_fwalk_sglue+0x22>
 8006976:	6824      	ldr	r4, [r4, #0]
 8006978:	2c00      	cmp	r4, #0
 800697a:	d1f7      	bne.n	800696c <_fwalk_sglue+0xc>
 800697c:	4630      	mov	r0, r6
 800697e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006982:	89ab      	ldrh	r3, [r5, #12]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d907      	bls.n	8006998 <_fwalk_sglue+0x38>
 8006988:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800698c:	3301      	adds	r3, #1
 800698e:	d003      	beq.n	8006998 <_fwalk_sglue+0x38>
 8006990:	4629      	mov	r1, r5
 8006992:	4638      	mov	r0, r7
 8006994:	47c0      	blx	r8
 8006996:	4306      	orrs	r6, r0
 8006998:	3568      	adds	r5, #104	@ 0x68
 800699a:	e7e9      	b.n	8006970 <_fwalk_sglue+0x10>

0800699c <siprintf>:
 800699c:	b40e      	push	{r1, r2, r3}
 800699e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80069a2:	b500      	push	{lr}
 80069a4:	b09c      	sub	sp, #112	@ 0x70
 80069a6:	ab1d      	add	r3, sp, #116	@ 0x74
 80069a8:	9002      	str	r0, [sp, #8]
 80069aa:	9006      	str	r0, [sp, #24]
 80069ac:	9107      	str	r1, [sp, #28]
 80069ae:	9104      	str	r1, [sp, #16]
 80069b0:	4808      	ldr	r0, [pc, #32]	@ (80069d4 <siprintf+0x38>)
 80069b2:	4909      	ldr	r1, [pc, #36]	@ (80069d8 <siprintf+0x3c>)
 80069b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80069b8:	9105      	str	r1, [sp, #20]
 80069ba:	6800      	ldr	r0, [r0, #0]
 80069bc:	a902      	add	r1, sp, #8
 80069be:	9301      	str	r3, [sp, #4]
 80069c0:	f001 fc08 	bl	80081d4 <_svfiprintf_r>
 80069c4:	2200      	movs	r2, #0
 80069c6:	9b02      	ldr	r3, [sp, #8]
 80069c8:	701a      	strb	r2, [r3, #0]
 80069ca:	b01c      	add	sp, #112	@ 0x70
 80069cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80069d0:	b003      	add	sp, #12
 80069d2:	4770      	bx	lr
 80069d4:	20000028 	.word	0x20000028
 80069d8:	ffff0208 	.word	0xffff0208

080069dc <__sread>:
 80069dc:	b510      	push	{r4, lr}
 80069de:	460c      	mov	r4, r1
 80069e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069e4:	f000 f86c 	bl	8006ac0 <_read_r>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	bfab      	itete	ge
 80069ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80069ee:	89a3      	ldrhlt	r3, [r4, #12]
 80069f0:	181b      	addge	r3, r3, r0
 80069f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80069f6:	bfac      	ite	ge
 80069f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80069fa:	81a3      	strhlt	r3, [r4, #12]
 80069fc:	bd10      	pop	{r4, pc}

080069fe <__swrite>:
 80069fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a02:	461f      	mov	r7, r3
 8006a04:	898b      	ldrh	r3, [r1, #12]
 8006a06:	4605      	mov	r5, r0
 8006a08:	05db      	lsls	r3, r3, #23
 8006a0a:	460c      	mov	r4, r1
 8006a0c:	4616      	mov	r6, r2
 8006a0e:	d505      	bpl.n	8006a1c <__swrite+0x1e>
 8006a10:	2302      	movs	r3, #2
 8006a12:	2200      	movs	r2, #0
 8006a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a18:	f000 f840 	bl	8006a9c <_lseek_r>
 8006a1c:	89a3      	ldrh	r3, [r4, #12]
 8006a1e:	4632      	mov	r2, r6
 8006a20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a24:	81a3      	strh	r3, [r4, #12]
 8006a26:	4628      	mov	r0, r5
 8006a28:	463b      	mov	r3, r7
 8006a2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a32:	f000 b857 	b.w	8006ae4 <_write_r>

08006a36 <__sseek>:
 8006a36:	b510      	push	{r4, lr}
 8006a38:	460c      	mov	r4, r1
 8006a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a3e:	f000 f82d 	bl	8006a9c <_lseek_r>
 8006a42:	1c43      	adds	r3, r0, #1
 8006a44:	89a3      	ldrh	r3, [r4, #12]
 8006a46:	bf15      	itete	ne
 8006a48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a52:	81a3      	strheq	r3, [r4, #12]
 8006a54:	bf18      	it	ne
 8006a56:	81a3      	strhne	r3, [r4, #12]
 8006a58:	bd10      	pop	{r4, pc}

08006a5a <__sclose>:
 8006a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a5e:	f000 b80d 	b.w	8006a7c <_close_r>

08006a62 <memset>:
 8006a62:	4603      	mov	r3, r0
 8006a64:	4402      	add	r2, r0
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d100      	bne.n	8006a6c <memset+0xa>
 8006a6a:	4770      	bx	lr
 8006a6c:	f803 1b01 	strb.w	r1, [r3], #1
 8006a70:	e7f9      	b.n	8006a66 <memset+0x4>
	...

08006a74 <_localeconv_r>:
 8006a74:	4800      	ldr	r0, [pc, #0]	@ (8006a78 <_localeconv_r+0x4>)
 8006a76:	4770      	bx	lr
 8006a78:	20000168 	.word	0x20000168

08006a7c <_close_r>:
 8006a7c:	b538      	push	{r3, r4, r5, lr}
 8006a7e:	2300      	movs	r3, #0
 8006a80:	4d05      	ldr	r5, [pc, #20]	@ (8006a98 <_close_r+0x1c>)
 8006a82:	4604      	mov	r4, r0
 8006a84:	4608      	mov	r0, r1
 8006a86:	602b      	str	r3, [r5, #0]
 8006a88:	f7fa fad1 	bl	800102e <_close>
 8006a8c:	1c43      	adds	r3, r0, #1
 8006a8e:	d102      	bne.n	8006a96 <_close_r+0x1a>
 8006a90:	682b      	ldr	r3, [r5, #0]
 8006a92:	b103      	cbz	r3, 8006a96 <_close_r+0x1a>
 8006a94:	6023      	str	r3, [r4, #0]
 8006a96:	bd38      	pop	{r3, r4, r5, pc}
 8006a98:	200005ac 	.word	0x200005ac

08006a9c <_lseek_r>:
 8006a9c:	b538      	push	{r3, r4, r5, lr}
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	4608      	mov	r0, r1
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	4d05      	ldr	r5, [pc, #20]	@ (8006abc <_lseek_r+0x20>)
 8006aa8:	602a      	str	r2, [r5, #0]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	f7fa fae3 	bl	8001076 <_lseek>
 8006ab0:	1c43      	adds	r3, r0, #1
 8006ab2:	d102      	bne.n	8006aba <_lseek_r+0x1e>
 8006ab4:	682b      	ldr	r3, [r5, #0]
 8006ab6:	b103      	cbz	r3, 8006aba <_lseek_r+0x1e>
 8006ab8:	6023      	str	r3, [r4, #0]
 8006aba:	bd38      	pop	{r3, r4, r5, pc}
 8006abc:	200005ac 	.word	0x200005ac

08006ac0 <_read_r>:
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	4608      	mov	r0, r1
 8006ac6:	4611      	mov	r1, r2
 8006ac8:	2200      	movs	r2, #0
 8006aca:	4d05      	ldr	r5, [pc, #20]	@ (8006ae0 <_read_r+0x20>)
 8006acc:	602a      	str	r2, [r5, #0]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	f7fa fa74 	bl	8000fbc <_read>
 8006ad4:	1c43      	adds	r3, r0, #1
 8006ad6:	d102      	bne.n	8006ade <_read_r+0x1e>
 8006ad8:	682b      	ldr	r3, [r5, #0]
 8006ada:	b103      	cbz	r3, 8006ade <_read_r+0x1e>
 8006adc:	6023      	str	r3, [r4, #0]
 8006ade:	bd38      	pop	{r3, r4, r5, pc}
 8006ae0:	200005ac 	.word	0x200005ac

08006ae4 <_write_r>:
 8006ae4:	b538      	push	{r3, r4, r5, lr}
 8006ae6:	4604      	mov	r4, r0
 8006ae8:	4608      	mov	r0, r1
 8006aea:	4611      	mov	r1, r2
 8006aec:	2200      	movs	r2, #0
 8006aee:	4d05      	ldr	r5, [pc, #20]	@ (8006b04 <_write_r+0x20>)
 8006af0:	602a      	str	r2, [r5, #0]
 8006af2:	461a      	mov	r2, r3
 8006af4:	f7fa fa7f 	bl	8000ff6 <_write>
 8006af8:	1c43      	adds	r3, r0, #1
 8006afa:	d102      	bne.n	8006b02 <_write_r+0x1e>
 8006afc:	682b      	ldr	r3, [r5, #0]
 8006afe:	b103      	cbz	r3, 8006b02 <_write_r+0x1e>
 8006b00:	6023      	str	r3, [r4, #0]
 8006b02:	bd38      	pop	{r3, r4, r5, pc}
 8006b04:	200005ac 	.word	0x200005ac

08006b08 <__errno>:
 8006b08:	4b01      	ldr	r3, [pc, #4]	@ (8006b10 <__errno+0x8>)
 8006b0a:	6818      	ldr	r0, [r3, #0]
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	20000028 	.word	0x20000028

08006b14 <__libc_init_array>:
 8006b14:	b570      	push	{r4, r5, r6, lr}
 8006b16:	2600      	movs	r6, #0
 8006b18:	4d0c      	ldr	r5, [pc, #48]	@ (8006b4c <__libc_init_array+0x38>)
 8006b1a:	4c0d      	ldr	r4, [pc, #52]	@ (8006b50 <__libc_init_array+0x3c>)
 8006b1c:	1b64      	subs	r4, r4, r5
 8006b1e:	10a4      	asrs	r4, r4, #2
 8006b20:	42a6      	cmp	r6, r4
 8006b22:	d109      	bne.n	8006b38 <__libc_init_array+0x24>
 8006b24:	f002 f86e 	bl	8008c04 <_init>
 8006b28:	2600      	movs	r6, #0
 8006b2a:	4d0a      	ldr	r5, [pc, #40]	@ (8006b54 <__libc_init_array+0x40>)
 8006b2c:	4c0a      	ldr	r4, [pc, #40]	@ (8006b58 <__libc_init_array+0x44>)
 8006b2e:	1b64      	subs	r4, r4, r5
 8006b30:	10a4      	asrs	r4, r4, #2
 8006b32:	42a6      	cmp	r6, r4
 8006b34:	d105      	bne.n	8006b42 <__libc_init_array+0x2e>
 8006b36:	bd70      	pop	{r4, r5, r6, pc}
 8006b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b3c:	4798      	blx	r3
 8006b3e:	3601      	adds	r6, #1
 8006b40:	e7ee      	b.n	8006b20 <__libc_init_array+0xc>
 8006b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b46:	4798      	blx	r3
 8006b48:	3601      	adds	r6, #1
 8006b4a:	e7f2      	b.n	8006b32 <__libc_init_array+0x1e>
 8006b4c:	08009300 	.word	0x08009300
 8006b50:	08009300 	.word	0x08009300
 8006b54:	08009300 	.word	0x08009300
 8006b58:	08009304 	.word	0x08009304

08006b5c <__retarget_lock_init_recursive>:
 8006b5c:	4770      	bx	lr

08006b5e <__retarget_lock_acquire_recursive>:
 8006b5e:	4770      	bx	lr

08006b60 <__retarget_lock_release_recursive>:
 8006b60:	4770      	bx	lr

08006b62 <memchr>:
 8006b62:	4603      	mov	r3, r0
 8006b64:	b510      	push	{r4, lr}
 8006b66:	b2c9      	uxtb	r1, r1
 8006b68:	4402      	add	r2, r0
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	d101      	bne.n	8006b74 <memchr+0x12>
 8006b70:	2000      	movs	r0, #0
 8006b72:	e003      	b.n	8006b7c <memchr+0x1a>
 8006b74:	7804      	ldrb	r4, [r0, #0]
 8006b76:	3301      	adds	r3, #1
 8006b78:	428c      	cmp	r4, r1
 8006b7a:	d1f6      	bne.n	8006b6a <memchr+0x8>
 8006b7c:	bd10      	pop	{r4, pc}

08006b7e <quorem>:
 8006b7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b82:	6903      	ldr	r3, [r0, #16]
 8006b84:	690c      	ldr	r4, [r1, #16]
 8006b86:	4607      	mov	r7, r0
 8006b88:	42a3      	cmp	r3, r4
 8006b8a:	db7e      	blt.n	8006c8a <quorem+0x10c>
 8006b8c:	3c01      	subs	r4, #1
 8006b8e:	00a3      	lsls	r3, r4, #2
 8006b90:	f100 0514 	add.w	r5, r0, #20
 8006b94:	f101 0814 	add.w	r8, r1, #20
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b9e:	9301      	str	r3, [sp, #4]
 8006ba0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ba4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	429a      	cmp	r2, r3
 8006bac:	fbb2 f6f3 	udiv	r6, r2, r3
 8006bb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006bb4:	d32e      	bcc.n	8006c14 <quorem+0x96>
 8006bb6:	f04f 0a00 	mov.w	sl, #0
 8006bba:	46c4      	mov	ip, r8
 8006bbc:	46ae      	mov	lr, r5
 8006bbe:	46d3      	mov	fp, sl
 8006bc0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006bc4:	b298      	uxth	r0, r3
 8006bc6:	fb06 a000 	mla	r0, r6, r0, sl
 8006bca:	0c1b      	lsrs	r3, r3, #16
 8006bcc:	0c02      	lsrs	r2, r0, #16
 8006bce:	fb06 2303 	mla	r3, r6, r3, r2
 8006bd2:	f8de 2000 	ldr.w	r2, [lr]
 8006bd6:	b280      	uxth	r0, r0
 8006bd8:	b292      	uxth	r2, r2
 8006bda:	1a12      	subs	r2, r2, r0
 8006bdc:	445a      	add	r2, fp
 8006bde:	f8de 0000 	ldr.w	r0, [lr]
 8006be2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006bec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006bf0:	b292      	uxth	r2, r2
 8006bf2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006bf6:	45e1      	cmp	r9, ip
 8006bf8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006bfc:	f84e 2b04 	str.w	r2, [lr], #4
 8006c00:	d2de      	bcs.n	8006bc0 <quorem+0x42>
 8006c02:	9b00      	ldr	r3, [sp, #0]
 8006c04:	58eb      	ldr	r3, [r5, r3]
 8006c06:	b92b      	cbnz	r3, 8006c14 <quorem+0x96>
 8006c08:	9b01      	ldr	r3, [sp, #4]
 8006c0a:	3b04      	subs	r3, #4
 8006c0c:	429d      	cmp	r5, r3
 8006c0e:	461a      	mov	r2, r3
 8006c10:	d32f      	bcc.n	8006c72 <quorem+0xf4>
 8006c12:	613c      	str	r4, [r7, #16]
 8006c14:	4638      	mov	r0, r7
 8006c16:	f001 f979 	bl	8007f0c <__mcmp>
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	db25      	blt.n	8006c6a <quorem+0xec>
 8006c1e:	4629      	mov	r1, r5
 8006c20:	2000      	movs	r0, #0
 8006c22:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c26:	f8d1 c000 	ldr.w	ip, [r1]
 8006c2a:	fa1f fe82 	uxth.w	lr, r2
 8006c2e:	fa1f f38c 	uxth.w	r3, ip
 8006c32:	eba3 030e 	sub.w	r3, r3, lr
 8006c36:	4403      	add	r3, r0
 8006c38:	0c12      	lsrs	r2, r2, #16
 8006c3a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006c3e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c48:	45c1      	cmp	r9, r8
 8006c4a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006c4e:	f841 3b04 	str.w	r3, [r1], #4
 8006c52:	d2e6      	bcs.n	8006c22 <quorem+0xa4>
 8006c54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c5c:	b922      	cbnz	r2, 8006c68 <quorem+0xea>
 8006c5e:	3b04      	subs	r3, #4
 8006c60:	429d      	cmp	r5, r3
 8006c62:	461a      	mov	r2, r3
 8006c64:	d30b      	bcc.n	8006c7e <quorem+0x100>
 8006c66:	613c      	str	r4, [r7, #16]
 8006c68:	3601      	adds	r6, #1
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	b003      	add	sp, #12
 8006c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c72:	6812      	ldr	r2, [r2, #0]
 8006c74:	3b04      	subs	r3, #4
 8006c76:	2a00      	cmp	r2, #0
 8006c78:	d1cb      	bne.n	8006c12 <quorem+0x94>
 8006c7a:	3c01      	subs	r4, #1
 8006c7c:	e7c6      	b.n	8006c0c <quorem+0x8e>
 8006c7e:	6812      	ldr	r2, [r2, #0]
 8006c80:	3b04      	subs	r3, #4
 8006c82:	2a00      	cmp	r2, #0
 8006c84:	d1ef      	bne.n	8006c66 <quorem+0xe8>
 8006c86:	3c01      	subs	r4, #1
 8006c88:	e7ea      	b.n	8006c60 <quorem+0xe2>
 8006c8a:	2000      	movs	r0, #0
 8006c8c:	e7ee      	b.n	8006c6c <quorem+0xee>
	...

08006c90 <_dtoa_r>:
 8006c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c94:	4614      	mov	r4, r2
 8006c96:	461d      	mov	r5, r3
 8006c98:	69c7      	ldr	r7, [r0, #28]
 8006c9a:	b097      	sub	sp, #92	@ 0x5c
 8006c9c:	4683      	mov	fp, r0
 8006c9e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006ca2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006ca4:	b97f      	cbnz	r7, 8006cc6 <_dtoa_r+0x36>
 8006ca6:	2010      	movs	r0, #16
 8006ca8:	f000 fe02 	bl	80078b0 <malloc>
 8006cac:	4602      	mov	r2, r0
 8006cae:	f8cb 001c 	str.w	r0, [fp, #28]
 8006cb2:	b920      	cbnz	r0, 8006cbe <_dtoa_r+0x2e>
 8006cb4:	21ef      	movs	r1, #239	@ 0xef
 8006cb6:	4ba8      	ldr	r3, [pc, #672]	@ (8006f58 <_dtoa_r+0x2c8>)
 8006cb8:	48a8      	ldr	r0, [pc, #672]	@ (8006f5c <_dtoa_r+0x2cc>)
 8006cba:	f001 fc67 	bl	800858c <__assert_func>
 8006cbe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006cc2:	6007      	str	r7, [r0, #0]
 8006cc4:	60c7      	str	r7, [r0, #12]
 8006cc6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006cca:	6819      	ldr	r1, [r3, #0]
 8006ccc:	b159      	cbz	r1, 8006ce6 <_dtoa_r+0x56>
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	4093      	lsls	r3, r2
 8006cd4:	604a      	str	r2, [r1, #4]
 8006cd6:	608b      	str	r3, [r1, #8]
 8006cd8:	4658      	mov	r0, fp
 8006cda:	f000 fedf 	bl	8007a9c <_Bfree>
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	1e2b      	subs	r3, r5, #0
 8006ce8:	bfaf      	iteee	ge
 8006cea:	2300      	movge	r3, #0
 8006cec:	2201      	movlt	r2, #1
 8006cee:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006cf2:	9303      	strlt	r3, [sp, #12]
 8006cf4:	bfa8      	it	ge
 8006cf6:	6033      	strge	r3, [r6, #0]
 8006cf8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006cfc:	4b98      	ldr	r3, [pc, #608]	@ (8006f60 <_dtoa_r+0x2d0>)
 8006cfe:	bfb8      	it	lt
 8006d00:	6032      	strlt	r2, [r6, #0]
 8006d02:	ea33 0308 	bics.w	r3, r3, r8
 8006d06:	d112      	bne.n	8006d2e <_dtoa_r+0x9e>
 8006d08:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006d0c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006d0e:	6013      	str	r3, [r2, #0]
 8006d10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006d14:	4323      	orrs	r3, r4
 8006d16:	f000 8550 	beq.w	80077ba <_dtoa_r+0xb2a>
 8006d1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006d1c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006f64 <_dtoa_r+0x2d4>
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 8552 	beq.w	80077ca <_dtoa_r+0xb3a>
 8006d26:	f10a 0303 	add.w	r3, sl, #3
 8006d2a:	f000 bd4c 	b.w	80077c6 <_dtoa_r+0xb36>
 8006d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d32:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006d36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	f7f9 fe33 	bl	80009a8 <__aeabi_dcmpeq>
 8006d42:	4607      	mov	r7, r0
 8006d44:	b158      	cbz	r0, 8006d5e <_dtoa_r+0xce>
 8006d46:	2301      	movs	r3, #1
 8006d48:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006d4a:	6013      	str	r3, [r2, #0]
 8006d4c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006d4e:	b113      	cbz	r3, 8006d56 <_dtoa_r+0xc6>
 8006d50:	4b85      	ldr	r3, [pc, #532]	@ (8006f68 <_dtoa_r+0x2d8>)
 8006d52:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006d54:	6013      	str	r3, [r2, #0]
 8006d56:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006f6c <_dtoa_r+0x2dc>
 8006d5a:	f000 bd36 	b.w	80077ca <_dtoa_r+0xb3a>
 8006d5e:	ab14      	add	r3, sp, #80	@ 0x50
 8006d60:	9301      	str	r3, [sp, #4]
 8006d62:	ab15      	add	r3, sp, #84	@ 0x54
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	4658      	mov	r0, fp
 8006d68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006d6c:	f001 f97e 	bl	800806c <__d2b>
 8006d70:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006d74:	4681      	mov	r9, r0
 8006d76:	2e00      	cmp	r6, #0
 8006d78:	d077      	beq.n	8006e6a <_dtoa_r+0x1da>
 8006d7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d80:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d88:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006d8c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006d90:	9712      	str	r7, [sp, #72]	@ 0x48
 8006d92:	4619      	mov	r1, r3
 8006d94:	2200      	movs	r2, #0
 8006d96:	4b76      	ldr	r3, [pc, #472]	@ (8006f70 <_dtoa_r+0x2e0>)
 8006d98:	f7f9 f9e6 	bl	8000168 <__aeabi_dsub>
 8006d9c:	a368      	add	r3, pc, #416	@ (adr r3, 8006f40 <_dtoa_r+0x2b0>)
 8006d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da2:	f7f9 fb99 	bl	80004d8 <__aeabi_dmul>
 8006da6:	a368      	add	r3, pc, #416	@ (adr r3, 8006f48 <_dtoa_r+0x2b8>)
 8006da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dac:	f7f9 f9de 	bl	800016c <__adddf3>
 8006db0:	4604      	mov	r4, r0
 8006db2:	4630      	mov	r0, r6
 8006db4:	460d      	mov	r5, r1
 8006db6:	f7f9 fb25 	bl	8000404 <__aeabi_i2d>
 8006dba:	a365      	add	r3, pc, #404	@ (adr r3, 8006f50 <_dtoa_r+0x2c0>)
 8006dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc0:	f7f9 fb8a 	bl	80004d8 <__aeabi_dmul>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	4620      	mov	r0, r4
 8006dca:	4629      	mov	r1, r5
 8006dcc:	f7f9 f9ce 	bl	800016c <__adddf3>
 8006dd0:	4604      	mov	r4, r0
 8006dd2:	460d      	mov	r5, r1
 8006dd4:	f7f9 fe30 	bl	8000a38 <__aeabi_d2iz>
 8006dd8:	2200      	movs	r2, #0
 8006dda:	4607      	mov	r7, r0
 8006ddc:	2300      	movs	r3, #0
 8006dde:	4620      	mov	r0, r4
 8006de0:	4629      	mov	r1, r5
 8006de2:	f7f9 fdeb 	bl	80009bc <__aeabi_dcmplt>
 8006de6:	b140      	cbz	r0, 8006dfa <_dtoa_r+0x16a>
 8006de8:	4638      	mov	r0, r7
 8006dea:	f7f9 fb0b 	bl	8000404 <__aeabi_i2d>
 8006dee:	4622      	mov	r2, r4
 8006df0:	462b      	mov	r3, r5
 8006df2:	f7f9 fdd9 	bl	80009a8 <__aeabi_dcmpeq>
 8006df6:	b900      	cbnz	r0, 8006dfa <_dtoa_r+0x16a>
 8006df8:	3f01      	subs	r7, #1
 8006dfa:	2f16      	cmp	r7, #22
 8006dfc:	d853      	bhi.n	8006ea6 <_dtoa_r+0x216>
 8006dfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e02:	4b5c      	ldr	r3, [pc, #368]	@ (8006f74 <_dtoa_r+0x2e4>)
 8006e04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0c:	f7f9 fdd6 	bl	80009bc <__aeabi_dcmplt>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	d04a      	beq.n	8006eaa <_dtoa_r+0x21a>
 8006e14:	2300      	movs	r3, #0
 8006e16:	3f01      	subs	r7, #1
 8006e18:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e1a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006e1c:	1b9b      	subs	r3, r3, r6
 8006e1e:	1e5a      	subs	r2, r3, #1
 8006e20:	bf46      	itte	mi
 8006e22:	f1c3 0801 	rsbmi	r8, r3, #1
 8006e26:	2300      	movmi	r3, #0
 8006e28:	f04f 0800 	movpl.w	r8, #0
 8006e2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e2e:	bf48      	it	mi
 8006e30:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006e32:	2f00      	cmp	r7, #0
 8006e34:	db3b      	blt.n	8006eae <_dtoa_r+0x21e>
 8006e36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e38:	970e      	str	r7, [sp, #56]	@ 0x38
 8006e3a:	443b      	add	r3, r7
 8006e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e3e:	2300      	movs	r3, #0
 8006e40:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e44:	2b09      	cmp	r3, #9
 8006e46:	d866      	bhi.n	8006f16 <_dtoa_r+0x286>
 8006e48:	2b05      	cmp	r3, #5
 8006e4a:	bfc4      	itt	gt
 8006e4c:	3b04      	subgt	r3, #4
 8006e4e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006e50:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e52:	bfc8      	it	gt
 8006e54:	2400      	movgt	r4, #0
 8006e56:	f1a3 0302 	sub.w	r3, r3, #2
 8006e5a:	bfd8      	it	le
 8006e5c:	2401      	movle	r4, #1
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d864      	bhi.n	8006f2c <_dtoa_r+0x29c>
 8006e62:	e8df f003 	tbb	[pc, r3]
 8006e66:	382b      	.short	0x382b
 8006e68:	5636      	.short	0x5636
 8006e6a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006e6e:	441e      	add	r6, r3
 8006e70:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006e74:	2b20      	cmp	r3, #32
 8006e76:	bfc1      	itttt	gt
 8006e78:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006e7c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006e80:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006e84:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006e88:	bfd6      	itet	le
 8006e8a:	f1c3 0320 	rsble	r3, r3, #32
 8006e8e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006e92:	fa04 f003 	lslle.w	r0, r4, r3
 8006e96:	f7f9 faa5 	bl	80003e4 <__aeabi_ui2d>
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006ea0:	3e01      	subs	r6, #1
 8006ea2:	9212      	str	r2, [sp, #72]	@ 0x48
 8006ea4:	e775      	b.n	8006d92 <_dtoa_r+0x102>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e7b6      	b.n	8006e18 <_dtoa_r+0x188>
 8006eaa:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006eac:	e7b5      	b.n	8006e1a <_dtoa_r+0x18a>
 8006eae:	427b      	negs	r3, r7
 8006eb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	eba8 0807 	sub.w	r8, r8, r7
 8006eb8:	930e      	str	r3, [sp, #56]	@ 0x38
 8006eba:	e7c2      	b.n	8006e42 <_dtoa_r+0x1b2>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ec0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	dc35      	bgt.n	8006f32 <_dtoa_r+0x2a2>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	461a      	mov	r2, r3
 8006eca:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006ece:	9221      	str	r2, [sp, #132]	@ 0x84
 8006ed0:	e00b      	b.n	8006eea <_dtoa_r+0x25a>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e7f3      	b.n	8006ebe <_dtoa_r+0x22e>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006eda:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006edc:	18fb      	adds	r3, r7, r3
 8006ede:	9308      	str	r3, [sp, #32]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	9307      	str	r3, [sp, #28]
 8006ee6:	bfb8      	it	lt
 8006ee8:	2301      	movlt	r3, #1
 8006eea:	2100      	movs	r1, #0
 8006eec:	2204      	movs	r2, #4
 8006eee:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006ef2:	f102 0514 	add.w	r5, r2, #20
 8006ef6:	429d      	cmp	r5, r3
 8006ef8:	d91f      	bls.n	8006f3a <_dtoa_r+0x2aa>
 8006efa:	6041      	str	r1, [r0, #4]
 8006efc:	4658      	mov	r0, fp
 8006efe:	f000 fd8d 	bl	8007a1c <_Balloc>
 8006f02:	4682      	mov	sl, r0
 8006f04:	2800      	cmp	r0, #0
 8006f06:	d139      	bne.n	8006f7c <_dtoa_r+0x2ec>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	f240 11af 	movw	r1, #431	@ 0x1af
 8006f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8006f78 <_dtoa_r+0x2e8>)
 8006f10:	e6d2      	b.n	8006cb8 <_dtoa_r+0x28>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e7e0      	b.n	8006ed8 <_dtoa_r+0x248>
 8006f16:	2401      	movs	r4, #1
 8006f18:	2300      	movs	r3, #0
 8006f1a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006f1c:	9320      	str	r3, [sp, #128]	@ 0x80
 8006f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f22:	2200      	movs	r2, #0
 8006f24:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006f28:	2312      	movs	r3, #18
 8006f2a:	e7d0      	b.n	8006ece <_dtoa_r+0x23e>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f30:	e7f5      	b.n	8006f1e <_dtoa_r+0x28e>
 8006f32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f34:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006f38:	e7d7      	b.n	8006eea <_dtoa_r+0x25a>
 8006f3a:	3101      	adds	r1, #1
 8006f3c:	0052      	lsls	r2, r2, #1
 8006f3e:	e7d8      	b.n	8006ef2 <_dtoa_r+0x262>
 8006f40:	636f4361 	.word	0x636f4361
 8006f44:	3fd287a7 	.word	0x3fd287a7
 8006f48:	8b60c8b3 	.word	0x8b60c8b3
 8006f4c:	3fc68a28 	.word	0x3fc68a28
 8006f50:	509f79fb 	.word	0x509f79fb
 8006f54:	3fd34413 	.word	0x3fd34413
 8006f58:	08008fcb 	.word	0x08008fcb
 8006f5c:	08008fe2 	.word	0x08008fe2
 8006f60:	7ff00000 	.word	0x7ff00000
 8006f64:	08008fc7 	.word	0x08008fc7
 8006f68:	08008f9b 	.word	0x08008f9b
 8006f6c:	08008f9a 	.word	0x08008f9a
 8006f70:	3ff80000 	.word	0x3ff80000
 8006f74:	080090d8 	.word	0x080090d8
 8006f78:	0800903a 	.word	0x0800903a
 8006f7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f80:	6018      	str	r0, [r3, #0]
 8006f82:	9b07      	ldr	r3, [sp, #28]
 8006f84:	2b0e      	cmp	r3, #14
 8006f86:	f200 80a4 	bhi.w	80070d2 <_dtoa_r+0x442>
 8006f8a:	2c00      	cmp	r4, #0
 8006f8c:	f000 80a1 	beq.w	80070d2 <_dtoa_r+0x442>
 8006f90:	2f00      	cmp	r7, #0
 8006f92:	dd33      	ble.n	8006ffc <_dtoa_r+0x36c>
 8006f94:	4b86      	ldr	r3, [pc, #536]	@ (80071b0 <_dtoa_r+0x520>)
 8006f96:	f007 020f 	and.w	r2, r7, #15
 8006f9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f9e:	05f8      	lsls	r0, r7, #23
 8006fa0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006fa4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006fa8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006fac:	d516      	bpl.n	8006fdc <_dtoa_r+0x34c>
 8006fae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fb2:	4b80      	ldr	r3, [pc, #512]	@ (80071b4 <_dtoa_r+0x524>)
 8006fb4:	2603      	movs	r6, #3
 8006fb6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006fba:	f7f9 fbb7 	bl	800072c <__aeabi_ddiv>
 8006fbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fc2:	f004 040f 	and.w	r4, r4, #15
 8006fc6:	4d7b      	ldr	r5, [pc, #492]	@ (80071b4 <_dtoa_r+0x524>)
 8006fc8:	b954      	cbnz	r4, 8006fe0 <_dtoa_r+0x350>
 8006fca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fd2:	f7f9 fbab 	bl	800072c <__aeabi_ddiv>
 8006fd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fda:	e028      	b.n	800702e <_dtoa_r+0x39e>
 8006fdc:	2602      	movs	r6, #2
 8006fde:	e7f2      	b.n	8006fc6 <_dtoa_r+0x336>
 8006fe0:	07e1      	lsls	r1, r4, #31
 8006fe2:	d508      	bpl.n	8006ff6 <_dtoa_r+0x366>
 8006fe4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fe8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006fec:	f7f9 fa74 	bl	80004d8 <__aeabi_dmul>
 8006ff0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ff4:	3601      	adds	r6, #1
 8006ff6:	1064      	asrs	r4, r4, #1
 8006ff8:	3508      	adds	r5, #8
 8006ffa:	e7e5      	b.n	8006fc8 <_dtoa_r+0x338>
 8006ffc:	f000 80d2 	beq.w	80071a4 <_dtoa_r+0x514>
 8007000:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007004:	427c      	negs	r4, r7
 8007006:	4b6a      	ldr	r3, [pc, #424]	@ (80071b0 <_dtoa_r+0x520>)
 8007008:	f004 020f 	and.w	r2, r4, #15
 800700c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007014:	f7f9 fa60 	bl	80004d8 <__aeabi_dmul>
 8007018:	2602      	movs	r6, #2
 800701a:	2300      	movs	r3, #0
 800701c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007020:	4d64      	ldr	r5, [pc, #400]	@ (80071b4 <_dtoa_r+0x524>)
 8007022:	1124      	asrs	r4, r4, #4
 8007024:	2c00      	cmp	r4, #0
 8007026:	f040 80b2 	bne.w	800718e <_dtoa_r+0x4fe>
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1d3      	bne.n	8006fd6 <_dtoa_r+0x346>
 800702e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007032:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007034:	2b00      	cmp	r3, #0
 8007036:	f000 80b7 	beq.w	80071a8 <_dtoa_r+0x518>
 800703a:	2200      	movs	r2, #0
 800703c:	4620      	mov	r0, r4
 800703e:	4629      	mov	r1, r5
 8007040:	4b5d      	ldr	r3, [pc, #372]	@ (80071b8 <_dtoa_r+0x528>)
 8007042:	f7f9 fcbb 	bl	80009bc <__aeabi_dcmplt>
 8007046:	2800      	cmp	r0, #0
 8007048:	f000 80ae 	beq.w	80071a8 <_dtoa_r+0x518>
 800704c:	9b07      	ldr	r3, [sp, #28]
 800704e:	2b00      	cmp	r3, #0
 8007050:	f000 80aa 	beq.w	80071a8 <_dtoa_r+0x518>
 8007054:	9b08      	ldr	r3, [sp, #32]
 8007056:	2b00      	cmp	r3, #0
 8007058:	dd37      	ble.n	80070ca <_dtoa_r+0x43a>
 800705a:	1e7b      	subs	r3, r7, #1
 800705c:	4620      	mov	r0, r4
 800705e:	9304      	str	r3, [sp, #16]
 8007060:	2200      	movs	r2, #0
 8007062:	4629      	mov	r1, r5
 8007064:	4b55      	ldr	r3, [pc, #340]	@ (80071bc <_dtoa_r+0x52c>)
 8007066:	f7f9 fa37 	bl	80004d8 <__aeabi_dmul>
 800706a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800706e:	9c08      	ldr	r4, [sp, #32]
 8007070:	3601      	adds	r6, #1
 8007072:	4630      	mov	r0, r6
 8007074:	f7f9 f9c6 	bl	8000404 <__aeabi_i2d>
 8007078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800707c:	f7f9 fa2c 	bl	80004d8 <__aeabi_dmul>
 8007080:	2200      	movs	r2, #0
 8007082:	4b4f      	ldr	r3, [pc, #316]	@ (80071c0 <_dtoa_r+0x530>)
 8007084:	f7f9 f872 	bl	800016c <__adddf3>
 8007088:	4605      	mov	r5, r0
 800708a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800708e:	2c00      	cmp	r4, #0
 8007090:	f040 809a 	bne.w	80071c8 <_dtoa_r+0x538>
 8007094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007098:	2200      	movs	r2, #0
 800709a:	4b4a      	ldr	r3, [pc, #296]	@ (80071c4 <_dtoa_r+0x534>)
 800709c:	f7f9 f864 	bl	8000168 <__aeabi_dsub>
 80070a0:	4602      	mov	r2, r0
 80070a2:	460b      	mov	r3, r1
 80070a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070a8:	462a      	mov	r2, r5
 80070aa:	4633      	mov	r3, r6
 80070ac:	f7f9 fca4 	bl	80009f8 <__aeabi_dcmpgt>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	f040 828e 	bne.w	80075d2 <_dtoa_r+0x942>
 80070b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070ba:	462a      	mov	r2, r5
 80070bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80070c0:	f7f9 fc7c 	bl	80009bc <__aeabi_dcmplt>
 80070c4:	2800      	cmp	r0, #0
 80070c6:	f040 8127 	bne.w	8007318 <_dtoa_r+0x688>
 80070ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80070ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80070d2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f2c0 8163 	blt.w	80073a0 <_dtoa_r+0x710>
 80070da:	2f0e      	cmp	r7, #14
 80070dc:	f300 8160 	bgt.w	80073a0 <_dtoa_r+0x710>
 80070e0:	4b33      	ldr	r3, [pc, #204]	@ (80071b0 <_dtoa_r+0x520>)
 80070e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80070e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80070ea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80070ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	da03      	bge.n	80070fc <_dtoa_r+0x46c>
 80070f4:	9b07      	ldr	r3, [sp, #28]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f340 8100 	ble.w	80072fc <_dtoa_r+0x66c>
 80070fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007100:	4656      	mov	r6, sl
 8007102:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007106:	4620      	mov	r0, r4
 8007108:	4629      	mov	r1, r5
 800710a:	f7f9 fb0f 	bl	800072c <__aeabi_ddiv>
 800710e:	f7f9 fc93 	bl	8000a38 <__aeabi_d2iz>
 8007112:	4680      	mov	r8, r0
 8007114:	f7f9 f976 	bl	8000404 <__aeabi_i2d>
 8007118:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800711c:	f7f9 f9dc 	bl	80004d8 <__aeabi_dmul>
 8007120:	4602      	mov	r2, r0
 8007122:	460b      	mov	r3, r1
 8007124:	4620      	mov	r0, r4
 8007126:	4629      	mov	r1, r5
 8007128:	f7f9 f81e 	bl	8000168 <__aeabi_dsub>
 800712c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007130:	9d07      	ldr	r5, [sp, #28]
 8007132:	f806 4b01 	strb.w	r4, [r6], #1
 8007136:	eba6 040a 	sub.w	r4, r6, sl
 800713a:	42a5      	cmp	r5, r4
 800713c:	4602      	mov	r2, r0
 800713e:	460b      	mov	r3, r1
 8007140:	f040 8116 	bne.w	8007370 <_dtoa_r+0x6e0>
 8007144:	f7f9 f812 	bl	800016c <__adddf3>
 8007148:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800714c:	4604      	mov	r4, r0
 800714e:	460d      	mov	r5, r1
 8007150:	f7f9 fc52 	bl	80009f8 <__aeabi_dcmpgt>
 8007154:	2800      	cmp	r0, #0
 8007156:	f040 80f8 	bne.w	800734a <_dtoa_r+0x6ba>
 800715a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800715e:	4620      	mov	r0, r4
 8007160:	4629      	mov	r1, r5
 8007162:	f7f9 fc21 	bl	80009a8 <__aeabi_dcmpeq>
 8007166:	b118      	cbz	r0, 8007170 <_dtoa_r+0x4e0>
 8007168:	f018 0f01 	tst.w	r8, #1
 800716c:	f040 80ed 	bne.w	800734a <_dtoa_r+0x6ba>
 8007170:	4649      	mov	r1, r9
 8007172:	4658      	mov	r0, fp
 8007174:	f000 fc92 	bl	8007a9c <_Bfree>
 8007178:	2300      	movs	r3, #0
 800717a:	7033      	strb	r3, [r6, #0]
 800717c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800717e:	3701      	adds	r7, #1
 8007180:	601f      	str	r7, [r3, #0]
 8007182:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 8320 	beq.w	80077ca <_dtoa_r+0xb3a>
 800718a:	601e      	str	r6, [r3, #0]
 800718c:	e31d      	b.n	80077ca <_dtoa_r+0xb3a>
 800718e:	07e2      	lsls	r2, r4, #31
 8007190:	d505      	bpl.n	800719e <_dtoa_r+0x50e>
 8007192:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007196:	f7f9 f99f 	bl	80004d8 <__aeabi_dmul>
 800719a:	2301      	movs	r3, #1
 800719c:	3601      	adds	r6, #1
 800719e:	1064      	asrs	r4, r4, #1
 80071a0:	3508      	adds	r5, #8
 80071a2:	e73f      	b.n	8007024 <_dtoa_r+0x394>
 80071a4:	2602      	movs	r6, #2
 80071a6:	e742      	b.n	800702e <_dtoa_r+0x39e>
 80071a8:	9c07      	ldr	r4, [sp, #28]
 80071aa:	9704      	str	r7, [sp, #16]
 80071ac:	e761      	b.n	8007072 <_dtoa_r+0x3e2>
 80071ae:	bf00      	nop
 80071b0:	080090d8 	.word	0x080090d8
 80071b4:	080090b0 	.word	0x080090b0
 80071b8:	3ff00000 	.word	0x3ff00000
 80071bc:	40240000 	.word	0x40240000
 80071c0:	401c0000 	.word	0x401c0000
 80071c4:	40140000 	.word	0x40140000
 80071c8:	4b70      	ldr	r3, [pc, #448]	@ (800738c <_dtoa_r+0x6fc>)
 80071ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80071cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80071d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80071d4:	4454      	add	r4, sl
 80071d6:	2900      	cmp	r1, #0
 80071d8:	d045      	beq.n	8007266 <_dtoa_r+0x5d6>
 80071da:	2000      	movs	r0, #0
 80071dc:	496c      	ldr	r1, [pc, #432]	@ (8007390 <_dtoa_r+0x700>)
 80071de:	f7f9 faa5 	bl	800072c <__aeabi_ddiv>
 80071e2:	4633      	mov	r3, r6
 80071e4:	462a      	mov	r2, r5
 80071e6:	f7f8 ffbf 	bl	8000168 <__aeabi_dsub>
 80071ea:	4656      	mov	r6, sl
 80071ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80071f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071f4:	f7f9 fc20 	bl	8000a38 <__aeabi_d2iz>
 80071f8:	4605      	mov	r5, r0
 80071fa:	f7f9 f903 	bl	8000404 <__aeabi_i2d>
 80071fe:	4602      	mov	r2, r0
 8007200:	460b      	mov	r3, r1
 8007202:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007206:	f7f8 ffaf 	bl	8000168 <__aeabi_dsub>
 800720a:	4602      	mov	r2, r0
 800720c:	460b      	mov	r3, r1
 800720e:	3530      	adds	r5, #48	@ 0x30
 8007210:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007214:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007218:	f806 5b01 	strb.w	r5, [r6], #1
 800721c:	f7f9 fbce 	bl	80009bc <__aeabi_dcmplt>
 8007220:	2800      	cmp	r0, #0
 8007222:	d163      	bne.n	80072ec <_dtoa_r+0x65c>
 8007224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007228:	2000      	movs	r0, #0
 800722a:	495a      	ldr	r1, [pc, #360]	@ (8007394 <_dtoa_r+0x704>)
 800722c:	f7f8 ff9c 	bl	8000168 <__aeabi_dsub>
 8007230:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007234:	f7f9 fbc2 	bl	80009bc <__aeabi_dcmplt>
 8007238:	2800      	cmp	r0, #0
 800723a:	f040 8087 	bne.w	800734c <_dtoa_r+0x6bc>
 800723e:	42a6      	cmp	r6, r4
 8007240:	f43f af43 	beq.w	80070ca <_dtoa_r+0x43a>
 8007244:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007248:	2200      	movs	r2, #0
 800724a:	4b53      	ldr	r3, [pc, #332]	@ (8007398 <_dtoa_r+0x708>)
 800724c:	f7f9 f944 	bl	80004d8 <__aeabi_dmul>
 8007250:	2200      	movs	r2, #0
 8007252:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800725a:	4b4f      	ldr	r3, [pc, #316]	@ (8007398 <_dtoa_r+0x708>)
 800725c:	f7f9 f93c 	bl	80004d8 <__aeabi_dmul>
 8007260:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007264:	e7c4      	b.n	80071f0 <_dtoa_r+0x560>
 8007266:	4631      	mov	r1, r6
 8007268:	4628      	mov	r0, r5
 800726a:	f7f9 f935 	bl	80004d8 <__aeabi_dmul>
 800726e:	4656      	mov	r6, sl
 8007270:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007274:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800727a:	f7f9 fbdd 	bl	8000a38 <__aeabi_d2iz>
 800727e:	4605      	mov	r5, r0
 8007280:	f7f9 f8c0 	bl	8000404 <__aeabi_i2d>
 8007284:	4602      	mov	r2, r0
 8007286:	460b      	mov	r3, r1
 8007288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800728c:	f7f8 ff6c 	bl	8000168 <__aeabi_dsub>
 8007290:	4602      	mov	r2, r0
 8007292:	460b      	mov	r3, r1
 8007294:	3530      	adds	r5, #48	@ 0x30
 8007296:	f806 5b01 	strb.w	r5, [r6], #1
 800729a:	42a6      	cmp	r6, r4
 800729c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072a0:	f04f 0200 	mov.w	r2, #0
 80072a4:	d124      	bne.n	80072f0 <_dtoa_r+0x660>
 80072a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80072aa:	4b39      	ldr	r3, [pc, #228]	@ (8007390 <_dtoa_r+0x700>)
 80072ac:	f7f8 ff5e 	bl	800016c <__adddf3>
 80072b0:	4602      	mov	r2, r0
 80072b2:	460b      	mov	r3, r1
 80072b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072b8:	f7f9 fb9e 	bl	80009f8 <__aeabi_dcmpgt>
 80072bc:	2800      	cmp	r0, #0
 80072be:	d145      	bne.n	800734c <_dtoa_r+0x6bc>
 80072c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80072c4:	2000      	movs	r0, #0
 80072c6:	4932      	ldr	r1, [pc, #200]	@ (8007390 <_dtoa_r+0x700>)
 80072c8:	f7f8 ff4e 	bl	8000168 <__aeabi_dsub>
 80072cc:	4602      	mov	r2, r0
 80072ce:	460b      	mov	r3, r1
 80072d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072d4:	f7f9 fb72 	bl	80009bc <__aeabi_dcmplt>
 80072d8:	2800      	cmp	r0, #0
 80072da:	f43f aef6 	beq.w	80070ca <_dtoa_r+0x43a>
 80072de:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80072e0:	1e73      	subs	r3, r6, #1
 80072e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80072e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80072e8:	2b30      	cmp	r3, #48	@ 0x30
 80072ea:	d0f8      	beq.n	80072de <_dtoa_r+0x64e>
 80072ec:	9f04      	ldr	r7, [sp, #16]
 80072ee:	e73f      	b.n	8007170 <_dtoa_r+0x4e0>
 80072f0:	4b29      	ldr	r3, [pc, #164]	@ (8007398 <_dtoa_r+0x708>)
 80072f2:	f7f9 f8f1 	bl	80004d8 <__aeabi_dmul>
 80072f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072fa:	e7bc      	b.n	8007276 <_dtoa_r+0x5e6>
 80072fc:	d10c      	bne.n	8007318 <_dtoa_r+0x688>
 80072fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007302:	2200      	movs	r2, #0
 8007304:	4b25      	ldr	r3, [pc, #148]	@ (800739c <_dtoa_r+0x70c>)
 8007306:	f7f9 f8e7 	bl	80004d8 <__aeabi_dmul>
 800730a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800730e:	f7f9 fb69 	bl	80009e4 <__aeabi_dcmpge>
 8007312:	2800      	cmp	r0, #0
 8007314:	f000 815b 	beq.w	80075ce <_dtoa_r+0x93e>
 8007318:	2400      	movs	r4, #0
 800731a:	4625      	mov	r5, r4
 800731c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800731e:	4656      	mov	r6, sl
 8007320:	43db      	mvns	r3, r3
 8007322:	9304      	str	r3, [sp, #16]
 8007324:	2700      	movs	r7, #0
 8007326:	4621      	mov	r1, r4
 8007328:	4658      	mov	r0, fp
 800732a:	f000 fbb7 	bl	8007a9c <_Bfree>
 800732e:	2d00      	cmp	r5, #0
 8007330:	d0dc      	beq.n	80072ec <_dtoa_r+0x65c>
 8007332:	b12f      	cbz	r7, 8007340 <_dtoa_r+0x6b0>
 8007334:	42af      	cmp	r7, r5
 8007336:	d003      	beq.n	8007340 <_dtoa_r+0x6b0>
 8007338:	4639      	mov	r1, r7
 800733a:	4658      	mov	r0, fp
 800733c:	f000 fbae 	bl	8007a9c <_Bfree>
 8007340:	4629      	mov	r1, r5
 8007342:	4658      	mov	r0, fp
 8007344:	f000 fbaa 	bl	8007a9c <_Bfree>
 8007348:	e7d0      	b.n	80072ec <_dtoa_r+0x65c>
 800734a:	9704      	str	r7, [sp, #16]
 800734c:	4633      	mov	r3, r6
 800734e:	461e      	mov	r6, r3
 8007350:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007354:	2a39      	cmp	r2, #57	@ 0x39
 8007356:	d107      	bne.n	8007368 <_dtoa_r+0x6d8>
 8007358:	459a      	cmp	sl, r3
 800735a:	d1f8      	bne.n	800734e <_dtoa_r+0x6be>
 800735c:	9a04      	ldr	r2, [sp, #16]
 800735e:	3201      	adds	r2, #1
 8007360:	9204      	str	r2, [sp, #16]
 8007362:	2230      	movs	r2, #48	@ 0x30
 8007364:	f88a 2000 	strb.w	r2, [sl]
 8007368:	781a      	ldrb	r2, [r3, #0]
 800736a:	3201      	adds	r2, #1
 800736c:	701a      	strb	r2, [r3, #0]
 800736e:	e7bd      	b.n	80072ec <_dtoa_r+0x65c>
 8007370:	2200      	movs	r2, #0
 8007372:	4b09      	ldr	r3, [pc, #36]	@ (8007398 <_dtoa_r+0x708>)
 8007374:	f7f9 f8b0 	bl	80004d8 <__aeabi_dmul>
 8007378:	2200      	movs	r2, #0
 800737a:	2300      	movs	r3, #0
 800737c:	4604      	mov	r4, r0
 800737e:	460d      	mov	r5, r1
 8007380:	f7f9 fb12 	bl	80009a8 <__aeabi_dcmpeq>
 8007384:	2800      	cmp	r0, #0
 8007386:	f43f aebc 	beq.w	8007102 <_dtoa_r+0x472>
 800738a:	e6f1      	b.n	8007170 <_dtoa_r+0x4e0>
 800738c:	080090d8 	.word	0x080090d8
 8007390:	3fe00000 	.word	0x3fe00000
 8007394:	3ff00000 	.word	0x3ff00000
 8007398:	40240000 	.word	0x40240000
 800739c:	40140000 	.word	0x40140000
 80073a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80073a2:	2a00      	cmp	r2, #0
 80073a4:	f000 80db 	beq.w	800755e <_dtoa_r+0x8ce>
 80073a8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80073aa:	2a01      	cmp	r2, #1
 80073ac:	f300 80bf 	bgt.w	800752e <_dtoa_r+0x89e>
 80073b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80073b2:	2a00      	cmp	r2, #0
 80073b4:	f000 80b7 	beq.w	8007526 <_dtoa_r+0x896>
 80073b8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80073bc:	4646      	mov	r6, r8
 80073be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80073c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073c2:	2101      	movs	r1, #1
 80073c4:	441a      	add	r2, r3
 80073c6:	4658      	mov	r0, fp
 80073c8:	4498      	add	r8, r3
 80073ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80073cc:	f000 fc1a 	bl	8007c04 <__i2b>
 80073d0:	4605      	mov	r5, r0
 80073d2:	b15e      	cbz	r6, 80073ec <_dtoa_r+0x75c>
 80073d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	dd08      	ble.n	80073ec <_dtoa_r+0x75c>
 80073da:	42b3      	cmp	r3, r6
 80073dc:	bfa8      	it	ge
 80073de:	4633      	movge	r3, r6
 80073e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073e2:	eba8 0803 	sub.w	r8, r8, r3
 80073e6:	1af6      	subs	r6, r6, r3
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80073ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073ee:	b1f3      	cbz	r3, 800742e <_dtoa_r+0x79e>
 80073f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 80b7 	beq.w	8007566 <_dtoa_r+0x8d6>
 80073f8:	b18c      	cbz	r4, 800741e <_dtoa_r+0x78e>
 80073fa:	4629      	mov	r1, r5
 80073fc:	4622      	mov	r2, r4
 80073fe:	4658      	mov	r0, fp
 8007400:	f000 fcbe 	bl	8007d80 <__pow5mult>
 8007404:	464a      	mov	r2, r9
 8007406:	4601      	mov	r1, r0
 8007408:	4605      	mov	r5, r0
 800740a:	4658      	mov	r0, fp
 800740c:	f000 fc10 	bl	8007c30 <__multiply>
 8007410:	4649      	mov	r1, r9
 8007412:	9004      	str	r0, [sp, #16]
 8007414:	4658      	mov	r0, fp
 8007416:	f000 fb41 	bl	8007a9c <_Bfree>
 800741a:	9b04      	ldr	r3, [sp, #16]
 800741c:	4699      	mov	r9, r3
 800741e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007420:	1b1a      	subs	r2, r3, r4
 8007422:	d004      	beq.n	800742e <_dtoa_r+0x79e>
 8007424:	4649      	mov	r1, r9
 8007426:	4658      	mov	r0, fp
 8007428:	f000 fcaa 	bl	8007d80 <__pow5mult>
 800742c:	4681      	mov	r9, r0
 800742e:	2101      	movs	r1, #1
 8007430:	4658      	mov	r0, fp
 8007432:	f000 fbe7 	bl	8007c04 <__i2b>
 8007436:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007438:	4604      	mov	r4, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	f000 81c9 	beq.w	80077d2 <_dtoa_r+0xb42>
 8007440:	461a      	mov	r2, r3
 8007442:	4601      	mov	r1, r0
 8007444:	4658      	mov	r0, fp
 8007446:	f000 fc9b 	bl	8007d80 <__pow5mult>
 800744a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800744c:	4604      	mov	r4, r0
 800744e:	2b01      	cmp	r3, #1
 8007450:	f300 808f 	bgt.w	8007572 <_dtoa_r+0x8e2>
 8007454:	9b02      	ldr	r3, [sp, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	f040 8087 	bne.w	800756a <_dtoa_r+0x8da>
 800745c:	9b03      	ldr	r3, [sp, #12]
 800745e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007462:	2b00      	cmp	r3, #0
 8007464:	f040 8083 	bne.w	800756e <_dtoa_r+0x8de>
 8007468:	9b03      	ldr	r3, [sp, #12]
 800746a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800746e:	0d1b      	lsrs	r3, r3, #20
 8007470:	051b      	lsls	r3, r3, #20
 8007472:	b12b      	cbz	r3, 8007480 <_dtoa_r+0x7f0>
 8007474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007476:	f108 0801 	add.w	r8, r8, #1
 800747a:	3301      	adds	r3, #1
 800747c:	9309      	str	r3, [sp, #36]	@ 0x24
 800747e:	2301      	movs	r3, #1
 8007480:	930a      	str	r3, [sp, #40]	@ 0x28
 8007482:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 81aa 	beq.w	80077de <_dtoa_r+0xb4e>
 800748a:	6923      	ldr	r3, [r4, #16]
 800748c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007490:	6918      	ldr	r0, [r3, #16]
 8007492:	f000 fb6b 	bl	8007b6c <__hi0bits>
 8007496:	f1c0 0020 	rsb	r0, r0, #32
 800749a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800749c:	4418      	add	r0, r3
 800749e:	f010 001f 	ands.w	r0, r0, #31
 80074a2:	d071      	beq.n	8007588 <_dtoa_r+0x8f8>
 80074a4:	f1c0 0320 	rsb	r3, r0, #32
 80074a8:	2b04      	cmp	r3, #4
 80074aa:	dd65      	ble.n	8007578 <_dtoa_r+0x8e8>
 80074ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074ae:	f1c0 001c 	rsb	r0, r0, #28
 80074b2:	4403      	add	r3, r0
 80074b4:	4480      	add	r8, r0
 80074b6:	4406      	add	r6, r0
 80074b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80074ba:	f1b8 0f00 	cmp.w	r8, #0
 80074be:	dd05      	ble.n	80074cc <_dtoa_r+0x83c>
 80074c0:	4649      	mov	r1, r9
 80074c2:	4642      	mov	r2, r8
 80074c4:	4658      	mov	r0, fp
 80074c6:	f000 fcb5 	bl	8007e34 <__lshift>
 80074ca:	4681      	mov	r9, r0
 80074cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	dd05      	ble.n	80074de <_dtoa_r+0x84e>
 80074d2:	4621      	mov	r1, r4
 80074d4:	461a      	mov	r2, r3
 80074d6:	4658      	mov	r0, fp
 80074d8:	f000 fcac 	bl	8007e34 <__lshift>
 80074dc:	4604      	mov	r4, r0
 80074de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d053      	beq.n	800758c <_dtoa_r+0x8fc>
 80074e4:	4621      	mov	r1, r4
 80074e6:	4648      	mov	r0, r9
 80074e8:	f000 fd10 	bl	8007f0c <__mcmp>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	da4d      	bge.n	800758c <_dtoa_r+0x8fc>
 80074f0:	1e7b      	subs	r3, r7, #1
 80074f2:	4649      	mov	r1, r9
 80074f4:	9304      	str	r3, [sp, #16]
 80074f6:	220a      	movs	r2, #10
 80074f8:	2300      	movs	r3, #0
 80074fa:	4658      	mov	r0, fp
 80074fc:	f000 faf0 	bl	8007ae0 <__multadd>
 8007500:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007502:	4681      	mov	r9, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	f000 816c 	beq.w	80077e2 <_dtoa_r+0xb52>
 800750a:	2300      	movs	r3, #0
 800750c:	4629      	mov	r1, r5
 800750e:	220a      	movs	r2, #10
 8007510:	4658      	mov	r0, fp
 8007512:	f000 fae5 	bl	8007ae0 <__multadd>
 8007516:	9b08      	ldr	r3, [sp, #32]
 8007518:	4605      	mov	r5, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	dc61      	bgt.n	80075e2 <_dtoa_r+0x952>
 800751e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007520:	2b02      	cmp	r3, #2
 8007522:	dc3b      	bgt.n	800759c <_dtoa_r+0x90c>
 8007524:	e05d      	b.n	80075e2 <_dtoa_r+0x952>
 8007526:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007528:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800752c:	e746      	b.n	80073bc <_dtoa_r+0x72c>
 800752e:	9b07      	ldr	r3, [sp, #28]
 8007530:	1e5c      	subs	r4, r3, #1
 8007532:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007534:	42a3      	cmp	r3, r4
 8007536:	bfbf      	itttt	lt
 8007538:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800753a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800753c:	1ae3      	sublt	r3, r4, r3
 800753e:	18d2      	addlt	r2, r2, r3
 8007540:	bfa8      	it	ge
 8007542:	1b1c      	subge	r4, r3, r4
 8007544:	9b07      	ldr	r3, [sp, #28]
 8007546:	bfbe      	ittt	lt
 8007548:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800754a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800754c:	2400      	movlt	r4, #0
 800754e:	2b00      	cmp	r3, #0
 8007550:	bfb5      	itete	lt
 8007552:	eba8 0603 	sublt.w	r6, r8, r3
 8007556:	4646      	movge	r6, r8
 8007558:	2300      	movlt	r3, #0
 800755a:	9b07      	ldrge	r3, [sp, #28]
 800755c:	e730      	b.n	80073c0 <_dtoa_r+0x730>
 800755e:	4646      	mov	r6, r8
 8007560:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007562:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007564:	e735      	b.n	80073d2 <_dtoa_r+0x742>
 8007566:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007568:	e75c      	b.n	8007424 <_dtoa_r+0x794>
 800756a:	2300      	movs	r3, #0
 800756c:	e788      	b.n	8007480 <_dtoa_r+0x7f0>
 800756e:	9b02      	ldr	r3, [sp, #8]
 8007570:	e786      	b.n	8007480 <_dtoa_r+0x7f0>
 8007572:	2300      	movs	r3, #0
 8007574:	930a      	str	r3, [sp, #40]	@ 0x28
 8007576:	e788      	b.n	800748a <_dtoa_r+0x7fa>
 8007578:	d09f      	beq.n	80074ba <_dtoa_r+0x82a>
 800757a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800757c:	331c      	adds	r3, #28
 800757e:	441a      	add	r2, r3
 8007580:	4498      	add	r8, r3
 8007582:	441e      	add	r6, r3
 8007584:	9209      	str	r2, [sp, #36]	@ 0x24
 8007586:	e798      	b.n	80074ba <_dtoa_r+0x82a>
 8007588:	4603      	mov	r3, r0
 800758a:	e7f6      	b.n	800757a <_dtoa_r+0x8ea>
 800758c:	9b07      	ldr	r3, [sp, #28]
 800758e:	9704      	str	r7, [sp, #16]
 8007590:	2b00      	cmp	r3, #0
 8007592:	dc20      	bgt.n	80075d6 <_dtoa_r+0x946>
 8007594:	9308      	str	r3, [sp, #32]
 8007596:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007598:	2b02      	cmp	r3, #2
 800759a:	dd1e      	ble.n	80075da <_dtoa_r+0x94a>
 800759c:	9b08      	ldr	r3, [sp, #32]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f47f aebc 	bne.w	800731c <_dtoa_r+0x68c>
 80075a4:	4621      	mov	r1, r4
 80075a6:	2205      	movs	r2, #5
 80075a8:	4658      	mov	r0, fp
 80075aa:	f000 fa99 	bl	8007ae0 <__multadd>
 80075ae:	4601      	mov	r1, r0
 80075b0:	4604      	mov	r4, r0
 80075b2:	4648      	mov	r0, r9
 80075b4:	f000 fcaa 	bl	8007f0c <__mcmp>
 80075b8:	2800      	cmp	r0, #0
 80075ba:	f77f aeaf 	ble.w	800731c <_dtoa_r+0x68c>
 80075be:	2331      	movs	r3, #49	@ 0x31
 80075c0:	4656      	mov	r6, sl
 80075c2:	f806 3b01 	strb.w	r3, [r6], #1
 80075c6:	9b04      	ldr	r3, [sp, #16]
 80075c8:	3301      	adds	r3, #1
 80075ca:	9304      	str	r3, [sp, #16]
 80075cc:	e6aa      	b.n	8007324 <_dtoa_r+0x694>
 80075ce:	9c07      	ldr	r4, [sp, #28]
 80075d0:	9704      	str	r7, [sp, #16]
 80075d2:	4625      	mov	r5, r4
 80075d4:	e7f3      	b.n	80075be <_dtoa_r+0x92e>
 80075d6:	9b07      	ldr	r3, [sp, #28]
 80075d8:	9308      	str	r3, [sp, #32]
 80075da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 8104 	beq.w	80077ea <_dtoa_r+0xb5a>
 80075e2:	2e00      	cmp	r6, #0
 80075e4:	dd05      	ble.n	80075f2 <_dtoa_r+0x962>
 80075e6:	4629      	mov	r1, r5
 80075e8:	4632      	mov	r2, r6
 80075ea:	4658      	mov	r0, fp
 80075ec:	f000 fc22 	bl	8007e34 <__lshift>
 80075f0:	4605      	mov	r5, r0
 80075f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d05a      	beq.n	80076ae <_dtoa_r+0xa1e>
 80075f8:	4658      	mov	r0, fp
 80075fa:	6869      	ldr	r1, [r5, #4]
 80075fc:	f000 fa0e 	bl	8007a1c <_Balloc>
 8007600:	4606      	mov	r6, r0
 8007602:	b928      	cbnz	r0, 8007610 <_dtoa_r+0x980>
 8007604:	4602      	mov	r2, r0
 8007606:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800760a:	4b83      	ldr	r3, [pc, #524]	@ (8007818 <_dtoa_r+0xb88>)
 800760c:	f7ff bb54 	b.w	8006cb8 <_dtoa_r+0x28>
 8007610:	692a      	ldr	r2, [r5, #16]
 8007612:	f105 010c 	add.w	r1, r5, #12
 8007616:	3202      	adds	r2, #2
 8007618:	0092      	lsls	r2, r2, #2
 800761a:	300c      	adds	r0, #12
 800761c:	f000 ffa8 	bl	8008570 <memcpy>
 8007620:	2201      	movs	r2, #1
 8007622:	4631      	mov	r1, r6
 8007624:	4658      	mov	r0, fp
 8007626:	f000 fc05 	bl	8007e34 <__lshift>
 800762a:	462f      	mov	r7, r5
 800762c:	4605      	mov	r5, r0
 800762e:	f10a 0301 	add.w	r3, sl, #1
 8007632:	9307      	str	r3, [sp, #28]
 8007634:	9b08      	ldr	r3, [sp, #32]
 8007636:	4453      	add	r3, sl
 8007638:	930b      	str	r3, [sp, #44]	@ 0x2c
 800763a:	9b02      	ldr	r3, [sp, #8]
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	930a      	str	r3, [sp, #40]	@ 0x28
 8007642:	9b07      	ldr	r3, [sp, #28]
 8007644:	4621      	mov	r1, r4
 8007646:	3b01      	subs	r3, #1
 8007648:	4648      	mov	r0, r9
 800764a:	9302      	str	r3, [sp, #8]
 800764c:	f7ff fa97 	bl	8006b7e <quorem>
 8007650:	4639      	mov	r1, r7
 8007652:	9008      	str	r0, [sp, #32]
 8007654:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007658:	4648      	mov	r0, r9
 800765a:	f000 fc57 	bl	8007f0c <__mcmp>
 800765e:	462a      	mov	r2, r5
 8007660:	9009      	str	r0, [sp, #36]	@ 0x24
 8007662:	4621      	mov	r1, r4
 8007664:	4658      	mov	r0, fp
 8007666:	f000 fc6d 	bl	8007f44 <__mdiff>
 800766a:	68c2      	ldr	r2, [r0, #12]
 800766c:	4606      	mov	r6, r0
 800766e:	bb02      	cbnz	r2, 80076b2 <_dtoa_r+0xa22>
 8007670:	4601      	mov	r1, r0
 8007672:	4648      	mov	r0, r9
 8007674:	f000 fc4a 	bl	8007f0c <__mcmp>
 8007678:	4602      	mov	r2, r0
 800767a:	4631      	mov	r1, r6
 800767c:	4658      	mov	r0, fp
 800767e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007680:	f000 fa0c 	bl	8007a9c <_Bfree>
 8007684:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007686:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007688:	9e07      	ldr	r6, [sp, #28]
 800768a:	ea43 0102 	orr.w	r1, r3, r2
 800768e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007690:	4319      	orrs	r1, r3
 8007692:	d110      	bne.n	80076b6 <_dtoa_r+0xa26>
 8007694:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007698:	d029      	beq.n	80076ee <_dtoa_r+0xa5e>
 800769a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800769c:	2b00      	cmp	r3, #0
 800769e:	dd02      	ble.n	80076a6 <_dtoa_r+0xa16>
 80076a0:	9b08      	ldr	r3, [sp, #32]
 80076a2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80076a6:	9b02      	ldr	r3, [sp, #8]
 80076a8:	f883 8000 	strb.w	r8, [r3]
 80076ac:	e63b      	b.n	8007326 <_dtoa_r+0x696>
 80076ae:	4628      	mov	r0, r5
 80076b0:	e7bb      	b.n	800762a <_dtoa_r+0x99a>
 80076b2:	2201      	movs	r2, #1
 80076b4:	e7e1      	b.n	800767a <_dtoa_r+0x9ea>
 80076b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	db04      	blt.n	80076c6 <_dtoa_r+0xa36>
 80076bc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80076be:	430b      	orrs	r3, r1
 80076c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076c2:	430b      	orrs	r3, r1
 80076c4:	d120      	bne.n	8007708 <_dtoa_r+0xa78>
 80076c6:	2a00      	cmp	r2, #0
 80076c8:	dded      	ble.n	80076a6 <_dtoa_r+0xa16>
 80076ca:	4649      	mov	r1, r9
 80076cc:	2201      	movs	r2, #1
 80076ce:	4658      	mov	r0, fp
 80076d0:	f000 fbb0 	bl	8007e34 <__lshift>
 80076d4:	4621      	mov	r1, r4
 80076d6:	4681      	mov	r9, r0
 80076d8:	f000 fc18 	bl	8007f0c <__mcmp>
 80076dc:	2800      	cmp	r0, #0
 80076de:	dc03      	bgt.n	80076e8 <_dtoa_r+0xa58>
 80076e0:	d1e1      	bne.n	80076a6 <_dtoa_r+0xa16>
 80076e2:	f018 0f01 	tst.w	r8, #1
 80076e6:	d0de      	beq.n	80076a6 <_dtoa_r+0xa16>
 80076e8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80076ec:	d1d8      	bne.n	80076a0 <_dtoa_r+0xa10>
 80076ee:	2339      	movs	r3, #57	@ 0x39
 80076f0:	9a02      	ldr	r2, [sp, #8]
 80076f2:	7013      	strb	r3, [r2, #0]
 80076f4:	4633      	mov	r3, r6
 80076f6:	461e      	mov	r6, r3
 80076f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80076fc:	3b01      	subs	r3, #1
 80076fe:	2a39      	cmp	r2, #57	@ 0x39
 8007700:	d052      	beq.n	80077a8 <_dtoa_r+0xb18>
 8007702:	3201      	adds	r2, #1
 8007704:	701a      	strb	r2, [r3, #0]
 8007706:	e60e      	b.n	8007326 <_dtoa_r+0x696>
 8007708:	2a00      	cmp	r2, #0
 800770a:	dd07      	ble.n	800771c <_dtoa_r+0xa8c>
 800770c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007710:	d0ed      	beq.n	80076ee <_dtoa_r+0xa5e>
 8007712:	9a02      	ldr	r2, [sp, #8]
 8007714:	f108 0301 	add.w	r3, r8, #1
 8007718:	7013      	strb	r3, [r2, #0]
 800771a:	e604      	b.n	8007326 <_dtoa_r+0x696>
 800771c:	9b07      	ldr	r3, [sp, #28]
 800771e:	9a07      	ldr	r2, [sp, #28]
 8007720:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007724:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007726:	4293      	cmp	r3, r2
 8007728:	d028      	beq.n	800777c <_dtoa_r+0xaec>
 800772a:	4649      	mov	r1, r9
 800772c:	2300      	movs	r3, #0
 800772e:	220a      	movs	r2, #10
 8007730:	4658      	mov	r0, fp
 8007732:	f000 f9d5 	bl	8007ae0 <__multadd>
 8007736:	42af      	cmp	r7, r5
 8007738:	4681      	mov	r9, r0
 800773a:	f04f 0300 	mov.w	r3, #0
 800773e:	f04f 020a 	mov.w	r2, #10
 8007742:	4639      	mov	r1, r7
 8007744:	4658      	mov	r0, fp
 8007746:	d107      	bne.n	8007758 <_dtoa_r+0xac8>
 8007748:	f000 f9ca 	bl	8007ae0 <__multadd>
 800774c:	4607      	mov	r7, r0
 800774e:	4605      	mov	r5, r0
 8007750:	9b07      	ldr	r3, [sp, #28]
 8007752:	3301      	adds	r3, #1
 8007754:	9307      	str	r3, [sp, #28]
 8007756:	e774      	b.n	8007642 <_dtoa_r+0x9b2>
 8007758:	f000 f9c2 	bl	8007ae0 <__multadd>
 800775c:	4629      	mov	r1, r5
 800775e:	4607      	mov	r7, r0
 8007760:	2300      	movs	r3, #0
 8007762:	220a      	movs	r2, #10
 8007764:	4658      	mov	r0, fp
 8007766:	f000 f9bb 	bl	8007ae0 <__multadd>
 800776a:	4605      	mov	r5, r0
 800776c:	e7f0      	b.n	8007750 <_dtoa_r+0xac0>
 800776e:	9b08      	ldr	r3, [sp, #32]
 8007770:	2700      	movs	r7, #0
 8007772:	2b00      	cmp	r3, #0
 8007774:	bfcc      	ite	gt
 8007776:	461e      	movgt	r6, r3
 8007778:	2601      	movle	r6, #1
 800777a:	4456      	add	r6, sl
 800777c:	4649      	mov	r1, r9
 800777e:	2201      	movs	r2, #1
 8007780:	4658      	mov	r0, fp
 8007782:	f000 fb57 	bl	8007e34 <__lshift>
 8007786:	4621      	mov	r1, r4
 8007788:	4681      	mov	r9, r0
 800778a:	f000 fbbf 	bl	8007f0c <__mcmp>
 800778e:	2800      	cmp	r0, #0
 8007790:	dcb0      	bgt.n	80076f4 <_dtoa_r+0xa64>
 8007792:	d102      	bne.n	800779a <_dtoa_r+0xb0a>
 8007794:	f018 0f01 	tst.w	r8, #1
 8007798:	d1ac      	bne.n	80076f4 <_dtoa_r+0xa64>
 800779a:	4633      	mov	r3, r6
 800779c:	461e      	mov	r6, r3
 800779e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077a2:	2a30      	cmp	r2, #48	@ 0x30
 80077a4:	d0fa      	beq.n	800779c <_dtoa_r+0xb0c>
 80077a6:	e5be      	b.n	8007326 <_dtoa_r+0x696>
 80077a8:	459a      	cmp	sl, r3
 80077aa:	d1a4      	bne.n	80076f6 <_dtoa_r+0xa66>
 80077ac:	9b04      	ldr	r3, [sp, #16]
 80077ae:	3301      	adds	r3, #1
 80077b0:	9304      	str	r3, [sp, #16]
 80077b2:	2331      	movs	r3, #49	@ 0x31
 80077b4:	f88a 3000 	strb.w	r3, [sl]
 80077b8:	e5b5      	b.n	8007326 <_dtoa_r+0x696>
 80077ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80077bc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800781c <_dtoa_r+0xb8c>
 80077c0:	b11b      	cbz	r3, 80077ca <_dtoa_r+0xb3a>
 80077c2:	f10a 0308 	add.w	r3, sl, #8
 80077c6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80077c8:	6013      	str	r3, [r2, #0]
 80077ca:	4650      	mov	r0, sl
 80077cc:	b017      	add	sp, #92	@ 0x5c
 80077ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	f77f ae3d 	ble.w	8007454 <_dtoa_r+0x7c4>
 80077da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80077de:	2001      	movs	r0, #1
 80077e0:	e65b      	b.n	800749a <_dtoa_r+0x80a>
 80077e2:	9b08      	ldr	r3, [sp, #32]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f77f aed6 	ble.w	8007596 <_dtoa_r+0x906>
 80077ea:	4656      	mov	r6, sl
 80077ec:	4621      	mov	r1, r4
 80077ee:	4648      	mov	r0, r9
 80077f0:	f7ff f9c5 	bl	8006b7e <quorem>
 80077f4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80077f8:	9b08      	ldr	r3, [sp, #32]
 80077fa:	f806 8b01 	strb.w	r8, [r6], #1
 80077fe:	eba6 020a 	sub.w	r2, r6, sl
 8007802:	4293      	cmp	r3, r2
 8007804:	ddb3      	ble.n	800776e <_dtoa_r+0xade>
 8007806:	4649      	mov	r1, r9
 8007808:	2300      	movs	r3, #0
 800780a:	220a      	movs	r2, #10
 800780c:	4658      	mov	r0, fp
 800780e:	f000 f967 	bl	8007ae0 <__multadd>
 8007812:	4681      	mov	r9, r0
 8007814:	e7ea      	b.n	80077ec <_dtoa_r+0xb5c>
 8007816:	bf00      	nop
 8007818:	0800903a 	.word	0x0800903a
 800781c:	08008fbe 	.word	0x08008fbe

08007820 <_free_r>:
 8007820:	b538      	push	{r3, r4, r5, lr}
 8007822:	4605      	mov	r5, r0
 8007824:	2900      	cmp	r1, #0
 8007826:	d040      	beq.n	80078aa <_free_r+0x8a>
 8007828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800782c:	1f0c      	subs	r4, r1, #4
 800782e:	2b00      	cmp	r3, #0
 8007830:	bfb8      	it	lt
 8007832:	18e4      	addlt	r4, r4, r3
 8007834:	f000 f8e6 	bl	8007a04 <__malloc_lock>
 8007838:	4a1c      	ldr	r2, [pc, #112]	@ (80078ac <_free_r+0x8c>)
 800783a:	6813      	ldr	r3, [r2, #0]
 800783c:	b933      	cbnz	r3, 800784c <_free_r+0x2c>
 800783e:	6063      	str	r3, [r4, #4]
 8007840:	6014      	str	r4, [r2, #0]
 8007842:	4628      	mov	r0, r5
 8007844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007848:	f000 b8e2 	b.w	8007a10 <__malloc_unlock>
 800784c:	42a3      	cmp	r3, r4
 800784e:	d908      	bls.n	8007862 <_free_r+0x42>
 8007850:	6820      	ldr	r0, [r4, #0]
 8007852:	1821      	adds	r1, r4, r0
 8007854:	428b      	cmp	r3, r1
 8007856:	bf01      	itttt	eq
 8007858:	6819      	ldreq	r1, [r3, #0]
 800785a:	685b      	ldreq	r3, [r3, #4]
 800785c:	1809      	addeq	r1, r1, r0
 800785e:	6021      	streq	r1, [r4, #0]
 8007860:	e7ed      	b.n	800783e <_free_r+0x1e>
 8007862:	461a      	mov	r2, r3
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	b10b      	cbz	r3, 800786c <_free_r+0x4c>
 8007868:	42a3      	cmp	r3, r4
 800786a:	d9fa      	bls.n	8007862 <_free_r+0x42>
 800786c:	6811      	ldr	r1, [r2, #0]
 800786e:	1850      	adds	r0, r2, r1
 8007870:	42a0      	cmp	r0, r4
 8007872:	d10b      	bne.n	800788c <_free_r+0x6c>
 8007874:	6820      	ldr	r0, [r4, #0]
 8007876:	4401      	add	r1, r0
 8007878:	1850      	adds	r0, r2, r1
 800787a:	4283      	cmp	r3, r0
 800787c:	6011      	str	r1, [r2, #0]
 800787e:	d1e0      	bne.n	8007842 <_free_r+0x22>
 8007880:	6818      	ldr	r0, [r3, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	4408      	add	r0, r1
 8007886:	6010      	str	r0, [r2, #0]
 8007888:	6053      	str	r3, [r2, #4]
 800788a:	e7da      	b.n	8007842 <_free_r+0x22>
 800788c:	d902      	bls.n	8007894 <_free_r+0x74>
 800788e:	230c      	movs	r3, #12
 8007890:	602b      	str	r3, [r5, #0]
 8007892:	e7d6      	b.n	8007842 <_free_r+0x22>
 8007894:	6820      	ldr	r0, [r4, #0]
 8007896:	1821      	adds	r1, r4, r0
 8007898:	428b      	cmp	r3, r1
 800789a:	bf01      	itttt	eq
 800789c:	6819      	ldreq	r1, [r3, #0]
 800789e:	685b      	ldreq	r3, [r3, #4]
 80078a0:	1809      	addeq	r1, r1, r0
 80078a2:	6021      	streq	r1, [r4, #0]
 80078a4:	6063      	str	r3, [r4, #4]
 80078a6:	6054      	str	r4, [r2, #4]
 80078a8:	e7cb      	b.n	8007842 <_free_r+0x22>
 80078aa:	bd38      	pop	{r3, r4, r5, pc}
 80078ac:	200005b8 	.word	0x200005b8

080078b0 <malloc>:
 80078b0:	4b02      	ldr	r3, [pc, #8]	@ (80078bc <malloc+0xc>)
 80078b2:	4601      	mov	r1, r0
 80078b4:	6818      	ldr	r0, [r3, #0]
 80078b6:	f000 b825 	b.w	8007904 <_malloc_r>
 80078ba:	bf00      	nop
 80078bc:	20000028 	.word	0x20000028

080078c0 <sbrk_aligned>:
 80078c0:	b570      	push	{r4, r5, r6, lr}
 80078c2:	4e0f      	ldr	r6, [pc, #60]	@ (8007900 <sbrk_aligned+0x40>)
 80078c4:	460c      	mov	r4, r1
 80078c6:	6831      	ldr	r1, [r6, #0]
 80078c8:	4605      	mov	r5, r0
 80078ca:	b911      	cbnz	r1, 80078d2 <sbrk_aligned+0x12>
 80078cc:	f000 fe40 	bl	8008550 <_sbrk_r>
 80078d0:	6030      	str	r0, [r6, #0]
 80078d2:	4621      	mov	r1, r4
 80078d4:	4628      	mov	r0, r5
 80078d6:	f000 fe3b 	bl	8008550 <_sbrk_r>
 80078da:	1c43      	adds	r3, r0, #1
 80078dc:	d103      	bne.n	80078e6 <sbrk_aligned+0x26>
 80078de:	f04f 34ff 	mov.w	r4, #4294967295
 80078e2:	4620      	mov	r0, r4
 80078e4:	bd70      	pop	{r4, r5, r6, pc}
 80078e6:	1cc4      	adds	r4, r0, #3
 80078e8:	f024 0403 	bic.w	r4, r4, #3
 80078ec:	42a0      	cmp	r0, r4
 80078ee:	d0f8      	beq.n	80078e2 <sbrk_aligned+0x22>
 80078f0:	1a21      	subs	r1, r4, r0
 80078f2:	4628      	mov	r0, r5
 80078f4:	f000 fe2c 	bl	8008550 <_sbrk_r>
 80078f8:	3001      	adds	r0, #1
 80078fa:	d1f2      	bne.n	80078e2 <sbrk_aligned+0x22>
 80078fc:	e7ef      	b.n	80078de <sbrk_aligned+0x1e>
 80078fe:	bf00      	nop
 8007900:	200005b4 	.word	0x200005b4

08007904 <_malloc_r>:
 8007904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007908:	1ccd      	adds	r5, r1, #3
 800790a:	f025 0503 	bic.w	r5, r5, #3
 800790e:	3508      	adds	r5, #8
 8007910:	2d0c      	cmp	r5, #12
 8007912:	bf38      	it	cc
 8007914:	250c      	movcc	r5, #12
 8007916:	2d00      	cmp	r5, #0
 8007918:	4606      	mov	r6, r0
 800791a:	db01      	blt.n	8007920 <_malloc_r+0x1c>
 800791c:	42a9      	cmp	r1, r5
 800791e:	d904      	bls.n	800792a <_malloc_r+0x26>
 8007920:	230c      	movs	r3, #12
 8007922:	6033      	str	r3, [r6, #0]
 8007924:	2000      	movs	r0, #0
 8007926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800792a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a00 <_malloc_r+0xfc>
 800792e:	f000 f869 	bl	8007a04 <__malloc_lock>
 8007932:	f8d8 3000 	ldr.w	r3, [r8]
 8007936:	461c      	mov	r4, r3
 8007938:	bb44      	cbnz	r4, 800798c <_malloc_r+0x88>
 800793a:	4629      	mov	r1, r5
 800793c:	4630      	mov	r0, r6
 800793e:	f7ff ffbf 	bl	80078c0 <sbrk_aligned>
 8007942:	1c43      	adds	r3, r0, #1
 8007944:	4604      	mov	r4, r0
 8007946:	d158      	bne.n	80079fa <_malloc_r+0xf6>
 8007948:	f8d8 4000 	ldr.w	r4, [r8]
 800794c:	4627      	mov	r7, r4
 800794e:	2f00      	cmp	r7, #0
 8007950:	d143      	bne.n	80079da <_malloc_r+0xd6>
 8007952:	2c00      	cmp	r4, #0
 8007954:	d04b      	beq.n	80079ee <_malloc_r+0xea>
 8007956:	6823      	ldr	r3, [r4, #0]
 8007958:	4639      	mov	r1, r7
 800795a:	4630      	mov	r0, r6
 800795c:	eb04 0903 	add.w	r9, r4, r3
 8007960:	f000 fdf6 	bl	8008550 <_sbrk_r>
 8007964:	4581      	cmp	r9, r0
 8007966:	d142      	bne.n	80079ee <_malloc_r+0xea>
 8007968:	6821      	ldr	r1, [r4, #0]
 800796a:	4630      	mov	r0, r6
 800796c:	1a6d      	subs	r5, r5, r1
 800796e:	4629      	mov	r1, r5
 8007970:	f7ff ffa6 	bl	80078c0 <sbrk_aligned>
 8007974:	3001      	adds	r0, #1
 8007976:	d03a      	beq.n	80079ee <_malloc_r+0xea>
 8007978:	6823      	ldr	r3, [r4, #0]
 800797a:	442b      	add	r3, r5
 800797c:	6023      	str	r3, [r4, #0]
 800797e:	f8d8 3000 	ldr.w	r3, [r8]
 8007982:	685a      	ldr	r2, [r3, #4]
 8007984:	bb62      	cbnz	r2, 80079e0 <_malloc_r+0xdc>
 8007986:	f8c8 7000 	str.w	r7, [r8]
 800798a:	e00f      	b.n	80079ac <_malloc_r+0xa8>
 800798c:	6822      	ldr	r2, [r4, #0]
 800798e:	1b52      	subs	r2, r2, r5
 8007990:	d420      	bmi.n	80079d4 <_malloc_r+0xd0>
 8007992:	2a0b      	cmp	r2, #11
 8007994:	d917      	bls.n	80079c6 <_malloc_r+0xc2>
 8007996:	1961      	adds	r1, r4, r5
 8007998:	42a3      	cmp	r3, r4
 800799a:	6025      	str	r5, [r4, #0]
 800799c:	bf18      	it	ne
 800799e:	6059      	strne	r1, [r3, #4]
 80079a0:	6863      	ldr	r3, [r4, #4]
 80079a2:	bf08      	it	eq
 80079a4:	f8c8 1000 	streq.w	r1, [r8]
 80079a8:	5162      	str	r2, [r4, r5]
 80079aa:	604b      	str	r3, [r1, #4]
 80079ac:	4630      	mov	r0, r6
 80079ae:	f000 f82f 	bl	8007a10 <__malloc_unlock>
 80079b2:	f104 000b 	add.w	r0, r4, #11
 80079b6:	1d23      	adds	r3, r4, #4
 80079b8:	f020 0007 	bic.w	r0, r0, #7
 80079bc:	1ac2      	subs	r2, r0, r3
 80079be:	bf1c      	itt	ne
 80079c0:	1a1b      	subne	r3, r3, r0
 80079c2:	50a3      	strne	r3, [r4, r2]
 80079c4:	e7af      	b.n	8007926 <_malloc_r+0x22>
 80079c6:	6862      	ldr	r2, [r4, #4]
 80079c8:	42a3      	cmp	r3, r4
 80079ca:	bf0c      	ite	eq
 80079cc:	f8c8 2000 	streq.w	r2, [r8]
 80079d0:	605a      	strne	r2, [r3, #4]
 80079d2:	e7eb      	b.n	80079ac <_malloc_r+0xa8>
 80079d4:	4623      	mov	r3, r4
 80079d6:	6864      	ldr	r4, [r4, #4]
 80079d8:	e7ae      	b.n	8007938 <_malloc_r+0x34>
 80079da:	463c      	mov	r4, r7
 80079dc:	687f      	ldr	r7, [r7, #4]
 80079de:	e7b6      	b.n	800794e <_malloc_r+0x4a>
 80079e0:	461a      	mov	r2, r3
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	42a3      	cmp	r3, r4
 80079e6:	d1fb      	bne.n	80079e0 <_malloc_r+0xdc>
 80079e8:	2300      	movs	r3, #0
 80079ea:	6053      	str	r3, [r2, #4]
 80079ec:	e7de      	b.n	80079ac <_malloc_r+0xa8>
 80079ee:	230c      	movs	r3, #12
 80079f0:	4630      	mov	r0, r6
 80079f2:	6033      	str	r3, [r6, #0]
 80079f4:	f000 f80c 	bl	8007a10 <__malloc_unlock>
 80079f8:	e794      	b.n	8007924 <_malloc_r+0x20>
 80079fa:	6005      	str	r5, [r0, #0]
 80079fc:	e7d6      	b.n	80079ac <_malloc_r+0xa8>
 80079fe:	bf00      	nop
 8007a00:	200005b8 	.word	0x200005b8

08007a04 <__malloc_lock>:
 8007a04:	4801      	ldr	r0, [pc, #4]	@ (8007a0c <__malloc_lock+0x8>)
 8007a06:	f7ff b8aa 	b.w	8006b5e <__retarget_lock_acquire_recursive>
 8007a0a:	bf00      	nop
 8007a0c:	200005b0 	.word	0x200005b0

08007a10 <__malloc_unlock>:
 8007a10:	4801      	ldr	r0, [pc, #4]	@ (8007a18 <__malloc_unlock+0x8>)
 8007a12:	f7ff b8a5 	b.w	8006b60 <__retarget_lock_release_recursive>
 8007a16:	bf00      	nop
 8007a18:	200005b0 	.word	0x200005b0

08007a1c <_Balloc>:
 8007a1c:	b570      	push	{r4, r5, r6, lr}
 8007a1e:	69c6      	ldr	r6, [r0, #28]
 8007a20:	4604      	mov	r4, r0
 8007a22:	460d      	mov	r5, r1
 8007a24:	b976      	cbnz	r6, 8007a44 <_Balloc+0x28>
 8007a26:	2010      	movs	r0, #16
 8007a28:	f7ff ff42 	bl	80078b0 <malloc>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	61e0      	str	r0, [r4, #28]
 8007a30:	b920      	cbnz	r0, 8007a3c <_Balloc+0x20>
 8007a32:	216b      	movs	r1, #107	@ 0x6b
 8007a34:	4b17      	ldr	r3, [pc, #92]	@ (8007a94 <_Balloc+0x78>)
 8007a36:	4818      	ldr	r0, [pc, #96]	@ (8007a98 <_Balloc+0x7c>)
 8007a38:	f000 fda8 	bl	800858c <__assert_func>
 8007a3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a40:	6006      	str	r6, [r0, #0]
 8007a42:	60c6      	str	r6, [r0, #12]
 8007a44:	69e6      	ldr	r6, [r4, #28]
 8007a46:	68f3      	ldr	r3, [r6, #12]
 8007a48:	b183      	cbz	r3, 8007a6c <_Balloc+0x50>
 8007a4a:	69e3      	ldr	r3, [r4, #28]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a52:	b9b8      	cbnz	r0, 8007a84 <_Balloc+0x68>
 8007a54:	2101      	movs	r1, #1
 8007a56:	fa01 f605 	lsl.w	r6, r1, r5
 8007a5a:	1d72      	adds	r2, r6, #5
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	0092      	lsls	r2, r2, #2
 8007a60:	f000 fdb2 	bl	80085c8 <_calloc_r>
 8007a64:	b160      	cbz	r0, 8007a80 <_Balloc+0x64>
 8007a66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a6a:	e00e      	b.n	8007a8a <_Balloc+0x6e>
 8007a6c:	2221      	movs	r2, #33	@ 0x21
 8007a6e:	2104      	movs	r1, #4
 8007a70:	4620      	mov	r0, r4
 8007a72:	f000 fda9 	bl	80085c8 <_calloc_r>
 8007a76:	69e3      	ldr	r3, [r4, #28]
 8007a78:	60f0      	str	r0, [r6, #12]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1e4      	bne.n	8007a4a <_Balloc+0x2e>
 8007a80:	2000      	movs	r0, #0
 8007a82:	bd70      	pop	{r4, r5, r6, pc}
 8007a84:	6802      	ldr	r2, [r0, #0]
 8007a86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a90:	e7f7      	b.n	8007a82 <_Balloc+0x66>
 8007a92:	bf00      	nop
 8007a94:	08008fcb 	.word	0x08008fcb
 8007a98:	0800904b 	.word	0x0800904b

08007a9c <_Bfree>:
 8007a9c:	b570      	push	{r4, r5, r6, lr}
 8007a9e:	69c6      	ldr	r6, [r0, #28]
 8007aa0:	4605      	mov	r5, r0
 8007aa2:	460c      	mov	r4, r1
 8007aa4:	b976      	cbnz	r6, 8007ac4 <_Bfree+0x28>
 8007aa6:	2010      	movs	r0, #16
 8007aa8:	f7ff ff02 	bl	80078b0 <malloc>
 8007aac:	4602      	mov	r2, r0
 8007aae:	61e8      	str	r0, [r5, #28]
 8007ab0:	b920      	cbnz	r0, 8007abc <_Bfree+0x20>
 8007ab2:	218f      	movs	r1, #143	@ 0x8f
 8007ab4:	4b08      	ldr	r3, [pc, #32]	@ (8007ad8 <_Bfree+0x3c>)
 8007ab6:	4809      	ldr	r0, [pc, #36]	@ (8007adc <_Bfree+0x40>)
 8007ab8:	f000 fd68 	bl	800858c <__assert_func>
 8007abc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ac0:	6006      	str	r6, [r0, #0]
 8007ac2:	60c6      	str	r6, [r0, #12]
 8007ac4:	b13c      	cbz	r4, 8007ad6 <_Bfree+0x3a>
 8007ac6:	69eb      	ldr	r3, [r5, #28]
 8007ac8:	6862      	ldr	r2, [r4, #4]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ad0:	6021      	str	r1, [r4, #0]
 8007ad2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ad6:	bd70      	pop	{r4, r5, r6, pc}
 8007ad8:	08008fcb 	.word	0x08008fcb
 8007adc:	0800904b 	.word	0x0800904b

08007ae0 <__multadd>:
 8007ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae4:	4607      	mov	r7, r0
 8007ae6:	460c      	mov	r4, r1
 8007ae8:	461e      	mov	r6, r3
 8007aea:	2000      	movs	r0, #0
 8007aec:	690d      	ldr	r5, [r1, #16]
 8007aee:	f101 0c14 	add.w	ip, r1, #20
 8007af2:	f8dc 3000 	ldr.w	r3, [ip]
 8007af6:	3001      	adds	r0, #1
 8007af8:	b299      	uxth	r1, r3
 8007afa:	fb02 6101 	mla	r1, r2, r1, r6
 8007afe:	0c1e      	lsrs	r6, r3, #16
 8007b00:	0c0b      	lsrs	r3, r1, #16
 8007b02:	fb02 3306 	mla	r3, r2, r6, r3
 8007b06:	b289      	uxth	r1, r1
 8007b08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b0c:	4285      	cmp	r5, r0
 8007b0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b12:	f84c 1b04 	str.w	r1, [ip], #4
 8007b16:	dcec      	bgt.n	8007af2 <__multadd+0x12>
 8007b18:	b30e      	cbz	r6, 8007b5e <__multadd+0x7e>
 8007b1a:	68a3      	ldr	r3, [r4, #8]
 8007b1c:	42ab      	cmp	r3, r5
 8007b1e:	dc19      	bgt.n	8007b54 <__multadd+0x74>
 8007b20:	6861      	ldr	r1, [r4, #4]
 8007b22:	4638      	mov	r0, r7
 8007b24:	3101      	adds	r1, #1
 8007b26:	f7ff ff79 	bl	8007a1c <_Balloc>
 8007b2a:	4680      	mov	r8, r0
 8007b2c:	b928      	cbnz	r0, 8007b3a <__multadd+0x5a>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	21ba      	movs	r1, #186	@ 0xba
 8007b32:	4b0c      	ldr	r3, [pc, #48]	@ (8007b64 <__multadd+0x84>)
 8007b34:	480c      	ldr	r0, [pc, #48]	@ (8007b68 <__multadd+0x88>)
 8007b36:	f000 fd29 	bl	800858c <__assert_func>
 8007b3a:	6922      	ldr	r2, [r4, #16]
 8007b3c:	f104 010c 	add.w	r1, r4, #12
 8007b40:	3202      	adds	r2, #2
 8007b42:	0092      	lsls	r2, r2, #2
 8007b44:	300c      	adds	r0, #12
 8007b46:	f000 fd13 	bl	8008570 <memcpy>
 8007b4a:	4621      	mov	r1, r4
 8007b4c:	4638      	mov	r0, r7
 8007b4e:	f7ff ffa5 	bl	8007a9c <_Bfree>
 8007b52:	4644      	mov	r4, r8
 8007b54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b58:	3501      	adds	r5, #1
 8007b5a:	615e      	str	r6, [r3, #20]
 8007b5c:	6125      	str	r5, [r4, #16]
 8007b5e:	4620      	mov	r0, r4
 8007b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b64:	0800903a 	.word	0x0800903a
 8007b68:	0800904b 	.word	0x0800904b

08007b6c <__hi0bits>:
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007b72:	bf3a      	itte	cc
 8007b74:	0403      	lslcc	r3, r0, #16
 8007b76:	2010      	movcc	r0, #16
 8007b78:	2000      	movcs	r0, #0
 8007b7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b7e:	bf3c      	itt	cc
 8007b80:	021b      	lslcc	r3, r3, #8
 8007b82:	3008      	addcc	r0, #8
 8007b84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b88:	bf3c      	itt	cc
 8007b8a:	011b      	lslcc	r3, r3, #4
 8007b8c:	3004      	addcc	r0, #4
 8007b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b92:	bf3c      	itt	cc
 8007b94:	009b      	lslcc	r3, r3, #2
 8007b96:	3002      	addcc	r0, #2
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	db05      	blt.n	8007ba8 <__hi0bits+0x3c>
 8007b9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007ba0:	f100 0001 	add.w	r0, r0, #1
 8007ba4:	bf08      	it	eq
 8007ba6:	2020      	moveq	r0, #32
 8007ba8:	4770      	bx	lr

08007baa <__lo0bits>:
 8007baa:	6803      	ldr	r3, [r0, #0]
 8007bac:	4602      	mov	r2, r0
 8007bae:	f013 0007 	ands.w	r0, r3, #7
 8007bb2:	d00b      	beq.n	8007bcc <__lo0bits+0x22>
 8007bb4:	07d9      	lsls	r1, r3, #31
 8007bb6:	d421      	bmi.n	8007bfc <__lo0bits+0x52>
 8007bb8:	0798      	lsls	r0, r3, #30
 8007bba:	bf49      	itett	mi
 8007bbc:	085b      	lsrmi	r3, r3, #1
 8007bbe:	089b      	lsrpl	r3, r3, #2
 8007bc0:	2001      	movmi	r0, #1
 8007bc2:	6013      	strmi	r3, [r2, #0]
 8007bc4:	bf5c      	itt	pl
 8007bc6:	2002      	movpl	r0, #2
 8007bc8:	6013      	strpl	r3, [r2, #0]
 8007bca:	4770      	bx	lr
 8007bcc:	b299      	uxth	r1, r3
 8007bce:	b909      	cbnz	r1, 8007bd4 <__lo0bits+0x2a>
 8007bd0:	2010      	movs	r0, #16
 8007bd2:	0c1b      	lsrs	r3, r3, #16
 8007bd4:	b2d9      	uxtb	r1, r3
 8007bd6:	b909      	cbnz	r1, 8007bdc <__lo0bits+0x32>
 8007bd8:	3008      	adds	r0, #8
 8007bda:	0a1b      	lsrs	r3, r3, #8
 8007bdc:	0719      	lsls	r1, r3, #28
 8007bde:	bf04      	itt	eq
 8007be0:	091b      	lsreq	r3, r3, #4
 8007be2:	3004      	addeq	r0, #4
 8007be4:	0799      	lsls	r1, r3, #30
 8007be6:	bf04      	itt	eq
 8007be8:	089b      	lsreq	r3, r3, #2
 8007bea:	3002      	addeq	r0, #2
 8007bec:	07d9      	lsls	r1, r3, #31
 8007bee:	d403      	bmi.n	8007bf8 <__lo0bits+0x4e>
 8007bf0:	085b      	lsrs	r3, r3, #1
 8007bf2:	f100 0001 	add.w	r0, r0, #1
 8007bf6:	d003      	beq.n	8007c00 <__lo0bits+0x56>
 8007bf8:	6013      	str	r3, [r2, #0]
 8007bfa:	4770      	bx	lr
 8007bfc:	2000      	movs	r0, #0
 8007bfe:	4770      	bx	lr
 8007c00:	2020      	movs	r0, #32
 8007c02:	4770      	bx	lr

08007c04 <__i2b>:
 8007c04:	b510      	push	{r4, lr}
 8007c06:	460c      	mov	r4, r1
 8007c08:	2101      	movs	r1, #1
 8007c0a:	f7ff ff07 	bl	8007a1c <_Balloc>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	b928      	cbnz	r0, 8007c1e <__i2b+0x1a>
 8007c12:	f240 1145 	movw	r1, #325	@ 0x145
 8007c16:	4b04      	ldr	r3, [pc, #16]	@ (8007c28 <__i2b+0x24>)
 8007c18:	4804      	ldr	r0, [pc, #16]	@ (8007c2c <__i2b+0x28>)
 8007c1a:	f000 fcb7 	bl	800858c <__assert_func>
 8007c1e:	2301      	movs	r3, #1
 8007c20:	6144      	str	r4, [r0, #20]
 8007c22:	6103      	str	r3, [r0, #16]
 8007c24:	bd10      	pop	{r4, pc}
 8007c26:	bf00      	nop
 8007c28:	0800903a 	.word	0x0800903a
 8007c2c:	0800904b 	.word	0x0800904b

08007c30 <__multiply>:
 8007c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c34:	4614      	mov	r4, r2
 8007c36:	690a      	ldr	r2, [r1, #16]
 8007c38:	6923      	ldr	r3, [r4, #16]
 8007c3a:	460f      	mov	r7, r1
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	bfa2      	ittt	ge
 8007c40:	4623      	movge	r3, r4
 8007c42:	460c      	movge	r4, r1
 8007c44:	461f      	movge	r7, r3
 8007c46:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007c4a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007c4e:	68a3      	ldr	r3, [r4, #8]
 8007c50:	6861      	ldr	r1, [r4, #4]
 8007c52:	eb0a 0609 	add.w	r6, sl, r9
 8007c56:	42b3      	cmp	r3, r6
 8007c58:	b085      	sub	sp, #20
 8007c5a:	bfb8      	it	lt
 8007c5c:	3101      	addlt	r1, #1
 8007c5e:	f7ff fedd 	bl	8007a1c <_Balloc>
 8007c62:	b930      	cbnz	r0, 8007c72 <__multiply+0x42>
 8007c64:	4602      	mov	r2, r0
 8007c66:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007c6a:	4b43      	ldr	r3, [pc, #268]	@ (8007d78 <__multiply+0x148>)
 8007c6c:	4843      	ldr	r0, [pc, #268]	@ (8007d7c <__multiply+0x14c>)
 8007c6e:	f000 fc8d 	bl	800858c <__assert_func>
 8007c72:	f100 0514 	add.w	r5, r0, #20
 8007c76:	462b      	mov	r3, r5
 8007c78:	2200      	movs	r2, #0
 8007c7a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c7e:	4543      	cmp	r3, r8
 8007c80:	d321      	bcc.n	8007cc6 <__multiply+0x96>
 8007c82:	f107 0114 	add.w	r1, r7, #20
 8007c86:	f104 0214 	add.w	r2, r4, #20
 8007c8a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007c8e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007c92:	9302      	str	r3, [sp, #8]
 8007c94:	1b13      	subs	r3, r2, r4
 8007c96:	3b15      	subs	r3, #21
 8007c98:	f023 0303 	bic.w	r3, r3, #3
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	f104 0715 	add.w	r7, r4, #21
 8007ca2:	42ba      	cmp	r2, r7
 8007ca4:	bf38      	it	cc
 8007ca6:	2304      	movcc	r3, #4
 8007ca8:	9301      	str	r3, [sp, #4]
 8007caa:	9b02      	ldr	r3, [sp, #8]
 8007cac:	9103      	str	r1, [sp, #12]
 8007cae:	428b      	cmp	r3, r1
 8007cb0:	d80c      	bhi.n	8007ccc <__multiply+0x9c>
 8007cb2:	2e00      	cmp	r6, #0
 8007cb4:	dd03      	ble.n	8007cbe <__multiply+0x8e>
 8007cb6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d05a      	beq.n	8007d74 <__multiply+0x144>
 8007cbe:	6106      	str	r6, [r0, #16]
 8007cc0:	b005      	add	sp, #20
 8007cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc6:	f843 2b04 	str.w	r2, [r3], #4
 8007cca:	e7d8      	b.n	8007c7e <__multiply+0x4e>
 8007ccc:	f8b1 a000 	ldrh.w	sl, [r1]
 8007cd0:	f1ba 0f00 	cmp.w	sl, #0
 8007cd4:	d023      	beq.n	8007d1e <__multiply+0xee>
 8007cd6:	46a9      	mov	r9, r5
 8007cd8:	f04f 0c00 	mov.w	ip, #0
 8007cdc:	f104 0e14 	add.w	lr, r4, #20
 8007ce0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007ce4:	f8d9 3000 	ldr.w	r3, [r9]
 8007ce8:	fa1f fb87 	uxth.w	fp, r7
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	fb0a 330b 	mla	r3, sl, fp, r3
 8007cf2:	4463      	add	r3, ip
 8007cf4:	f8d9 c000 	ldr.w	ip, [r9]
 8007cf8:	0c3f      	lsrs	r7, r7, #16
 8007cfa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007cfe:	fb0a c707 	mla	r7, sl, r7, ip
 8007d02:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d0c:	4572      	cmp	r2, lr
 8007d0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007d12:	f849 3b04 	str.w	r3, [r9], #4
 8007d16:	d8e3      	bhi.n	8007ce0 <__multiply+0xb0>
 8007d18:	9b01      	ldr	r3, [sp, #4]
 8007d1a:	f845 c003 	str.w	ip, [r5, r3]
 8007d1e:	9b03      	ldr	r3, [sp, #12]
 8007d20:	3104      	adds	r1, #4
 8007d22:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007d26:	f1b9 0f00 	cmp.w	r9, #0
 8007d2a:	d021      	beq.n	8007d70 <__multiply+0x140>
 8007d2c:	46ae      	mov	lr, r5
 8007d2e:	f04f 0a00 	mov.w	sl, #0
 8007d32:	682b      	ldr	r3, [r5, #0]
 8007d34:	f104 0c14 	add.w	ip, r4, #20
 8007d38:	f8bc b000 	ldrh.w	fp, [ip]
 8007d3c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	fb09 770b 	mla	r7, r9, fp, r7
 8007d46:	4457      	add	r7, sl
 8007d48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d4c:	f84e 3b04 	str.w	r3, [lr], #4
 8007d50:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d58:	f8be 3000 	ldrh.w	r3, [lr]
 8007d5c:	4562      	cmp	r2, ip
 8007d5e:	fb09 330a 	mla	r3, r9, sl, r3
 8007d62:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007d66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d6a:	d8e5      	bhi.n	8007d38 <__multiply+0x108>
 8007d6c:	9f01      	ldr	r7, [sp, #4]
 8007d6e:	51eb      	str	r3, [r5, r7]
 8007d70:	3504      	adds	r5, #4
 8007d72:	e79a      	b.n	8007caa <__multiply+0x7a>
 8007d74:	3e01      	subs	r6, #1
 8007d76:	e79c      	b.n	8007cb2 <__multiply+0x82>
 8007d78:	0800903a 	.word	0x0800903a
 8007d7c:	0800904b 	.word	0x0800904b

08007d80 <__pow5mult>:
 8007d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d84:	4615      	mov	r5, r2
 8007d86:	f012 0203 	ands.w	r2, r2, #3
 8007d8a:	4607      	mov	r7, r0
 8007d8c:	460e      	mov	r6, r1
 8007d8e:	d007      	beq.n	8007da0 <__pow5mult+0x20>
 8007d90:	4c25      	ldr	r4, [pc, #148]	@ (8007e28 <__pow5mult+0xa8>)
 8007d92:	3a01      	subs	r2, #1
 8007d94:	2300      	movs	r3, #0
 8007d96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d9a:	f7ff fea1 	bl	8007ae0 <__multadd>
 8007d9e:	4606      	mov	r6, r0
 8007da0:	10ad      	asrs	r5, r5, #2
 8007da2:	d03d      	beq.n	8007e20 <__pow5mult+0xa0>
 8007da4:	69fc      	ldr	r4, [r7, #28]
 8007da6:	b97c      	cbnz	r4, 8007dc8 <__pow5mult+0x48>
 8007da8:	2010      	movs	r0, #16
 8007daa:	f7ff fd81 	bl	80078b0 <malloc>
 8007dae:	4602      	mov	r2, r0
 8007db0:	61f8      	str	r0, [r7, #28]
 8007db2:	b928      	cbnz	r0, 8007dc0 <__pow5mult+0x40>
 8007db4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007db8:	4b1c      	ldr	r3, [pc, #112]	@ (8007e2c <__pow5mult+0xac>)
 8007dba:	481d      	ldr	r0, [pc, #116]	@ (8007e30 <__pow5mult+0xb0>)
 8007dbc:	f000 fbe6 	bl	800858c <__assert_func>
 8007dc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007dc4:	6004      	str	r4, [r0, #0]
 8007dc6:	60c4      	str	r4, [r0, #12]
 8007dc8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007dcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007dd0:	b94c      	cbnz	r4, 8007de6 <__pow5mult+0x66>
 8007dd2:	f240 2171 	movw	r1, #625	@ 0x271
 8007dd6:	4638      	mov	r0, r7
 8007dd8:	f7ff ff14 	bl	8007c04 <__i2b>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	4604      	mov	r4, r0
 8007de0:	f8c8 0008 	str.w	r0, [r8, #8]
 8007de4:	6003      	str	r3, [r0, #0]
 8007de6:	f04f 0900 	mov.w	r9, #0
 8007dea:	07eb      	lsls	r3, r5, #31
 8007dec:	d50a      	bpl.n	8007e04 <__pow5mult+0x84>
 8007dee:	4631      	mov	r1, r6
 8007df0:	4622      	mov	r2, r4
 8007df2:	4638      	mov	r0, r7
 8007df4:	f7ff ff1c 	bl	8007c30 <__multiply>
 8007df8:	4680      	mov	r8, r0
 8007dfa:	4631      	mov	r1, r6
 8007dfc:	4638      	mov	r0, r7
 8007dfe:	f7ff fe4d 	bl	8007a9c <_Bfree>
 8007e02:	4646      	mov	r6, r8
 8007e04:	106d      	asrs	r5, r5, #1
 8007e06:	d00b      	beq.n	8007e20 <__pow5mult+0xa0>
 8007e08:	6820      	ldr	r0, [r4, #0]
 8007e0a:	b938      	cbnz	r0, 8007e1c <__pow5mult+0x9c>
 8007e0c:	4622      	mov	r2, r4
 8007e0e:	4621      	mov	r1, r4
 8007e10:	4638      	mov	r0, r7
 8007e12:	f7ff ff0d 	bl	8007c30 <__multiply>
 8007e16:	6020      	str	r0, [r4, #0]
 8007e18:	f8c0 9000 	str.w	r9, [r0]
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	e7e4      	b.n	8007dea <__pow5mult+0x6a>
 8007e20:	4630      	mov	r0, r6
 8007e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e26:	bf00      	nop
 8007e28:	080090a4 	.word	0x080090a4
 8007e2c:	08008fcb 	.word	0x08008fcb
 8007e30:	0800904b 	.word	0x0800904b

08007e34 <__lshift>:
 8007e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e38:	460c      	mov	r4, r1
 8007e3a:	4607      	mov	r7, r0
 8007e3c:	4691      	mov	r9, r2
 8007e3e:	6923      	ldr	r3, [r4, #16]
 8007e40:	6849      	ldr	r1, [r1, #4]
 8007e42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e46:	68a3      	ldr	r3, [r4, #8]
 8007e48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e4c:	f108 0601 	add.w	r6, r8, #1
 8007e50:	42b3      	cmp	r3, r6
 8007e52:	db0b      	blt.n	8007e6c <__lshift+0x38>
 8007e54:	4638      	mov	r0, r7
 8007e56:	f7ff fde1 	bl	8007a1c <_Balloc>
 8007e5a:	4605      	mov	r5, r0
 8007e5c:	b948      	cbnz	r0, 8007e72 <__lshift+0x3e>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007e64:	4b27      	ldr	r3, [pc, #156]	@ (8007f04 <__lshift+0xd0>)
 8007e66:	4828      	ldr	r0, [pc, #160]	@ (8007f08 <__lshift+0xd4>)
 8007e68:	f000 fb90 	bl	800858c <__assert_func>
 8007e6c:	3101      	adds	r1, #1
 8007e6e:	005b      	lsls	r3, r3, #1
 8007e70:	e7ee      	b.n	8007e50 <__lshift+0x1c>
 8007e72:	2300      	movs	r3, #0
 8007e74:	f100 0114 	add.w	r1, r0, #20
 8007e78:	f100 0210 	add.w	r2, r0, #16
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	4553      	cmp	r3, sl
 8007e80:	db33      	blt.n	8007eea <__lshift+0xb6>
 8007e82:	6920      	ldr	r0, [r4, #16]
 8007e84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e88:	f104 0314 	add.w	r3, r4, #20
 8007e8c:	f019 091f 	ands.w	r9, r9, #31
 8007e90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e98:	d02b      	beq.n	8007ef2 <__lshift+0xbe>
 8007e9a:	468a      	mov	sl, r1
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f1c9 0e20 	rsb	lr, r9, #32
 8007ea2:	6818      	ldr	r0, [r3, #0]
 8007ea4:	fa00 f009 	lsl.w	r0, r0, r9
 8007ea8:	4310      	orrs	r0, r2
 8007eaa:	f84a 0b04 	str.w	r0, [sl], #4
 8007eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eb2:	459c      	cmp	ip, r3
 8007eb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007eb8:	d8f3      	bhi.n	8007ea2 <__lshift+0x6e>
 8007eba:	ebac 0304 	sub.w	r3, ip, r4
 8007ebe:	3b15      	subs	r3, #21
 8007ec0:	f023 0303 	bic.w	r3, r3, #3
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	f104 0015 	add.w	r0, r4, #21
 8007eca:	4584      	cmp	ip, r0
 8007ecc:	bf38      	it	cc
 8007ece:	2304      	movcc	r3, #4
 8007ed0:	50ca      	str	r2, [r1, r3]
 8007ed2:	b10a      	cbz	r2, 8007ed8 <__lshift+0xa4>
 8007ed4:	f108 0602 	add.w	r6, r8, #2
 8007ed8:	3e01      	subs	r6, #1
 8007eda:	4638      	mov	r0, r7
 8007edc:	4621      	mov	r1, r4
 8007ede:	612e      	str	r6, [r5, #16]
 8007ee0:	f7ff fddc 	bl	8007a9c <_Bfree>
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eea:	f842 0f04 	str.w	r0, [r2, #4]!
 8007eee:	3301      	adds	r3, #1
 8007ef0:	e7c5      	b.n	8007e7e <__lshift+0x4a>
 8007ef2:	3904      	subs	r1, #4
 8007ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ef8:	459c      	cmp	ip, r3
 8007efa:	f841 2f04 	str.w	r2, [r1, #4]!
 8007efe:	d8f9      	bhi.n	8007ef4 <__lshift+0xc0>
 8007f00:	e7ea      	b.n	8007ed8 <__lshift+0xa4>
 8007f02:	bf00      	nop
 8007f04:	0800903a 	.word	0x0800903a
 8007f08:	0800904b 	.word	0x0800904b

08007f0c <__mcmp>:
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	690a      	ldr	r2, [r1, #16]
 8007f10:	6900      	ldr	r0, [r0, #16]
 8007f12:	b530      	push	{r4, r5, lr}
 8007f14:	1a80      	subs	r0, r0, r2
 8007f16:	d10e      	bne.n	8007f36 <__mcmp+0x2a>
 8007f18:	3314      	adds	r3, #20
 8007f1a:	3114      	adds	r1, #20
 8007f1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007f20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007f24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f2c:	4295      	cmp	r5, r2
 8007f2e:	d003      	beq.n	8007f38 <__mcmp+0x2c>
 8007f30:	d205      	bcs.n	8007f3e <__mcmp+0x32>
 8007f32:	f04f 30ff 	mov.w	r0, #4294967295
 8007f36:	bd30      	pop	{r4, r5, pc}
 8007f38:	42a3      	cmp	r3, r4
 8007f3a:	d3f3      	bcc.n	8007f24 <__mcmp+0x18>
 8007f3c:	e7fb      	b.n	8007f36 <__mcmp+0x2a>
 8007f3e:	2001      	movs	r0, #1
 8007f40:	e7f9      	b.n	8007f36 <__mcmp+0x2a>
	...

08007f44 <__mdiff>:
 8007f44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f48:	4689      	mov	r9, r1
 8007f4a:	4606      	mov	r6, r0
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	4648      	mov	r0, r9
 8007f50:	4614      	mov	r4, r2
 8007f52:	f7ff ffdb 	bl	8007f0c <__mcmp>
 8007f56:	1e05      	subs	r5, r0, #0
 8007f58:	d112      	bne.n	8007f80 <__mdiff+0x3c>
 8007f5a:	4629      	mov	r1, r5
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	f7ff fd5d 	bl	8007a1c <_Balloc>
 8007f62:	4602      	mov	r2, r0
 8007f64:	b928      	cbnz	r0, 8007f72 <__mdiff+0x2e>
 8007f66:	f240 2137 	movw	r1, #567	@ 0x237
 8007f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8008064 <__mdiff+0x120>)
 8007f6c:	483e      	ldr	r0, [pc, #248]	@ (8008068 <__mdiff+0x124>)
 8007f6e:	f000 fb0d 	bl	800858c <__assert_func>
 8007f72:	2301      	movs	r3, #1
 8007f74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f78:	4610      	mov	r0, r2
 8007f7a:	b003      	add	sp, #12
 8007f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f80:	bfbc      	itt	lt
 8007f82:	464b      	movlt	r3, r9
 8007f84:	46a1      	movlt	r9, r4
 8007f86:	4630      	mov	r0, r6
 8007f88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007f8c:	bfba      	itte	lt
 8007f8e:	461c      	movlt	r4, r3
 8007f90:	2501      	movlt	r5, #1
 8007f92:	2500      	movge	r5, #0
 8007f94:	f7ff fd42 	bl	8007a1c <_Balloc>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	b918      	cbnz	r0, 8007fa4 <__mdiff+0x60>
 8007f9c:	f240 2145 	movw	r1, #581	@ 0x245
 8007fa0:	4b30      	ldr	r3, [pc, #192]	@ (8008064 <__mdiff+0x120>)
 8007fa2:	e7e3      	b.n	8007f6c <__mdiff+0x28>
 8007fa4:	f100 0b14 	add.w	fp, r0, #20
 8007fa8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007fac:	f109 0310 	add.w	r3, r9, #16
 8007fb0:	60c5      	str	r5, [r0, #12]
 8007fb2:	f04f 0c00 	mov.w	ip, #0
 8007fb6:	f109 0514 	add.w	r5, r9, #20
 8007fba:	46d9      	mov	r9, fp
 8007fbc:	6926      	ldr	r6, [r4, #16]
 8007fbe:	f104 0e14 	add.w	lr, r4, #20
 8007fc2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007fc6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007fca:	9301      	str	r3, [sp, #4]
 8007fcc:	9b01      	ldr	r3, [sp, #4]
 8007fce:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007fd2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007fd6:	b281      	uxth	r1, r0
 8007fd8:	9301      	str	r3, [sp, #4]
 8007fda:	fa1f f38a 	uxth.w	r3, sl
 8007fde:	1a5b      	subs	r3, r3, r1
 8007fe0:	0c00      	lsrs	r0, r0, #16
 8007fe2:	4463      	add	r3, ip
 8007fe4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007fe8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007ff2:	4576      	cmp	r6, lr
 8007ff4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ff8:	f849 3b04 	str.w	r3, [r9], #4
 8007ffc:	d8e6      	bhi.n	8007fcc <__mdiff+0x88>
 8007ffe:	1b33      	subs	r3, r6, r4
 8008000:	3b15      	subs	r3, #21
 8008002:	f023 0303 	bic.w	r3, r3, #3
 8008006:	3415      	adds	r4, #21
 8008008:	3304      	adds	r3, #4
 800800a:	42a6      	cmp	r6, r4
 800800c:	bf38      	it	cc
 800800e:	2304      	movcc	r3, #4
 8008010:	441d      	add	r5, r3
 8008012:	445b      	add	r3, fp
 8008014:	461e      	mov	r6, r3
 8008016:	462c      	mov	r4, r5
 8008018:	4544      	cmp	r4, r8
 800801a:	d30e      	bcc.n	800803a <__mdiff+0xf6>
 800801c:	f108 0103 	add.w	r1, r8, #3
 8008020:	1b49      	subs	r1, r1, r5
 8008022:	f021 0103 	bic.w	r1, r1, #3
 8008026:	3d03      	subs	r5, #3
 8008028:	45a8      	cmp	r8, r5
 800802a:	bf38      	it	cc
 800802c:	2100      	movcc	r1, #0
 800802e:	440b      	add	r3, r1
 8008030:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008034:	b199      	cbz	r1, 800805e <__mdiff+0x11a>
 8008036:	6117      	str	r7, [r2, #16]
 8008038:	e79e      	b.n	8007f78 <__mdiff+0x34>
 800803a:	46e6      	mov	lr, ip
 800803c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008040:	fa1f fc81 	uxth.w	ip, r1
 8008044:	44f4      	add	ip, lr
 8008046:	0c08      	lsrs	r0, r1, #16
 8008048:	4471      	add	r1, lr
 800804a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800804e:	b289      	uxth	r1, r1
 8008050:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008054:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008058:	f846 1b04 	str.w	r1, [r6], #4
 800805c:	e7dc      	b.n	8008018 <__mdiff+0xd4>
 800805e:	3f01      	subs	r7, #1
 8008060:	e7e6      	b.n	8008030 <__mdiff+0xec>
 8008062:	bf00      	nop
 8008064:	0800903a 	.word	0x0800903a
 8008068:	0800904b 	.word	0x0800904b

0800806c <__d2b>:
 800806c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008070:	2101      	movs	r1, #1
 8008072:	4690      	mov	r8, r2
 8008074:	4699      	mov	r9, r3
 8008076:	9e08      	ldr	r6, [sp, #32]
 8008078:	f7ff fcd0 	bl	8007a1c <_Balloc>
 800807c:	4604      	mov	r4, r0
 800807e:	b930      	cbnz	r0, 800808e <__d2b+0x22>
 8008080:	4602      	mov	r2, r0
 8008082:	f240 310f 	movw	r1, #783	@ 0x30f
 8008086:	4b23      	ldr	r3, [pc, #140]	@ (8008114 <__d2b+0xa8>)
 8008088:	4823      	ldr	r0, [pc, #140]	@ (8008118 <__d2b+0xac>)
 800808a:	f000 fa7f 	bl	800858c <__assert_func>
 800808e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008092:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008096:	b10d      	cbz	r5, 800809c <__d2b+0x30>
 8008098:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800809c:	9301      	str	r3, [sp, #4]
 800809e:	f1b8 0300 	subs.w	r3, r8, #0
 80080a2:	d024      	beq.n	80080ee <__d2b+0x82>
 80080a4:	4668      	mov	r0, sp
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	f7ff fd7f 	bl	8007baa <__lo0bits>
 80080ac:	e9dd 1200 	ldrd	r1, r2, [sp]
 80080b0:	b1d8      	cbz	r0, 80080ea <__d2b+0x7e>
 80080b2:	f1c0 0320 	rsb	r3, r0, #32
 80080b6:	fa02 f303 	lsl.w	r3, r2, r3
 80080ba:	430b      	orrs	r3, r1
 80080bc:	40c2      	lsrs	r2, r0
 80080be:	6163      	str	r3, [r4, #20]
 80080c0:	9201      	str	r2, [sp, #4]
 80080c2:	9b01      	ldr	r3, [sp, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	bf0c      	ite	eq
 80080c8:	2201      	moveq	r2, #1
 80080ca:	2202      	movne	r2, #2
 80080cc:	61a3      	str	r3, [r4, #24]
 80080ce:	6122      	str	r2, [r4, #16]
 80080d0:	b1ad      	cbz	r5, 80080fe <__d2b+0x92>
 80080d2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80080d6:	4405      	add	r5, r0
 80080d8:	6035      	str	r5, [r6, #0]
 80080da:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80080de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080e0:	6018      	str	r0, [r3, #0]
 80080e2:	4620      	mov	r0, r4
 80080e4:	b002      	add	sp, #8
 80080e6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80080ea:	6161      	str	r1, [r4, #20]
 80080ec:	e7e9      	b.n	80080c2 <__d2b+0x56>
 80080ee:	a801      	add	r0, sp, #4
 80080f0:	f7ff fd5b 	bl	8007baa <__lo0bits>
 80080f4:	9b01      	ldr	r3, [sp, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	6163      	str	r3, [r4, #20]
 80080fa:	3020      	adds	r0, #32
 80080fc:	e7e7      	b.n	80080ce <__d2b+0x62>
 80080fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008102:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008106:	6030      	str	r0, [r6, #0]
 8008108:	6918      	ldr	r0, [r3, #16]
 800810a:	f7ff fd2f 	bl	8007b6c <__hi0bits>
 800810e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008112:	e7e4      	b.n	80080de <__d2b+0x72>
 8008114:	0800903a 	.word	0x0800903a
 8008118:	0800904b 	.word	0x0800904b

0800811c <__ssputs_r>:
 800811c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008120:	461f      	mov	r7, r3
 8008122:	688e      	ldr	r6, [r1, #8]
 8008124:	4682      	mov	sl, r0
 8008126:	42be      	cmp	r6, r7
 8008128:	460c      	mov	r4, r1
 800812a:	4690      	mov	r8, r2
 800812c:	680b      	ldr	r3, [r1, #0]
 800812e:	d82d      	bhi.n	800818c <__ssputs_r+0x70>
 8008130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008134:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008138:	d026      	beq.n	8008188 <__ssputs_r+0x6c>
 800813a:	6965      	ldr	r5, [r4, #20]
 800813c:	6909      	ldr	r1, [r1, #16]
 800813e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008142:	eba3 0901 	sub.w	r9, r3, r1
 8008146:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800814a:	1c7b      	adds	r3, r7, #1
 800814c:	444b      	add	r3, r9
 800814e:	106d      	asrs	r5, r5, #1
 8008150:	429d      	cmp	r5, r3
 8008152:	bf38      	it	cc
 8008154:	461d      	movcc	r5, r3
 8008156:	0553      	lsls	r3, r2, #21
 8008158:	d527      	bpl.n	80081aa <__ssputs_r+0x8e>
 800815a:	4629      	mov	r1, r5
 800815c:	f7ff fbd2 	bl	8007904 <_malloc_r>
 8008160:	4606      	mov	r6, r0
 8008162:	b360      	cbz	r0, 80081be <__ssputs_r+0xa2>
 8008164:	464a      	mov	r2, r9
 8008166:	6921      	ldr	r1, [r4, #16]
 8008168:	f000 fa02 	bl	8008570 <memcpy>
 800816c:	89a3      	ldrh	r3, [r4, #12]
 800816e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008176:	81a3      	strh	r3, [r4, #12]
 8008178:	6126      	str	r6, [r4, #16]
 800817a:	444e      	add	r6, r9
 800817c:	6026      	str	r6, [r4, #0]
 800817e:	463e      	mov	r6, r7
 8008180:	6165      	str	r5, [r4, #20]
 8008182:	eba5 0509 	sub.w	r5, r5, r9
 8008186:	60a5      	str	r5, [r4, #8]
 8008188:	42be      	cmp	r6, r7
 800818a:	d900      	bls.n	800818e <__ssputs_r+0x72>
 800818c:	463e      	mov	r6, r7
 800818e:	4632      	mov	r2, r6
 8008190:	4641      	mov	r1, r8
 8008192:	6820      	ldr	r0, [r4, #0]
 8008194:	f000 f9c2 	bl	800851c <memmove>
 8008198:	2000      	movs	r0, #0
 800819a:	68a3      	ldr	r3, [r4, #8]
 800819c:	1b9b      	subs	r3, r3, r6
 800819e:	60a3      	str	r3, [r4, #8]
 80081a0:	6823      	ldr	r3, [r4, #0]
 80081a2:	4433      	add	r3, r6
 80081a4:	6023      	str	r3, [r4, #0]
 80081a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081aa:	462a      	mov	r2, r5
 80081ac:	f000 fa32 	bl	8008614 <_realloc_r>
 80081b0:	4606      	mov	r6, r0
 80081b2:	2800      	cmp	r0, #0
 80081b4:	d1e0      	bne.n	8008178 <__ssputs_r+0x5c>
 80081b6:	4650      	mov	r0, sl
 80081b8:	6921      	ldr	r1, [r4, #16]
 80081ba:	f7ff fb31 	bl	8007820 <_free_r>
 80081be:	230c      	movs	r3, #12
 80081c0:	f8ca 3000 	str.w	r3, [sl]
 80081c4:	89a3      	ldrh	r3, [r4, #12]
 80081c6:	f04f 30ff 	mov.w	r0, #4294967295
 80081ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081ce:	81a3      	strh	r3, [r4, #12]
 80081d0:	e7e9      	b.n	80081a6 <__ssputs_r+0x8a>
	...

080081d4 <_svfiprintf_r>:
 80081d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d8:	4698      	mov	r8, r3
 80081da:	898b      	ldrh	r3, [r1, #12]
 80081dc:	4607      	mov	r7, r0
 80081de:	061b      	lsls	r3, r3, #24
 80081e0:	460d      	mov	r5, r1
 80081e2:	4614      	mov	r4, r2
 80081e4:	b09d      	sub	sp, #116	@ 0x74
 80081e6:	d510      	bpl.n	800820a <_svfiprintf_r+0x36>
 80081e8:	690b      	ldr	r3, [r1, #16]
 80081ea:	b973      	cbnz	r3, 800820a <_svfiprintf_r+0x36>
 80081ec:	2140      	movs	r1, #64	@ 0x40
 80081ee:	f7ff fb89 	bl	8007904 <_malloc_r>
 80081f2:	6028      	str	r0, [r5, #0]
 80081f4:	6128      	str	r0, [r5, #16]
 80081f6:	b930      	cbnz	r0, 8008206 <_svfiprintf_r+0x32>
 80081f8:	230c      	movs	r3, #12
 80081fa:	603b      	str	r3, [r7, #0]
 80081fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008200:	b01d      	add	sp, #116	@ 0x74
 8008202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008206:	2340      	movs	r3, #64	@ 0x40
 8008208:	616b      	str	r3, [r5, #20]
 800820a:	2300      	movs	r3, #0
 800820c:	9309      	str	r3, [sp, #36]	@ 0x24
 800820e:	2320      	movs	r3, #32
 8008210:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008214:	2330      	movs	r3, #48	@ 0x30
 8008216:	f04f 0901 	mov.w	r9, #1
 800821a:	f8cd 800c 	str.w	r8, [sp, #12]
 800821e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80083b8 <_svfiprintf_r+0x1e4>
 8008222:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008226:	4623      	mov	r3, r4
 8008228:	469a      	mov	sl, r3
 800822a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800822e:	b10a      	cbz	r2, 8008234 <_svfiprintf_r+0x60>
 8008230:	2a25      	cmp	r2, #37	@ 0x25
 8008232:	d1f9      	bne.n	8008228 <_svfiprintf_r+0x54>
 8008234:	ebba 0b04 	subs.w	fp, sl, r4
 8008238:	d00b      	beq.n	8008252 <_svfiprintf_r+0x7e>
 800823a:	465b      	mov	r3, fp
 800823c:	4622      	mov	r2, r4
 800823e:	4629      	mov	r1, r5
 8008240:	4638      	mov	r0, r7
 8008242:	f7ff ff6b 	bl	800811c <__ssputs_r>
 8008246:	3001      	adds	r0, #1
 8008248:	f000 80a7 	beq.w	800839a <_svfiprintf_r+0x1c6>
 800824c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800824e:	445a      	add	r2, fp
 8008250:	9209      	str	r2, [sp, #36]	@ 0x24
 8008252:	f89a 3000 	ldrb.w	r3, [sl]
 8008256:	2b00      	cmp	r3, #0
 8008258:	f000 809f 	beq.w	800839a <_svfiprintf_r+0x1c6>
 800825c:	2300      	movs	r3, #0
 800825e:	f04f 32ff 	mov.w	r2, #4294967295
 8008262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008266:	f10a 0a01 	add.w	sl, sl, #1
 800826a:	9304      	str	r3, [sp, #16]
 800826c:	9307      	str	r3, [sp, #28]
 800826e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008272:	931a      	str	r3, [sp, #104]	@ 0x68
 8008274:	4654      	mov	r4, sl
 8008276:	2205      	movs	r2, #5
 8008278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800827c:	484e      	ldr	r0, [pc, #312]	@ (80083b8 <_svfiprintf_r+0x1e4>)
 800827e:	f7fe fc70 	bl	8006b62 <memchr>
 8008282:	9a04      	ldr	r2, [sp, #16]
 8008284:	b9d8      	cbnz	r0, 80082be <_svfiprintf_r+0xea>
 8008286:	06d0      	lsls	r0, r2, #27
 8008288:	bf44      	itt	mi
 800828a:	2320      	movmi	r3, #32
 800828c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008290:	0711      	lsls	r1, r2, #28
 8008292:	bf44      	itt	mi
 8008294:	232b      	movmi	r3, #43	@ 0x2b
 8008296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800829a:	f89a 3000 	ldrb.w	r3, [sl]
 800829e:	2b2a      	cmp	r3, #42	@ 0x2a
 80082a0:	d015      	beq.n	80082ce <_svfiprintf_r+0xfa>
 80082a2:	4654      	mov	r4, sl
 80082a4:	2000      	movs	r0, #0
 80082a6:	f04f 0c0a 	mov.w	ip, #10
 80082aa:	9a07      	ldr	r2, [sp, #28]
 80082ac:	4621      	mov	r1, r4
 80082ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082b2:	3b30      	subs	r3, #48	@ 0x30
 80082b4:	2b09      	cmp	r3, #9
 80082b6:	d94b      	bls.n	8008350 <_svfiprintf_r+0x17c>
 80082b8:	b1b0      	cbz	r0, 80082e8 <_svfiprintf_r+0x114>
 80082ba:	9207      	str	r2, [sp, #28]
 80082bc:	e014      	b.n	80082e8 <_svfiprintf_r+0x114>
 80082be:	eba0 0308 	sub.w	r3, r0, r8
 80082c2:	fa09 f303 	lsl.w	r3, r9, r3
 80082c6:	4313      	orrs	r3, r2
 80082c8:	46a2      	mov	sl, r4
 80082ca:	9304      	str	r3, [sp, #16]
 80082cc:	e7d2      	b.n	8008274 <_svfiprintf_r+0xa0>
 80082ce:	9b03      	ldr	r3, [sp, #12]
 80082d0:	1d19      	adds	r1, r3, #4
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	9103      	str	r1, [sp, #12]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	bfbb      	ittet	lt
 80082da:	425b      	neglt	r3, r3
 80082dc:	f042 0202 	orrlt.w	r2, r2, #2
 80082e0:	9307      	strge	r3, [sp, #28]
 80082e2:	9307      	strlt	r3, [sp, #28]
 80082e4:	bfb8      	it	lt
 80082e6:	9204      	strlt	r2, [sp, #16]
 80082e8:	7823      	ldrb	r3, [r4, #0]
 80082ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80082ec:	d10a      	bne.n	8008304 <_svfiprintf_r+0x130>
 80082ee:	7863      	ldrb	r3, [r4, #1]
 80082f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80082f2:	d132      	bne.n	800835a <_svfiprintf_r+0x186>
 80082f4:	9b03      	ldr	r3, [sp, #12]
 80082f6:	3402      	adds	r4, #2
 80082f8:	1d1a      	adds	r2, r3, #4
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	9203      	str	r2, [sp, #12]
 80082fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008302:	9305      	str	r3, [sp, #20]
 8008304:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80083bc <_svfiprintf_r+0x1e8>
 8008308:	2203      	movs	r2, #3
 800830a:	4650      	mov	r0, sl
 800830c:	7821      	ldrb	r1, [r4, #0]
 800830e:	f7fe fc28 	bl	8006b62 <memchr>
 8008312:	b138      	cbz	r0, 8008324 <_svfiprintf_r+0x150>
 8008314:	2240      	movs	r2, #64	@ 0x40
 8008316:	9b04      	ldr	r3, [sp, #16]
 8008318:	eba0 000a 	sub.w	r0, r0, sl
 800831c:	4082      	lsls	r2, r0
 800831e:	4313      	orrs	r3, r2
 8008320:	3401      	adds	r4, #1
 8008322:	9304      	str	r3, [sp, #16]
 8008324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008328:	2206      	movs	r2, #6
 800832a:	4825      	ldr	r0, [pc, #148]	@ (80083c0 <_svfiprintf_r+0x1ec>)
 800832c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008330:	f7fe fc17 	bl	8006b62 <memchr>
 8008334:	2800      	cmp	r0, #0
 8008336:	d036      	beq.n	80083a6 <_svfiprintf_r+0x1d2>
 8008338:	4b22      	ldr	r3, [pc, #136]	@ (80083c4 <_svfiprintf_r+0x1f0>)
 800833a:	bb1b      	cbnz	r3, 8008384 <_svfiprintf_r+0x1b0>
 800833c:	9b03      	ldr	r3, [sp, #12]
 800833e:	3307      	adds	r3, #7
 8008340:	f023 0307 	bic.w	r3, r3, #7
 8008344:	3308      	adds	r3, #8
 8008346:	9303      	str	r3, [sp, #12]
 8008348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800834a:	4433      	add	r3, r6
 800834c:	9309      	str	r3, [sp, #36]	@ 0x24
 800834e:	e76a      	b.n	8008226 <_svfiprintf_r+0x52>
 8008350:	460c      	mov	r4, r1
 8008352:	2001      	movs	r0, #1
 8008354:	fb0c 3202 	mla	r2, ip, r2, r3
 8008358:	e7a8      	b.n	80082ac <_svfiprintf_r+0xd8>
 800835a:	2300      	movs	r3, #0
 800835c:	f04f 0c0a 	mov.w	ip, #10
 8008360:	4619      	mov	r1, r3
 8008362:	3401      	adds	r4, #1
 8008364:	9305      	str	r3, [sp, #20]
 8008366:	4620      	mov	r0, r4
 8008368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800836c:	3a30      	subs	r2, #48	@ 0x30
 800836e:	2a09      	cmp	r2, #9
 8008370:	d903      	bls.n	800837a <_svfiprintf_r+0x1a6>
 8008372:	2b00      	cmp	r3, #0
 8008374:	d0c6      	beq.n	8008304 <_svfiprintf_r+0x130>
 8008376:	9105      	str	r1, [sp, #20]
 8008378:	e7c4      	b.n	8008304 <_svfiprintf_r+0x130>
 800837a:	4604      	mov	r4, r0
 800837c:	2301      	movs	r3, #1
 800837e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008382:	e7f0      	b.n	8008366 <_svfiprintf_r+0x192>
 8008384:	ab03      	add	r3, sp, #12
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	462a      	mov	r2, r5
 800838a:	4638      	mov	r0, r7
 800838c:	4b0e      	ldr	r3, [pc, #56]	@ (80083c8 <_svfiprintf_r+0x1f4>)
 800838e:	a904      	add	r1, sp, #16
 8008390:	f7fd fe84 	bl	800609c <_printf_float>
 8008394:	1c42      	adds	r2, r0, #1
 8008396:	4606      	mov	r6, r0
 8008398:	d1d6      	bne.n	8008348 <_svfiprintf_r+0x174>
 800839a:	89ab      	ldrh	r3, [r5, #12]
 800839c:	065b      	lsls	r3, r3, #25
 800839e:	f53f af2d 	bmi.w	80081fc <_svfiprintf_r+0x28>
 80083a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083a4:	e72c      	b.n	8008200 <_svfiprintf_r+0x2c>
 80083a6:	ab03      	add	r3, sp, #12
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	462a      	mov	r2, r5
 80083ac:	4638      	mov	r0, r7
 80083ae:	4b06      	ldr	r3, [pc, #24]	@ (80083c8 <_svfiprintf_r+0x1f4>)
 80083b0:	a904      	add	r1, sp, #16
 80083b2:	f7fe f911 	bl	80065d8 <_printf_i>
 80083b6:	e7ed      	b.n	8008394 <_svfiprintf_r+0x1c0>
 80083b8:	080091a0 	.word	0x080091a0
 80083bc:	080091a6 	.word	0x080091a6
 80083c0:	080091aa 	.word	0x080091aa
 80083c4:	0800609d 	.word	0x0800609d
 80083c8:	0800811d 	.word	0x0800811d

080083cc <__sflush_r>:
 80083cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80083d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d2:	0716      	lsls	r6, r2, #28
 80083d4:	4605      	mov	r5, r0
 80083d6:	460c      	mov	r4, r1
 80083d8:	d454      	bmi.n	8008484 <__sflush_r+0xb8>
 80083da:	684b      	ldr	r3, [r1, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	dc02      	bgt.n	80083e6 <__sflush_r+0x1a>
 80083e0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	dd48      	ble.n	8008478 <__sflush_r+0xac>
 80083e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083e8:	2e00      	cmp	r6, #0
 80083ea:	d045      	beq.n	8008478 <__sflush_r+0xac>
 80083ec:	2300      	movs	r3, #0
 80083ee:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80083f2:	682f      	ldr	r7, [r5, #0]
 80083f4:	6a21      	ldr	r1, [r4, #32]
 80083f6:	602b      	str	r3, [r5, #0]
 80083f8:	d030      	beq.n	800845c <__sflush_r+0x90>
 80083fa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80083fc:	89a3      	ldrh	r3, [r4, #12]
 80083fe:	0759      	lsls	r1, r3, #29
 8008400:	d505      	bpl.n	800840e <__sflush_r+0x42>
 8008402:	6863      	ldr	r3, [r4, #4]
 8008404:	1ad2      	subs	r2, r2, r3
 8008406:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008408:	b10b      	cbz	r3, 800840e <__sflush_r+0x42>
 800840a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800840c:	1ad2      	subs	r2, r2, r3
 800840e:	2300      	movs	r3, #0
 8008410:	4628      	mov	r0, r5
 8008412:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008414:	6a21      	ldr	r1, [r4, #32]
 8008416:	47b0      	blx	r6
 8008418:	1c43      	adds	r3, r0, #1
 800841a:	89a3      	ldrh	r3, [r4, #12]
 800841c:	d106      	bne.n	800842c <__sflush_r+0x60>
 800841e:	6829      	ldr	r1, [r5, #0]
 8008420:	291d      	cmp	r1, #29
 8008422:	d82b      	bhi.n	800847c <__sflush_r+0xb0>
 8008424:	4a28      	ldr	r2, [pc, #160]	@ (80084c8 <__sflush_r+0xfc>)
 8008426:	410a      	asrs	r2, r1
 8008428:	07d6      	lsls	r6, r2, #31
 800842a:	d427      	bmi.n	800847c <__sflush_r+0xb0>
 800842c:	2200      	movs	r2, #0
 800842e:	6062      	str	r2, [r4, #4]
 8008430:	6922      	ldr	r2, [r4, #16]
 8008432:	04d9      	lsls	r1, r3, #19
 8008434:	6022      	str	r2, [r4, #0]
 8008436:	d504      	bpl.n	8008442 <__sflush_r+0x76>
 8008438:	1c42      	adds	r2, r0, #1
 800843a:	d101      	bne.n	8008440 <__sflush_r+0x74>
 800843c:	682b      	ldr	r3, [r5, #0]
 800843e:	b903      	cbnz	r3, 8008442 <__sflush_r+0x76>
 8008440:	6560      	str	r0, [r4, #84]	@ 0x54
 8008442:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008444:	602f      	str	r7, [r5, #0]
 8008446:	b1b9      	cbz	r1, 8008478 <__sflush_r+0xac>
 8008448:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800844c:	4299      	cmp	r1, r3
 800844e:	d002      	beq.n	8008456 <__sflush_r+0x8a>
 8008450:	4628      	mov	r0, r5
 8008452:	f7ff f9e5 	bl	8007820 <_free_r>
 8008456:	2300      	movs	r3, #0
 8008458:	6363      	str	r3, [r4, #52]	@ 0x34
 800845a:	e00d      	b.n	8008478 <__sflush_r+0xac>
 800845c:	2301      	movs	r3, #1
 800845e:	4628      	mov	r0, r5
 8008460:	47b0      	blx	r6
 8008462:	4602      	mov	r2, r0
 8008464:	1c50      	adds	r0, r2, #1
 8008466:	d1c9      	bne.n	80083fc <__sflush_r+0x30>
 8008468:	682b      	ldr	r3, [r5, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d0c6      	beq.n	80083fc <__sflush_r+0x30>
 800846e:	2b1d      	cmp	r3, #29
 8008470:	d001      	beq.n	8008476 <__sflush_r+0xaa>
 8008472:	2b16      	cmp	r3, #22
 8008474:	d11d      	bne.n	80084b2 <__sflush_r+0xe6>
 8008476:	602f      	str	r7, [r5, #0]
 8008478:	2000      	movs	r0, #0
 800847a:	e021      	b.n	80084c0 <__sflush_r+0xf4>
 800847c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008480:	b21b      	sxth	r3, r3
 8008482:	e01a      	b.n	80084ba <__sflush_r+0xee>
 8008484:	690f      	ldr	r7, [r1, #16]
 8008486:	2f00      	cmp	r7, #0
 8008488:	d0f6      	beq.n	8008478 <__sflush_r+0xac>
 800848a:	0793      	lsls	r3, r2, #30
 800848c:	bf18      	it	ne
 800848e:	2300      	movne	r3, #0
 8008490:	680e      	ldr	r6, [r1, #0]
 8008492:	bf08      	it	eq
 8008494:	694b      	ldreq	r3, [r1, #20]
 8008496:	1bf6      	subs	r6, r6, r7
 8008498:	600f      	str	r7, [r1, #0]
 800849a:	608b      	str	r3, [r1, #8]
 800849c:	2e00      	cmp	r6, #0
 800849e:	ddeb      	ble.n	8008478 <__sflush_r+0xac>
 80084a0:	4633      	mov	r3, r6
 80084a2:	463a      	mov	r2, r7
 80084a4:	4628      	mov	r0, r5
 80084a6:	6a21      	ldr	r1, [r4, #32]
 80084a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80084ac:	47e0      	blx	ip
 80084ae:	2800      	cmp	r0, #0
 80084b0:	dc07      	bgt.n	80084c2 <__sflush_r+0xf6>
 80084b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084ba:	f04f 30ff 	mov.w	r0, #4294967295
 80084be:	81a3      	strh	r3, [r4, #12]
 80084c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084c2:	4407      	add	r7, r0
 80084c4:	1a36      	subs	r6, r6, r0
 80084c6:	e7e9      	b.n	800849c <__sflush_r+0xd0>
 80084c8:	dfbffffe 	.word	0xdfbffffe

080084cc <_fflush_r>:
 80084cc:	b538      	push	{r3, r4, r5, lr}
 80084ce:	690b      	ldr	r3, [r1, #16]
 80084d0:	4605      	mov	r5, r0
 80084d2:	460c      	mov	r4, r1
 80084d4:	b913      	cbnz	r3, 80084dc <_fflush_r+0x10>
 80084d6:	2500      	movs	r5, #0
 80084d8:	4628      	mov	r0, r5
 80084da:	bd38      	pop	{r3, r4, r5, pc}
 80084dc:	b118      	cbz	r0, 80084e6 <_fflush_r+0x1a>
 80084de:	6a03      	ldr	r3, [r0, #32]
 80084e0:	b90b      	cbnz	r3, 80084e6 <_fflush_r+0x1a>
 80084e2:	f7fe fa25 	bl	8006930 <__sinit>
 80084e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d0f3      	beq.n	80084d6 <_fflush_r+0xa>
 80084ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80084f0:	07d0      	lsls	r0, r2, #31
 80084f2:	d404      	bmi.n	80084fe <_fflush_r+0x32>
 80084f4:	0599      	lsls	r1, r3, #22
 80084f6:	d402      	bmi.n	80084fe <_fflush_r+0x32>
 80084f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084fa:	f7fe fb30 	bl	8006b5e <__retarget_lock_acquire_recursive>
 80084fe:	4628      	mov	r0, r5
 8008500:	4621      	mov	r1, r4
 8008502:	f7ff ff63 	bl	80083cc <__sflush_r>
 8008506:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008508:	4605      	mov	r5, r0
 800850a:	07da      	lsls	r2, r3, #31
 800850c:	d4e4      	bmi.n	80084d8 <_fflush_r+0xc>
 800850e:	89a3      	ldrh	r3, [r4, #12]
 8008510:	059b      	lsls	r3, r3, #22
 8008512:	d4e1      	bmi.n	80084d8 <_fflush_r+0xc>
 8008514:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008516:	f7fe fb23 	bl	8006b60 <__retarget_lock_release_recursive>
 800851a:	e7dd      	b.n	80084d8 <_fflush_r+0xc>

0800851c <memmove>:
 800851c:	4288      	cmp	r0, r1
 800851e:	b510      	push	{r4, lr}
 8008520:	eb01 0402 	add.w	r4, r1, r2
 8008524:	d902      	bls.n	800852c <memmove+0x10>
 8008526:	4284      	cmp	r4, r0
 8008528:	4623      	mov	r3, r4
 800852a:	d807      	bhi.n	800853c <memmove+0x20>
 800852c:	1e43      	subs	r3, r0, #1
 800852e:	42a1      	cmp	r1, r4
 8008530:	d008      	beq.n	8008544 <memmove+0x28>
 8008532:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008536:	f803 2f01 	strb.w	r2, [r3, #1]!
 800853a:	e7f8      	b.n	800852e <memmove+0x12>
 800853c:	4601      	mov	r1, r0
 800853e:	4402      	add	r2, r0
 8008540:	428a      	cmp	r2, r1
 8008542:	d100      	bne.n	8008546 <memmove+0x2a>
 8008544:	bd10      	pop	{r4, pc}
 8008546:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800854a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800854e:	e7f7      	b.n	8008540 <memmove+0x24>

08008550 <_sbrk_r>:
 8008550:	b538      	push	{r3, r4, r5, lr}
 8008552:	2300      	movs	r3, #0
 8008554:	4d05      	ldr	r5, [pc, #20]	@ (800856c <_sbrk_r+0x1c>)
 8008556:	4604      	mov	r4, r0
 8008558:	4608      	mov	r0, r1
 800855a:	602b      	str	r3, [r5, #0]
 800855c:	f7f8 fd98 	bl	8001090 <_sbrk>
 8008560:	1c43      	adds	r3, r0, #1
 8008562:	d102      	bne.n	800856a <_sbrk_r+0x1a>
 8008564:	682b      	ldr	r3, [r5, #0]
 8008566:	b103      	cbz	r3, 800856a <_sbrk_r+0x1a>
 8008568:	6023      	str	r3, [r4, #0]
 800856a:	bd38      	pop	{r3, r4, r5, pc}
 800856c:	200005ac 	.word	0x200005ac

08008570 <memcpy>:
 8008570:	440a      	add	r2, r1
 8008572:	4291      	cmp	r1, r2
 8008574:	f100 33ff 	add.w	r3, r0, #4294967295
 8008578:	d100      	bne.n	800857c <memcpy+0xc>
 800857a:	4770      	bx	lr
 800857c:	b510      	push	{r4, lr}
 800857e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008582:	4291      	cmp	r1, r2
 8008584:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008588:	d1f9      	bne.n	800857e <memcpy+0xe>
 800858a:	bd10      	pop	{r4, pc}

0800858c <__assert_func>:
 800858c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800858e:	4614      	mov	r4, r2
 8008590:	461a      	mov	r2, r3
 8008592:	4b09      	ldr	r3, [pc, #36]	@ (80085b8 <__assert_func+0x2c>)
 8008594:	4605      	mov	r5, r0
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	68d8      	ldr	r0, [r3, #12]
 800859a:	b954      	cbnz	r4, 80085b2 <__assert_func+0x26>
 800859c:	4b07      	ldr	r3, [pc, #28]	@ (80085bc <__assert_func+0x30>)
 800859e:	461c      	mov	r4, r3
 80085a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80085a4:	9100      	str	r1, [sp, #0]
 80085a6:	462b      	mov	r3, r5
 80085a8:	4905      	ldr	r1, [pc, #20]	@ (80085c0 <__assert_func+0x34>)
 80085aa:	f000 f86f 	bl	800868c <fiprintf>
 80085ae:	f000 f87f 	bl	80086b0 <abort>
 80085b2:	4b04      	ldr	r3, [pc, #16]	@ (80085c4 <__assert_func+0x38>)
 80085b4:	e7f4      	b.n	80085a0 <__assert_func+0x14>
 80085b6:	bf00      	nop
 80085b8:	20000028 	.word	0x20000028
 80085bc:	080091f6 	.word	0x080091f6
 80085c0:	080091c8 	.word	0x080091c8
 80085c4:	080091bb 	.word	0x080091bb

080085c8 <_calloc_r>:
 80085c8:	b570      	push	{r4, r5, r6, lr}
 80085ca:	fba1 5402 	umull	r5, r4, r1, r2
 80085ce:	b93c      	cbnz	r4, 80085e0 <_calloc_r+0x18>
 80085d0:	4629      	mov	r1, r5
 80085d2:	f7ff f997 	bl	8007904 <_malloc_r>
 80085d6:	4606      	mov	r6, r0
 80085d8:	b928      	cbnz	r0, 80085e6 <_calloc_r+0x1e>
 80085da:	2600      	movs	r6, #0
 80085dc:	4630      	mov	r0, r6
 80085de:	bd70      	pop	{r4, r5, r6, pc}
 80085e0:	220c      	movs	r2, #12
 80085e2:	6002      	str	r2, [r0, #0]
 80085e4:	e7f9      	b.n	80085da <_calloc_r+0x12>
 80085e6:	462a      	mov	r2, r5
 80085e8:	4621      	mov	r1, r4
 80085ea:	f7fe fa3a 	bl	8006a62 <memset>
 80085ee:	e7f5      	b.n	80085dc <_calloc_r+0x14>

080085f0 <__ascii_mbtowc>:
 80085f0:	b082      	sub	sp, #8
 80085f2:	b901      	cbnz	r1, 80085f6 <__ascii_mbtowc+0x6>
 80085f4:	a901      	add	r1, sp, #4
 80085f6:	b142      	cbz	r2, 800860a <__ascii_mbtowc+0x1a>
 80085f8:	b14b      	cbz	r3, 800860e <__ascii_mbtowc+0x1e>
 80085fa:	7813      	ldrb	r3, [r2, #0]
 80085fc:	600b      	str	r3, [r1, #0]
 80085fe:	7812      	ldrb	r2, [r2, #0]
 8008600:	1e10      	subs	r0, r2, #0
 8008602:	bf18      	it	ne
 8008604:	2001      	movne	r0, #1
 8008606:	b002      	add	sp, #8
 8008608:	4770      	bx	lr
 800860a:	4610      	mov	r0, r2
 800860c:	e7fb      	b.n	8008606 <__ascii_mbtowc+0x16>
 800860e:	f06f 0001 	mvn.w	r0, #1
 8008612:	e7f8      	b.n	8008606 <__ascii_mbtowc+0x16>

08008614 <_realloc_r>:
 8008614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008618:	4680      	mov	r8, r0
 800861a:	4615      	mov	r5, r2
 800861c:	460c      	mov	r4, r1
 800861e:	b921      	cbnz	r1, 800862a <_realloc_r+0x16>
 8008620:	4611      	mov	r1, r2
 8008622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008626:	f7ff b96d 	b.w	8007904 <_malloc_r>
 800862a:	b92a      	cbnz	r2, 8008638 <_realloc_r+0x24>
 800862c:	f7ff f8f8 	bl	8007820 <_free_r>
 8008630:	2400      	movs	r4, #0
 8008632:	4620      	mov	r0, r4
 8008634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008638:	f000 f841 	bl	80086be <_malloc_usable_size_r>
 800863c:	4285      	cmp	r5, r0
 800863e:	4606      	mov	r6, r0
 8008640:	d802      	bhi.n	8008648 <_realloc_r+0x34>
 8008642:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008646:	d8f4      	bhi.n	8008632 <_realloc_r+0x1e>
 8008648:	4629      	mov	r1, r5
 800864a:	4640      	mov	r0, r8
 800864c:	f7ff f95a 	bl	8007904 <_malloc_r>
 8008650:	4607      	mov	r7, r0
 8008652:	2800      	cmp	r0, #0
 8008654:	d0ec      	beq.n	8008630 <_realloc_r+0x1c>
 8008656:	42b5      	cmp	r5, r6
 8008658:	462a      	mov	r2, r5
 800865a:	4621      	mov	r1, r4
 800865c:	bf28      	it	cs
 800865e:	4632      	movcs	r2, r6
 8008660:	f7ff ff86 	bl	8008570 <memcpy>
 8008664:	4621      	mov	r1, r4
 8008666:	4640      	mov	r0, r8
 8008668:	f7ff f8da 	bl	8007820 <_free_r>
 800866c:	463c      	mov	r4, r7
 800866e:	e7e0      	b.n	8008632 <_realloc_r+0x1e>

08008670 <__ascii_wctomb>:
 8008670:	4603      	mov	r3, r0
 8008672:	4608      	mov	r0, r1
 8008674:	b141      	cbz	r1, 8008688 <__ascii_wctomb+0x18>
 8008676:	2aff      	cmp	r2, #255	@ 0xff
 8008678:	d904      	bls.n	8008684 <__ascii_wctomb+0x14>
 800867a:	228a      	movs	r2, #138	@ 0x8a
 800867c:	f04f 30ff 	mov.w	r0, #4294967295
 8008680:	601a      	str	r2, [r3, #0]
 8008682:	4770      	bx	lr
 8008684:	2001      	movs	r0, #1
 8008686:	700a      	strb	r2, [r1, #0]
 8008688:	4770      	bx	lr
	...

0800868c <fiprintf>:
 800868c:	b40e      	push	{r1, r2, r3}
 800868e:	b503      	push	{r0, r1, lr}
 8008690:	4601      	mov	r1, r0
 8008692:	ab03      	add	r3, sp, #12
 8008694:	4805      	ldr	r0, [pc, #20]	@ (80086ac <fiprintf+0x20>)
 8008696:	f853 2b04 	ldr.w	r2, [r3], #4
 800869a:	6800      	ldr	r0, [r0, #0]
 800869c:	9301      	str	r3, [sp, #4]
 800869e:	f000 f83d 	bl	800871c <_vfiprintf_r>
 80086a2:	b002      	add	sp, #8
 80086a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80086a8:	b003      	add	sp, #12
 80086aa:	4770      	bx	lr
 80086ac:	20000028 	.word	0x20000028

080086b0 <abort>:
 80086b0:	2006      	movs	r0, #6
 80086b2:	b508      	push	{r3, lr}
 80086b4:	f000 fa06 	bl	8008ac4 <raise>
 80086b8:	2001      	movs	r0, #1
 80086ba:	f7f8 fc74 	bl	8000fa6 <_exit>

080086be <_malloc_usable_size_r>:
 80086be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086c2:	1f18      	subs	r0, r3, #4
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	bfbc      	itt	lt
 80086c8:	580b      	ldrlt	r3, [r1, r0]
 80086ca:	18c0      	addlt	r0, r0, r3
 80086cc:	4770      	bx	lr

080086ce <__sfputc_r>:
 80086ce:	6893      	ldr	r3, [r2, #8]
 80086d0:	b410      	push	{r4}
 80086d2:	3b01      	subs	r3, #1
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	6093      	str	r3, [r2, #8]
 80086d8:	da07      	bge.n	80086ea <__sfputc_r+0x1c>
 80086da:	6994      	ldr	r4, [r2, #24]
 80086dc:	42a3      	cmp	r3, r4
 80086de:	db01      	blt.n	80086e4 <__sfputc_r+0x16>
 80086e0:	290a      	cmp	r1, #10
 80086e2:	d102      	bne.n	80086ea <__sfputc_r+0x1c>
 80086e4:	bc10      	pop	{r4}
 80086e6:	f000 b931 	b.w	800894c <__swbuf_r>
 80086ea:	6813      	ldr	r3, [r2, #0]
 80086ec:	1c58      	adds	r0, r3, #1
 80086ee:	6010      	str	r0, [r2, #0]
 80086f0:	7019      	strb	r1, [r3, #0]
 80086f2:	4608      	mov	r0, r1
 80086f4:	bc10      	pop	{r4}
 80086f6:	4770      	bx	lr

080086f8 <__sfputs_r>:
 80086f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fa:	4606      	mov	r6, r0
 80086fc:	460f      	mov	r7, r1
 80086fe:	4614      	mov	r4, r2
 8008700:	18d5      	adds	r5, r2, r3
 8008702:	42ac      	cmp	r4, r5
 8008704:	d101      	bne.n	800870a <__sfputs_r+0x12>
 8008706:	2000      	movs	r0, #0
 8008708:	e007      	b.n	800871a <__sfputs_r+0x22>
 800870a:	463a      	mov	r2, r7
 800870c:	4630      	mov	r0, r6
 800870e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008712:	f7ff ffdc 	bl	80086ce <__sfputc_r>
 8008716:	1c43      	adds	r3, r0, #1
 8008718:	d1f3      	bne.n	8008702 <__sfputs_r+0xa>
 800871a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800871c <_vfiprintf_r>:
 800871c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008720:	460d      	mov	r5, r1
 8008722:	4614      	mov	r4, r2
 8008724:	4698      	mov	r8, r3
 8008726:	4606      	mov	r6, r0
 8008728:	b09d      	sub	sp, #116	@ 0x74
 800872a:	b118      	cbz	r0, 8008734 <_vfiprintf_r+0x18>
 800872c:	6a03      	ldr	r3, [r0, #32]
 800872e:	b90b      	cbnz	r3, 8008734 <_vfiprintf_r+0x18>
 8008730:	f7fe f8fe 	bl	8006930 <__sinit>
 8008734:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008736:	07d9      	lsls	r1, r3, #31
 8008738:	d405      	bmi.n	8008746 <_vfiprintf_r+0x2a>
 800873a:	89ab      	ldrh	r3, [r5, #12]
 800873c:	059a      	lsls	r2, r3, #22
 800873e:	d402      	bmi.n	8008746 <_vfiprintf_r+0x2a>
 8008740:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008742:	f7fe fa0c 	bl	8006b5e <__retarget_lock_acquire_recursive>
 8008746:	89ab      	ldrh	r3, [r5, #12]
 8008748:	071b      	lsls	r3, r3, #28
 800874a:	d501      	bpl.n	8008750 <_vfiprintf_r+0x34>
 800874c:	692b      	ldr	r3, [r5, #16]
 800874e:	b99b      	cbnz	r3, 8008778 <_vfiprintf_r+0x5c>
 8008750:	4629      	mov	r1, r5
 8008752:	4630      	mov	r0, r6
 8008754:	f000 f938 	bl	80089c8 <__swsetup_r>
 8008758:	b170      	cbz	r0, 8008778 <_vfiprintf_r+0x5c>
 800875a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800875c:	07dc      	lsls	r4, r3, #31
 800875e:	d504      	bpl.n	800876a <_vfiprintf_r+0x4e>
 8008760:	f04f 30ff 	mov.w	r0, #4294967295
 8008764:	b01d      	add	sp, #116	@ 0x74
 8008766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800876a:	89ab      	ldrh	r3, [r5, #12]
 800876c:	0598      	lsls	r0, r3, #22
 800876e:	d4f7      	bmi.n	8008760 <_vfiprintf_r+0x44>
 8008770:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008772:	f7fe f9f5 	bl	8006b60 <__retarget_lock_release_recursive>
 8008776:	e7f3      	b.n	8008760 <_vfiprintf_r+0x44>
 8008778:	2300      	movs	r3, #0
 800877a:	9309      	str	r3, [sp, #36]	@ 0x24
 800877c:	2320      	movs	r3, #32
 800877e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008782:	2330      	movs	r3, #48	@ 0x30
 8008784:	f04f 0901 	mov.w	r9, #1
 8008788:	f8cd 800c 	str.w	r8, [sp, #12]
 800878c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008938 <_vfiprintf_r+0x21c>
 8008790:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008794:	4623      	mov	r3, r4
 8008796:	469a      	mov	sl, r3
 8008798:	f813 2b01 	ldrb.w	r2, [r3], #1
 800879c:	b10a      	cbz	r2, 80087a2 <_vfiprintf_r+0x86>
 800879e:	2a25      	cmp	r2, #37	@ 0x25
 80087a0:	d1f9      	bne.n	8008796 <_vfiprintf_r+0x7a>
 80087a2:	ebba 0b04 	subs.w	fp, sl, r4
 80087a6:	d00b      	beq.n	80087c0 <_vfiprintf_r+0xa4>
 80087a8:	465b      	mov	r3, fp
 80087aa:	4622      	mov	r2, r4
 80087ac:	4629      	mov	r1, r5
 80087ae:	4630      	mov	r0, r6
 80087b0:	f7ff ffa2 	bl	80086f8 <__sfputs_r>
 80087b4:	3001      	adds	r0, #1
 80087b6:	f000 80a7 	beq.w	8008908 <_vfiprintf_r+0x1ec>
 80087ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087bc:	445a      	add	r2, fp
 80087be:	9209      	str	r2, [sp, #36]	@ 0x24
 80087c0:	f89a 3000 	ldrb.w	r3, [sl]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f000 809f 	beq.w	8008908 <_vfiprintf_r+0x1ec>
 80087ca:	2300      	movs	r3, #0
 80087cc:	f04f 32ff 	mov.w	r2, #4294967295
 80087d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087d4:	f10a 0a01 	add.w	sl, sl, #1
 80087d8:	9304      	str	r3, [sp, #16]
 80087da:	9307      	str	r3, [sp, #28]
 80087dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80087e2:	4654      	mov	r4, sl
 80087e4:	2205      	movs	r2, #5
 80087e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ea:	4853      	ldr	r0, [pc, #332]	@ (8008938 <_vfiprintf_r+0x21c>)
 80087ec:	f7fe f9b9 	bl	8006b62 <memchr>
 80087f0:	9a04      	ldr	r2, [sp, #16]
 80087f2:	b9d8      	cbnz	r0, 800882c <_vfiprintf_r+0x110>
 80087f4:	06d1      	lsls	r1, r2, #27
 80087f6:	bf44      	itt	mi
 80087f8:	2320      	movmi	r3, #32
 80087fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087fe:	0713      	lsls	r3, r2, #28
 8008800:	bf44      	itt	mi
 8008802:	232b      	movmi	r3, #43	@ 0x2b
 8008804:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008808:	f89a 3000 	ldrb.w	r3, [sl]
 800880c:	2b2a      	cmp	r3, #42	@ 0x2a
 800880e:	d015      	beq.n	800883c <_vfiprintf_r+0x120>
 8008810:	4654      	mov	r4, sl
 8008812:	2000      	movs	r0, #0
 8008814:	f04f 0c0a 	mov.w	ip, #10
 8008818:	9a07      	ldr	r2, [sp, #28]
 800881a:	4621      	mov	r1, r4
 800881c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008820:	3b30      	subs	r3, #48	@ 0x30
 8008822:	2b09      	cmp	r3, #9
 8008824:	d94b      	bls.n	80088be <_vfiprintf_r+0x1a2>
 8008826:	b1b0      	cbz	r0, 8008856 <_vfiprintf_r+0x13a>
 8008828:	9207      	str	r2, [sp, #28]
 800882a:	e014      	b.n	8008856 <_vfiprintf_r+0x13a>
 800882c:	eba0 0308 	sub.w	r3, r0, r8
 8008830:	fa09 f303 	lsl.w	r3, r9, r3
 8008834:	4313      	orrs	r3, r2
 8008836:	46a2      	mov	sl, r4
 8008838:	9304      	str	r3, [sp, #16]
 800883a:	e7d2      	b.n	80087e2 <_vfiprintf_r+0xc6>
 800883c:	9b03      	ldr	r3, [sp, #12]
 800883e:	1d19      	adds	r1, r3, #4
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	9103      	str	r1, [sp, #12]
 8008844:	2b00      	cmp	r3, #0
 8008846:	bfbb      	ittet	lt
 8008848:	425b      	neglt	r3, r3
 800884a:	f042 0202 	orrlt.w	r2, r2, #2
 800884e:	9307      	strge	r3, [sp, #28]
 8008850:	9307      	strlt	r3, [sp, #28]
 8008852:	bfb8      	it	lt
 8008854:	9204      	strlt	r2, [sp, #16]
 8008856:	7823      	ldrb	r3, [r4, #0]
 8008858:	2b2e      	cmp	r3, #46	@ 0x2e
 800885a:	d10a      	bne.n	8008872 <_vfiprintf_r+0x156>
 800885c:	7863      	ldrb	r3, [r4, #1]
 800885e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008860:	d132      	bne.n	80088c8 <_vfiprintf_r+0x1ac>
 8008862:	9b03      	ldr	r3, [sp, #12]
 8008864:	3402      	adds	r4, #2
 8008866:	1d1a      	adds	r2, r3, #4
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	9203      	str	r2, [sp, #12]
 800886c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008870:	9305      	str	r3, [sp, #20]
 8008872:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800893c <_vfiprintf_r+0x220>
 8008876:	2203      	movs	r2, #3
 8008878:	4650      	mov	r0, sl
 800887a:	7821      	ldrb	r1, [r4, #0]
 800887c:	f7fe f971 	bl	8006b62 <memchr>
 8008880:	b138      	cbz	r0, 8008892 <_vfiprintf_r+0x176>
 8008882:	2240      	movs	r2, #64	@ 0x40
 8008884:	9b04      	ldr	r3, [sp, #16]
 8008886:	eba0 000a 	sub.w	r0, r0, sl
 800888a:	4082      	lsls	r2, r0
 800888c:	4313      	orrs	r3, r2
 800888e:	3401      	adds	r4, #1
 8008890:	9304      	str	r3, [sp, #16]
 8008892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008896:	2206      	movs	r2, #6
 8008898:	4829      	ldr	r0, [pc, #164]	@ (8008940 <_vfiprintf_r+0x224>)
 800889a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800889e:	f7fe f960 	bl	8006b62 <memchr>
 80088a2:	2800      	cmp	r0, #0
 80088a4:	d03f      	beq.n	8008926 <_vfiprintf_r+0x20a>
 80088a6:	4b27      	ldr	r3, [pc, #156]	@ (8008944 <_vfiprintf_r+0x228>)
 80088a8:	bb1b      	cbnz	r3, 80088f2 <_vfiprintf_r+0x1d6>
 80088aa:	9b03      	ldr	r3, [sp, #12]
 80088ac:	3307      	adds	r3, #7
 80088ae:	f023 0307 	bic.w	r3, r3, #7
 80088b2:	3308      	adds	r3, #8
 80088b4:	9303      	str	r3, [sp, #12]
 80088b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088b8:	443b      	add	r3, r7
 80088ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80088bc:	e76a      	b.n	8008794 <_vfiprintf_r+0x78>
 80088be:	460c      	mov	r4, r1
 80088c0:	2001      	movs	r0, #1
 80088c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80088c6:	e7a8      	b.n	800881a <_vfiprintf_r+0xfe>
 80088c8:	2300      	movs	r3, #0
 80088ca:	f04f 0c0a 	mov.w	ip, #10
 80088ce:	4619      	mov	r1, r3
 80088d0:	3401      	adds	r4, #1
 80088d2:	9305      	str	r3, [sp, #20]
 80088d4:	4620      	mov	r0, r4
 80088d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088da:	3a30      	subs	r2, #48	@ 0x30
 80088dc:	2a09      	cmp	r2, #9
 80088de:	d903      	bls.n	80088e8 <_vfiprintf_r+0x1cc>
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d0c6      	beq.n	8008872 <_vfiprintf_r+0x156>
 80088e4:	9105      	str	r1, [sp, #20]
 80088e6:	e7c4      	b.n	8008872 <_vfiprintf_r+0x156>
 80088e8:	4604      	mov	r4, r0
 80088ea:	2301      	movs	r3, #1
 80088ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80088f0:	e7f0      	b.n	80088d4 <_vfiprintf_r+0x1b8>
 80088f2:	ab03      	add	r3, sp, #12
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	462a      	mov	r2, r5
 80088f8:	4630      	mov	r0, r6
 80088fa:	4b13      	ldr	r3, [pc, #76]	@ (8008948 <_vfiprintf_r+0x22c>)
 80088fc:	a904      	add	r1, sp, #16
 80088fe:	f7fd fbcd 	bl	800609c <_printf_float>
 8008902:	4607      	mov	r7, r0
 8008904:	1c78      	adds	r0, r7, #1
 8008906:	d1d6      	bne.n	80088b6 <_vfiprintf_r+0x19a>
 8008908:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800890a:	07d9      	lsls	r1, r3, #31
 800890c:	d405      	bmi.n	800891a <_vfiprintf_r+0x1fe>
 800890e:	89ab      	ldrh	r3, [r5, #12]
 8008910:	059a      	lsls	r2, r3, #22
 8008912:	d402      	bmi.n	800891a <_vfiprintf_r+0x1fe>
 8008914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008916:	f7fe f923 	bl	8006b60 <__retarget_lock_release_recursive>
 800891a:	89ab      	ldrh	r3, [r5, #12]
 800891c:	065b      	lsls	r3, r3, #25
 800891e:	f53f af1f 	bmi.w	8008760 <_vfiprintf_r+0x44>
 8008922:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008924:	e71e      	b.n	8008764 <_vfiprintf_r+0x48>
 8008926:	ab03      	add	r3, sp, #12
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	462a      	mov	r2, r5
 800892c:	4630      	mov	r0, r6
 800892e:	4b06      	ldr	r3, [pc, #24]	@ (8008948 <_vfiprintf_r+0x22c>)
 8008930:	a904      	add	r1, sp, #16
 8008932:	f7fd fe51 	bl	80065d8 <_printf_i>
 8008936:	e7e4      	b.n	8008902 <_vfiprintf_r+0x1e6>
 8008938:	080091a0 	.word	0x080091a0
 800893c:	080091a6 	.word	0x080091a6
 8008940:	080091aa 	.word	0x080091aa
 8008944:	0800609d 	.word	0x0800609d
 8008948:	080086f9 	.word	0x080086f9

0800894c <__swbuf_r>:
 800894c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894e:	460e      	mov	r6, r1
 8008950:	4614      	mov	r4, r2
 8008952:	4605      	mov	r5, r0
 8008954:	b118      	cbz	r0, 800895e <__swbuf_r+0x12>
 8008956:	6a03      	ldr	r3, [r0, #32]
 8008958:	b90b      	cbnz	r3, 800895e <__swbuf_r+0x12>
 800895a:	f7fd ffe9 	bl	8006930 <__sinit>
 800895e:	69a3      	ldr	r3, [r4, #24]
 8008960:	60a3      	str	r3, [r4, #8]
 8008962:	89a3      	ldrh	r3, [r4, #12]
 8008964:	071a      	lsls	r2, r3, #28
 8008966:	d501      	bpl.n	800896c <__swbuf_r+0x20>
 8008968:	6923      	ldr	r3, [r4, #16]
 800896a:	b943      	cbnz	r3, 800897e <__swbuf_r+0x32>
 800896c:	4621      	mov	r1, r4
 800896e:	4628      	mov	r0, r5
 8008970:	f000 f82a 	bl	80089c8 <__swsetup_r>
 8008974:	b118      	cbz	r0, 800897e <__swbuf_r+0x32>
 8008976:	f04f 37ff 	mov.w	r7, #4294967295
 800897a:	4638      	mov	r0, r7
 800897c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	6922      	ldr	r2, [r4, #16]
 8008982:	b2f6      	uxtb	r6, r6
 8008984:	1a98      	subs	r0, r3, r2
 8008986:	6963      	ldr	r3, [r4, #20]
 8008988:	4637      	mov	r7, r6
 800898a:	4283      	cmp	r3, r0
 800898c:	dc05      	bgt.n	800899a <__swbuf_r+0x4e>
 800898e:	4621      	mov	r1, r4
 8008990:	4628      	mov	r0, r5
 8008992:	f7ff fd9b 	bl	80084cc <_fflush_r>
 8008996:	2800      	cmp	r0, #0
 8008998:	d1ed      	bne.n	8008976 <__swbuf_r+0x2a>
 800899a:	68a3      	ldr	r3, [r4, #8]
 800899c:	3b01      	subs	r3, #1
 800899e:	60a3      	str	r3, [r4, #8]
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	1c5a      	adds	r2, r3, #1
 80089a4:	6022      	str	r2, [r4, #0]
 80089a6:	701e      	strb	r6, [r3, #0]
 80089a8:	6962      	ldr	r2, [r4, #20]
 80089aa:	1c43      	adds	r3, r0, #1
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d004      	beq.n	80089ba <__swbuf_r+0x6e>
 80089b0:	89a3      	ldrh	r3, [r4, #12]
 80089b2:	07db      	lsls	r3, r3, #31
 80089b4:	d5e1      	bpl.n	800897a <__swbuf_r+0x2e>
 80089b6:	2e0a      	cmp	r6, #10
 80089b8:	d1df      	bne.n	800897a <__swbuf_r+0x2e>
 80089ba:	4621      	mov	r1, r4
 80089bc:	4628      	mov	r0, r5
 80089be:	f7ff fd85 	bl	80084cc <_fflush_r>
 80089c2:	2800      	cmp	r0, #0
 80089c4:	d0d9      	beq.n	800897a <__swbuf_r+0x2e>
 80089c6:	e7d6      	b.n	8008976 <__swbuf_r+0x2a>

080089c8 <__swsetup_r>:
 80089c8:	b538      	push	{r3, r4, r5, lr}
 80089ca:	4b29      	ldr	r3, [pc, #164]	@ (8008a70 <__swsetup_r+0xa8>)
 80089cc:	4605      	mov	r5, r0
 80089ce:	6818      	ldr	r0, [r3, #0]
 80089d0:	460c      	mov	r4, r1
 80089d2:	b118      	cbz	r0, 80089dc <__swsetup_r+0x14>
 80089d4:	6a03      	ldr	r3, [r0, #32]
 80089d6:	b90b      	cbnz	r3, 80089dc <__swsetup_r+0x14>
 80089d8:	f7fd ffaa 	bl	8006930 <__sinit>
 80089dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089e0:	0719      	lsls	r1, r3, #28
 80089e2:	d422      	bmi.n	8008a2a <__swsetup_r+0x62>
 80089e4:	06da      	lsls	r2, r3, #27
 80089e6:	d407      	bmi.n	80089f8 <__swsetup_r+0x30>
 80089e8:	2209      	movs	r2, #9
 80089ea:	602a      	str	r2, [r5, #0]
 80089ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089f0:	f04f 30ff 	mov.w	r0, #4294967295
 80089f4:	81a3      	strh	r3, [r4, #12]
 80089f6:	e033      	b.n	8008a60 <__swsetup_r+0x98>
 80089f8:	0758      	lsls	r0, r3, #29
 80089fa:	d512      	bpl.n	8008a22 <__swsetup_r+0x5a>
 80089fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089fe:	b141      	cbz	r1, 8008a12 <__swsetup_r+0x4a>
 8008a00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a04:	4299      	cmp	r1, r3
 8008a06:	d002      	beq.n	8008a0e <__swsetup_r+0x46>
 8008a08:	4628      	mov	r0, r5
 8008a0a:	f7fe ff09 	bl	8007820 <_free_r>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a12:	89a3      	ldrh	r3, [r4, #12]
 8008a14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a18:	81a3      	strh	r3, [r4, #12]
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	6063      	str	r3, [r4, #4]
 8008a1e:	6923      	ldr	r3, [r4, #16]
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	89a3      	ldrh	r3, [r4, #12]
 8008a24:	f043 0308 	orr.w	r3, r3, #8
 8008a28:	81a3      	strh	r3, [r4, #12]
 8008a2a:	6923      	ldr	r3, [r4, #16]
 8008a2c:	b94b      	cbnz	r3, 8008a42 <__swsetup_r+0x7a>
 8008a2e:	89a3      	ldrh	r3, [r4, #12]
 8008a30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a38:	d003      	beq.n	8008a42 <__swsetup_r+0x7a>
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	f000 f882 	bl	8008b46 <__smakebuf_r>
 8008a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a46:	f013 0201 	ands.w	r2, r3, #1
 8008a4a:	d00a      	beq.n	8008a62 <__swsetup_r+0x9a>
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	60a2      	str	r2, [r4, #8]
 8008a50:	6962      	ldr	r2, [r4, #20]
 8008a52:	4252      	negs	r2, r2
 8008a54:	61a2      	str	r2, [r4, #24]
 8008a56:	6922      	ldr	r2, [r4, #16]
 8008a58:	b942      	cbnz	r2, 8008a6c <__swsetup_r+0xa4>
 8008a5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a5e:	d1c5      	bne.n	80089ec <__swsetup_r+0x24>
 8008a60:	bd38      	pop	{r3, r4, r5, pc}
 8008a62:	0799      	lsls	r1, r3, #30
 8008a64:	bf58      	it	pl
 8008a66:	6962      	ldrpl	r2, [r4, #20]
 8008a68:	60a2      	str	r2, [r4, #8]
 8008a6a:	e7f4      	b.n	8008a56 <__swsetup_r+0x8e>
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	e7f7      	b.n	8008a60 <__swsetup_r+0x98>
 8008a70:	20000028 	.word	0x20000028

08008a74 <_raise_r>:
 8008a74:	291f      	cmp	r1, #31
 8008a76:	b538      	push	{r3, r4, r5, lr}
 8008a78:	4605      	mov	r5, r0
 8008a7a:	460c      	mov	r4, r1
 8008a7c:	d904      	bls.n	8008a88 <_raise_r+0x14>
 8008a7e:	2316      	movs	r3, #22
 8008a80:	6003      	str	r3, [r0, #0]
 8008a82:	f04f 30ff 	mov.w	r0, #4294967295
 8008a86:	bd38      	pop	{r3, r4, r5, pc}
 8008a88:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008a8a:	b112      	cbz	r2, 8008a92 <_raise_r+0x1e>
 8008a8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a90:	b94b      	cbnz	r3, 8008aa6 <_raise_r+0x32>
 8008a92:	4628      	mov	r0, r5
 8008a94:	f000 f830 	bl	8008af8 <_getpid_r>
 8008a98:	4622      	mov	r2, r4
 8008a9a:	4601      	mov	r1, r0
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008aa2:	f000 b817 	b.w	8008ad4 <_kill_r>
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d00a      	beq.n	8008ac0 <_raise_r+0x4c>
 8008aaa:	1c59      	adds	r1, r3, #1
 8008aac:	d103      	bne.n	8008ab6 <_raise_r+0x42>
 8008aae:	2316      	movs	r3, #22
 8008ab0:	6003      	str	r3, [r0, #0]
 8008ab2:	2001      	movs	r0, #1
 8008ab4:	e7e7      	b.n	8008a86 <_raise_r+0x12>
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008abe:	4798      	blx	r3
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	e7e0      	b.n	8008a86 <_raise_r+0x12>

08008ac4 <raise>:
 8008ac4:	4b02      	ldr	r3, [pc, #8]	@ (8008ad0 <raise+0xc>)
 8008ac6:	4601      	mov	r1, r0
 8008ac8:	6818      	ldr	r0, [r3, #0]
 8008aca:	f7ff bfd3 	b.w	8008a74 <_raise_r>
 8008ace:	bf00      	nop
 8008ad0:	20000028 	.word	0x20000028

08008ad4 <_kill_r>:
 8008ad4:	b538      	push	{r3, r4, r5, lr}
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	4d06      	ldr	r5, [pc, #24]	@ (8008af4 <_kill_r+0x20>)
 8008ada:	4604      	mov	r4, r0
 8008adc:	4608      	mov	r0, r1
 8008ade:	4611      	mov	r1, r2
 8008ae0:	602b      	str	r3, [r5, #0]
 8008ae2:	f7f8 fa50 	bl	8000f86 <_kill>
 8008ae6:	1c43      	adds	r3, r0, #1
 8008ae8:	d102      	bne.n	8008af0 <_kill_r+0x1c>
 8008aea:	682b      	ldr	r3, [r5, #0]
 8008aec:	b103      	cbz	r3, 8008af0 <_kill_r+0x1c>
 8008aee:	6023      	str	r3, [r4, #0]
 8008af0:	bd38      	pop	{r3, r4, r5, pc}
 8008af2:	bf00      	nop
 8008af4:	200005ac 	.word	0x200005ac

08008af8 <_getpid_r>:
 8008af8:	f7f8 ba3e 	b.w	8000f78 <_getpid>

08008afc <__swhatbuf_r>:
 8008afc:	b570      	push	{r4, r5, r6, lr}
 8008afe:	460c      	mov	r4, r1
 8008b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b04:	4615      	mov	r5, r2
 8008b06:	2900      	cmp	r1, #0
 8008b08:	461e      	mov	r6, r3
 8008b0a:	b096      	sub	sp, #88	@ 0x58
 8008b0c:	da0c      	bge.n	8008b28 <__swhatbuf_r+0x2c>
 8008b0e:	89a3      	ldrh	r3, [r4, #12]
 8008b10:	2100      	movs	r1, #0
 8008b12:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b16:	bf14      	ite	ne
 8008b18:	2340      	movne	r3, #64	@ 0x40
 8008b1a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b1e:	2000      	movs	r0, #0
 8008b20:	6031      	str	r1, [r6, #0]
 8008b22:	602b      	str	r3, [r5, #0]
 8008b24:	b016      	add	sp, #88	@ 0x58
 8008b26:	bd70      	pop	{r4, r5, r6, pc}
 8008b28:	466a      	mov	r2, sp
 8008b2a:	f000 f849 	bl	8008bc0 <_fstat_r>
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	dbed      	blt.n	8008b0e <__swhatbuf_r+0x12>
 8008b32:	9901      	ldr	r1, [sp, #4]
 8008b34:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b38:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b3c:	4259      	negs	r1, r3
 8008b3e:	4159      	adcs	r1, r3
 8008b40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b44:	e7eb      	b.n	8008b1e <__swhatbuf_r+0x22>

08008b46 <__smakebuf_r>:
 8008b46:	898b      	ldrh	r3, [r1, #12]
 8008b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b4a:	079d      	lsls	r5, r3, #30
 8008b4c:	4606      	mov	r6, r0
 8008b4e:	460c      	mov	r4, r1
 8008b50:	d507      	bpl.n	8008b62 <__smakebuf_r+0x1c>
 8008b52:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b56:	6023      	str	r3, [r4, #0]
 8008b58:	6123      	str	r3, [r4, #16]
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	6163      	str	r3, [r4, #20]
 8008b5e:	b003      	add	sp, #12
 8008b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b62:	466a      	mov	r2, sp
 8008b64:	ab01      	add	r3, sp, #4
 8008b66:	f7ff ffc9 	bl	8008afc <__swhatbuf_r>
 8008b6a:	9f00      	ldr	r7, [sp, #0]
 8008b6c:	4605      	mov	r5, r0
 8008b6e:	4639      	mov	r1, r7
 8008b70:	4630      	mov	r0, r6
 8008b72:	f7fe fec7 	bl	8007904 <_malloc_r>
 8008b76:	b948      	cbnz	r0, 8008b8c <__smakebuf_r+0x46>
 8008b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b7c:	059a      	lsls	r2, r3, #22
 8008b7e:	d4ee      	bmi.n	8008b5e <__smakebuf_r+0x18>
 8008b80:	f023 0303 	bic.w	r3, r3, #3
 8008b84:	f043 0302 	orr.w	r3, r3, #2
 8008b88:	81a3      	strh	r3, [r4, #12]
 8008b8a:	e7e2      	b.n	8008b52 <__smakebuf_r+0xc>
 8008b8c:	89a3      	ldrh	r3, [r4, #12]
 8008b8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b96:	81a3      	strh	r3, [r4, #12]
 8008b98:	9b01      	ldr	r3, [sp, #4]
 8008b9a:	6020      	str	r0, [r4, #0]
 8008b9c:	b15b      	cbz	r3, 8008bb6 <__smakebuf_r+0x70>
 8008b9e:	4630      	mov	r0, r6
 8008ba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ba4:	f000 f81e 	bl	8008be4 <_isatty_r>
 8008ba8:	b128      	cbz	r0, 8008bb6 <__smakebuf_r+0x70>
 8008baa:	89a3      	ldrh	r3, [r4, #12]
 8008bac:	f023 0303 	bic.w	r3, r3, #3
 8008bb0:	f043 0301 	orr.w	r3, r3, #1
 8008bb4:	81a3      	strh	r3, [r4, #12]
 8008bb6:	89a3      	ldrh	r3, [r4, #12]
 8008bb8:	431d      	orrs	r5, r3
 8008bba:	81a5      	strh	r5, [r4, #12]
 8008bbc:	e7cf      	b.n	8008b5e <__smakebuf_r+0x18>
	...

08008bc0 <_fstat_r>:
 8008bc0:	b538      	push	{r3, r4, r5, lr}
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	4d06      	ldr	r5, [pc, #24]	@ (8008be0 <_fstat_r+0x20>)
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	4608      	mov	r0, r1
 8008bca:	4611      	mov	r1, r2
 8008bcc:	602b      	str	r3, [r5, #0]
 8008bce:	f7f8 fa39 	bl	8001044 <_fstat>
 8008bd2:	1c43      	adds	r3, r0, #1
 8008bd4:	d102      	bne.n	8008bdc <_fstat_r+0x1c>
 8008bd6:	682b      	ldr	r3, [r5, #0]
 8008bd8:	b103      	cbz	r3, 8008bdc <_fstat_r+0x1c>
 8008bda:	6023      	str	r3, [r4, #0]
 8008bdc:	bd38      	pop	{r3, r4, r5, pc}
 8008bde:	bf00      	nop
 8008be0:	200005ac 	.word	0x200005ac

08008be4 <_isatty_r>:
 8008be4:	b538      	push	{r3, r4, r5, lr}
 8008be6:	2300      	movs	r3, #0
 8008be8:	4d05      	ldr	r5, [pc, #20]	@ (8008c00 <_isatty_r+0x1c>)
 8008bea:	4604      	mov	r4, r0
 8008bec:	4608      	mov	r0, r1
 8008bee:	602b      	str	r3, [r5, #0]
 8008bf0:	f7f8 fa37 	bl	8001062 <_isatty>
 8008bf4:	1c43      	adds	r3, r0, #1
 8008bf6:	d102      	bne.n	8008bfe <_isatty_r+0x1a>
 8008bf8:	682b      	ldr	r3, [r5, #0]
 8008bfa:	b103      	cbz	r3, 8008bfe <_isatty_r+0x1a>
 8008bfc:	6023      	str	r3, [r4, #0]
 8008bfe:	bd38      	pop	{r3, r4, r5, pc}
 8008c00:	200005ac 	.word	0x200005ac

08008c04 <_init>:
 8008c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c06:	bf00      	nop
 8008c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c0a:	bc08      	pop	{r3}
 8008c0c:	469e      	mov	lr, r3
 8008c0e:	4770      	bx	lr

08008c10 <_fini>:
 8008c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c12:	bf00      	nop
 8008c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c16:	bc08      	pop	{r3}
 8008c18:	469e      	mov	lr, r3
 8008c1a:	4770      	bx	lr
